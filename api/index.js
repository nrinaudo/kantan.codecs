Index.PACKAGES = {"kantan.codecs.cats.laws.discipline" : [{"name" : "kantan.codecs.cats.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/cats\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.cats.laws.discipline.ArbitraryInstances", "trait" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/cats\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.cats.laws.discipline.EqInstances", "trait" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html", "kind" : "trait", "members_trait" : [{"label" : "encoderEq", "tail" : "(arg0: Eq[E], arg1: Arbitrary[D]): Eq[Encoder[E, D, T]]", "member" : "kantan.codecs.cats.laws.discipline.EqInstances.encoderEq", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#encoderEq[E,D,T](implicitevidence$6:cats.Eq[E],implicitevidence$7:org.scalacheck.Arbitrary[D]):cats.Eq[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "decoderEq", "tail" : "(arg0: Arbitrary[E], arg1: Eq[D], arg2: Eq[F]): Eq[Decoder[E, D, F, T]]", "member" : "kantan.codecs.cats.laws.discipline.EqInstances.decoderEq", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#decoderEq[E,D,F,T](implicitevidence$3:org.scalacheck.Arbitrary[E],implicitevidence$4:cats.Eq[D],implicitevidence$5:cats.Eq[F]):cats.Eq[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "eqFunction", "tail" : "(arg0: Arbitrary[A], arg1: Eq[B]): Eq[(A) => B]", "member" : "kantan.codecs.cats.laws.discipline.EqInstances.eqFunction", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#eqFunction[A,B](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[B]):cats.Eq[A=>B]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/cats\/laws\/discipline\/EqInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.cats.laws.discipline.equality", "shortDescription" : "", "object" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html", "members_object" : [{"label" : "encoderEq", "tail" : "(arg0: Eq[E], arg1: Arbitrary[D]): Eq[Encoder[E, D, T]]", "member" : "kantan.codecs.cats.laws.discipline.EqInstances.encoderEq", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#encoderEq[E,D,T](implicitevidence$6:cats.Eq[E],implicitevidence$7:org.scalacheck.Arbitrary[D]):cats.Eq[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "decoderEq", "tail" : "(arg0: Arbitrary[E], arg1: Eq[D], arg2: Eq[F]): Eq[Decoder[E, D, F, T]]", "member" : "kantan.codecs.cats.laws.discipline.EqInstances.decoderEq", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#decoderEq[E,D,F,T](implicitevidence$3:org.scalacheck.Arbitrary[E],implicitevidence$4:cats.Eq[D],implicitevidence$5:cats.Eq[F]):cats.Eq[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "eqFunction", "tail" : "(arg0: Arbitrary[A], arg1: Eq[B]): Eq[(A) => B]", "member" : "kantan.codecs.cats.laws.discipline.EqInstances.eqFunction", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#eqFunction[A,B](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[B]):cats.Eq[A=>B]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/cats\/laws\/discipline\/equality$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "kantan.codecs.strings.java8.laws" : [], "kantan.codecs.enumeratum.laws" : [], "kantan.codecs.enumeratum.laws.discipline" : [{"name" : "kantan.codecs.enumeratum.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "arbIllegalEnumeratedChar", "tail" : ": Arbitrary[IllegalString[EnumeratedChar]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedChar", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalEnumeratedChar:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedChar]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedChar", "tail" : ": Arbitrary[LegalString[EnumeratedChar]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedChar", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLegalEnumeratedChar:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedChar]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedByte", "tail" : ": Arbitrary[IllegalString[EnumeratedByte]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedByte", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalEnumeratedByte:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedByte]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedByte", "tail" : ": Arbitrary[LegalString[EnumeratedByte]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedByte", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLegalEnumeratedByte:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedByte]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedString", "tail" : ": Arbitrary[IllegalString[EnumeratedString]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalEnumeratedString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedString]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedString", "tail" : ": Arbitrary[LegalString[EnumeratedString]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLegalEnumeratedString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedString]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedShort", "tail" : ": Arbitrary[IllegalString[EnumeratedShort]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedShort", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalEnumeratedShort:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedShort]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedShort", "tail" : ": Arbitrary[LegalString[EnumeratedShort]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedShort", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLegalEnumeratedShort:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedShort]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedLong", "tail" : ": Arbitrary[IllegalString[EnumeratedLong]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedLong", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalEnumeratedLong:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedLong]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedLong", "tail" : ": Arbitrary[LegalString[EnumeratedLong]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedLong", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLegalEnumeratedLong:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedLong]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedInt", "tail" : ": Arbitrary[IllegalString[EnumeratedInt]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedInt", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalEnumeratedInt:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedInt]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedInt", "tail" : ": Arbitrary[LegalString[EnumeratedInt]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedInt", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLegalEnumeratedInt:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedInt]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedValue", "tail" : "(enum: ValueEnum[V, A])(arg0: StringEncoder[V]): Arbitrary[IllegalValue[String, A, strings.codecs.type]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalEnumeratedValue[V,A<:enumeratum.values.ValueEnumEntry[V]](enum:enumeratum.values.ValueEnum[V,A])(implicitevidence$2:kantan.codecs.strings.StringEncoder[V]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,A,kantan.codecs.strings.codecs.type]]", "kind" : "def"}, {"label" : "arbLegalEnumeratedValue", "tail" : "(enum: ValueEnum[V, A])(arg0: StringEncoder[V]): Arbitrary[LegalString[A]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLegalEnumeratedValue[V,A<:enumeratum.values.ValueEnumEntry[V]](enum:enumeratum.values.ValueEnum[V,A])(implicitevidence$1:kantan.codecs.strings.StringEncoder[V]):org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]", "kind" : "def"}, {"label" : "arbIllegalEnumerated", "tail" : ": Arbitrary[IllegalString[Enumerated]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumerated", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIllegalEnumerated:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.Enumerated]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumerated", "tail" : ": Arbitrary[LegalString[Enumerated]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumerated", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLegalEnumerated:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.Enumerated]]", "kind" : "implicit val"}, {"label" : "cogenStringEnumEntry", "tail" : "(arg0: StringEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenStringEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenStringEnumEntry[EnumType<:enumeratum.values.StringEnumEntry](implicitevidence$6:enumeratum.values.StringEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "cogenShortEnumEntry", "tail" : "(arg0: ShortEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenShortEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenShortEnumEntry[EnumType<:enumeratum.values.ShortEnumEntry](implicitevidence$5:enumeratum.values.ShortEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "cogenLongEnumEntry", "tail" : "(arg0: LongEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenLongEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenLongEnumEntry[EnumType<:enumeratum.values.LongEnumEntry](implicitevidence$4:enumeratum.values.LongEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "cogenIntEnumEntry", "tail" : "(arg0: IntEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenIntEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenIntEnumEntry[EnumType<:enumeratum.values.IntEnumEntry](implicitevidence$3:enumeratum.values.IntEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "cogenCharEnumEntry", "tail" : "(arg0: CharEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenCharEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenCharEnumEntry[EnumType<:enumeratum.values.CharEnumEntry](implicitevidence$2:enumeratum.values.CharEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "cogenByteEnumEntry", "tail" : "(arg0: ByteEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenByteEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenByteEnumEntry[EnumType<:enumeratum.values.ByteEnumEntry](implicitevidence$1:enumeratum.values.ByteEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "arbStringEnumEntry", "tail" : "(arg0: StringEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbStringEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbStringEnumEntry[EntryType<:enumeratum.values.StringEnumEntry](implicitevidence$6:enumeratum.values.StringEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "arbShortEnumEntry", "tail" : "(arg0: ShortEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbShortEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbShortEnumEntry[EntryType<:enumeratum.values.ShortEnumEntry](implicitevidence$5:enumeratum.values.ShortEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "arbLongEnumEntry", "tail" : "(arg0: LongEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbLongEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbLongEnumEntry[EntryType<:enumeratum.values.LongEnumEntry](implicitevidence$4:enumeratum.values.LongEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "arbIntEnumEntry", "tail" : "(arg0: IntEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbIntEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbIntEnumEntry[EntryType<:enumeratum.values.IntEnumEntry](implicitevidence$3:enumeratum.values.IntEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "arbCharEnumEntry", "tail" : "(arg0: CharEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbCharEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbCharEnumEntry[EntryType<:enumeratum.values.CharEnumEntry](implicitevidence$2:enumeratum.values.CharEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "arbByteEnumEntry", "tail" : "(arg0: ByteEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbByteEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbByteEnumEntry[EntryType<:enumeratum.values.ByteEnumEntry](implicitevidence$1:enumeratum.values.ByteEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "cogenEnumEntry", "tail" : "(arg0: Enum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.CogenInstances.cogenEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#cogenEnumEntry[EnumType<:enumeratum.EnumEntry](implicitevidence$1:enumeratum.Enum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "arbEnumEntry", "tail" : "(enum: Enum[EnumType]): Arbitrary[EnumType]", "member" : "enumeratum.ArbitraryInstances.arbEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#arbEnumEntry[EnumType<:enumeratum.EnumEntry](implicitenum:enumeratum.Enum[EnumType]):org.scalacheck.Arbitrary[EnumType]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances", "trait" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "arbIllegalEnumeratedChar", "tail" : ": Arbitrary[IllegalString[EnumeratedChar]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedChar", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbIllegalEnumeratedChar:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedChar]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedChar", "tail" : ": Arbitrary[LegalString[EnumeratedChar]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedChar", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbLegalEnumeratedChar:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedChar]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedByte", "tail" : ": Arbitrary[IllegalString[EnumeratedByte]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedByte", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbIllegalEnumeratedByte:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedByte]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedByte", "tail" : ": Arbitrary[LegalString[EnumeratedByte]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedByte", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbLegalEnumeratedByte:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedByte]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedString", "tail" : ": Arbitrary[IllegalString[EnumeratedString]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbIllegalEnumeratedString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedString]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedString", "tail" : ": Arbitrary[LegalString[EnumeratedString]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbLegalEnumeratedString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedString]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedShort", "tail" : ": Arbitrary[IllegalString[EnumeratedShort]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedShort", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbIllegalEnumeratedShort:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedShort]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedShort", "tail" : ": Arbitrary[LegalString[EnumeratedShort]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedShort", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbLegalEnumeratedShort:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedShort]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedLong", "tail" : ": Arbitrary[IllegalString[EnumeratedLong]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedLong", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbIllegalEnumeratedLong:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedLong]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedLong", "tail" : ": Arbitrary[LegalString[EnumeratedLong]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedLong", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbLegalEnumeratedLong:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedLong]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedInt", "tail" : ": Arbitrary[IllegalString[EnumeratedInt]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedInt", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbIllegalEnumeratedInt:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedInt]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumeratedInt", "tail" : ": Arbitrary[LegalString[EnumeratedInt]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedInt", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbLegalEnumeratedInt:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.EnumeratedInt]]", "kind" : "implicit val"}, {"label" : "arbIllegalEnumeratedValue", "tail" : "(enum: ValueEnum[V, A])(arg0: StringEncoder[V]): Arbitrary[IllegalValue[String, A, strings.codecs.type]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumeratedValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbIllegalEnumeratedValue[V,A<:enumeratum.values.ValueEnumEntry[V]](enum:enumeratum.values.ValueEnum[V,A])(implicitevidence$2:kantan.codecs.strings.StringEncoder[V]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,A,kantan.codecs.strings.codecs.type]]", "kind" : "def"}, {"label" : "arbLegalEnumeratedValue", "tail" : "(enum: ValueEnum[V, A])(arg0: StringEncoder[V]): Arbitrary[LegalString[A]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumeratedValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbLegalEnumeratedValue[V,A<:enumeratum.values.ValueEnumEntry[V]](enum:enumeratum.values.ValueEnum[V,A])(implicitevidence$1:kantan.codecs.strings.StringEncoder[V]):org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]", "kind" : "def"}, {"label" : "arbIllegalEnumerated", "tail" : ": Arbitrary[IllegalString[Enumerated]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbIllegalEnumerated", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbIllegalEnumerated:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[kantan.codecs.enumeratum.laws.discipline.Enumerated]]", "kind" : "implicit val"}, {"label" : "arbLegalEnumerated", "tail" : ": Arbitrary[LegalString[Enumerated]]", "member" : "kantan.codecs.enumeratum.laws.discipline.ArbitraryInstances.arbLegalEnumerated", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbLegalEnumerated:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[kantan.codecs.enumeratum.laws.discipline.Enumerated]]", "kind" : "implicit val"}, {"label" : "cogenStringEnumEntry", "tail" : "(arg0: StringEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenStringEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#cogenStringEnumEntry[EnumType<:enumeratum.values.StringEnumEntry](implicitevidence$6:enumeratum.values.StringEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "cogenShortEnumEntry", "tail" : "(arg0: ShortEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenShortEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#cogenShortEnumEntry[EnumType<:enumeratum.values.ShortEnumEntry](implicitevidence$5:enumeratum.values.ShortEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "cogenLongEnumEntry", "tail" : "(arg0: LongEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenLongEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#cogenLongEnumEntry[EnumType<:enumeratum.values.LongEnumEntry](implicitevidence$4:enumeratum.values.LongEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "cogenIntEnumEntry", "tail" : "(arg0: IntEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenIntEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#cogenIntEnumEntry[EnumType<:enumeratum.values.IntEnumEntry](implicitevidence$3:enumeratum.values.IntEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "cogenCharEnumEntry", "tail" : "(arg0: CharEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenCharEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#cogenCharEnumEntry[EnumType<:enumeratum.values.CharEnumEntry](implicitevidence$2:enumeratum.values.CharEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "cogenByteEnumEntry", "tail" : "(arg0: ByteEnum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.values.CogenInstances.cogenByteEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#cogenByteEnumEntry[EnumType<:enumeratum.values.ByteEnumEntry](implicitevidence$1:enumeratum.values.ByteEnum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "arbStringEnumEntry", "tail" : "(arg0: StringEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbStringEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbStringEnumEntry[EntryType<:enumeratum.values.StringEnumEntry](implicitevidence$6:enumeratum.values.StringEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "arbShortEnumEntry", "tail" : "(arg0: ShortEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbShortEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbShortEnumEntry[EntryType<:enumeratum.values.ShortEnumEntry](implicitevidence$5:enumeratum.values.ShortEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "arbLongEnumEntry", "tail" : "(arg0: LongEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbLongEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbLongEnumEntry[EntryType<:enumeratum.values.LongEnumEntry](implicitevidence$4:enumeratum.values.LongEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "arbIntEnumEntry", "tail" : "(arg0: IntEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbIntEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbIntEnumEntry[EntryType<:enumeratum.values.IntEnumEntry](implicitevidence$3:enumeratum.values.IntEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "arbCharEnumEntry", "tail" : "(arg0: CharEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbCharEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbCharEnumEntry[EntryType<:enumeratum.values.CharEnumEntry](implicitevidence$2:enumeratum.values.CharEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "arbByteEnumEntry", "tail" : "(arg0: ByteEnum[EntryType]): Arbitrary[EntryType]", "member" : "enumeratum.values.ArbitraryInstances.arbByteEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbByteEnumEntry[EntryType<:enumeratum.values.ByteEnumEntry](implicitevidence$1:enumeratum.values.ByteEnum[EntryType]):org.scalacheck.Arbitrary[EntryType]", "kind" : "implicit def"}, {"label" : "cogenEnumEntry", "tail" : "(arg0: Enum[EnumType]): Cogen[EnumType]", "member" : "enumeratum.CogenInstances.cogenEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#cogenEnumEntry[EnumType<:enumeratum.EnumEntry](implicitevidence$1:enumeratum.Enum[EnumType]):org.scalacheck.Cogen[EnumType]", "kind" : "implicit def"}, {"label" : "arbEnumEntry", "tail" : "(enum: Enum[EnumType]): Arbitrary[EnumType]", "member" : "enumeratum.ArbitraryInstances.arbEnumEntry", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#arbEnumEntry[EnumType<:enumeratum.EnumEntry](implicitenum:enumeratum.Enum[EnumType]):org.scalacheck.Arbitrary[EnumType]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.enumeratum.laws.discipline.Enumerated", "object" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html", "members_object" : [{"label" : "Value3", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.Enumerated.Value3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#Value3", "kind" : "object"}, {"label" : "Value2", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.Enumerated.Value2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#Value2", "kind" : "object"}, {"label" : "Value1", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.Enumerated.Value1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#Value1", "kind" : "object"}, {"label" : "values", "tail" : ": IndexedSeq[Enumerated]", "member" : "kantan.codecs.enumeratum.laws.discipline.Enumerated.values", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#values:IndexedSeq[kantan.codecs.enumeratum.laws.discipline.Enumerated]", "kind" : "val"}, {"label" : "findValues", "tail" : "(): IndexedSeq[Enumerated]", "member" : "enumeratum.Enum.findValues", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#findValues:IndexedSeq[A]", "kind" : "macro def"}, {"label" : "indexOf", "tail" : "(member: Enumerated): Int", "member" : "enumeratum.Enum.indexOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#indexOf(member:A):Int", "kind" : "def"}, {"label" : "withNameLowercaseOnlyEither", "tail" : "(name: String): Either[NoSuchMember[Enumerated], Enumerated]", "member" : "enumeratum.Enum.withNameLowercaseOnlyEither", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameLowercaseOnlyEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameUppercaseOnlyEither", "tail" : "(name: String): Either[NoSuchMember[Enumerated], Enumerated]", "member" : "enumeratum.Enum.withNameUppercaseOnlyEither", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameUppercaseOnlyEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameInsensitiveEither", "tail" : "(name: String): Either[NoSuchMember[Enumerated], Enumerated]", "member" : "enumeratum.Enum.withNameInsensitiveEither", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameInsensitiveEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameLowercaseOnlyOption", "tail" : "(name: String): Option[Enumerated]", "member" : "enumeratum.Enum.withNameLowercaseOnlyOption", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameLowercaseOnlyOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withNameUppercaseOnlyOption", "tail" : "(name: String): Option[Enumerated]", "member" : "enumeratum.Enum.withNameUppercaseOnlyOption", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameUppercaseOnlyOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withNameInsensitiveOption", "tail" : "(name: String): Option[Enumerated]", "member" : "enumeratum.Enum.withNameInsensitiveOption", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameInsensitiveOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withNameLowercaseOnly", "tail" : "(name: String): Enumerated", "member" : "enumeratum.Enum.withNameLowercaseOnly", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameLowercaseOnly(name:String):A", "kind" : "def"}, {"label" : "withNameUppercaseOnly", "tail" : "(name: String): Enumerated", "member" : "enumeratum.Enum.withNameUppercaseOnly", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameUppercaseOnly(name:String):A", "kind" : "def"}, {"label" : "withNameInsensitive", "tail" : "(name: String): Enumerated", "member" : "enumeratum.Enum.withNameInsensitive", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameInsensitive(name:String):A", "kind" : "def"}, {"label" : "withNameEither", "tail" : "(name: String): Either[NoSuchMember[Enumerated], Enumerated]", "member" : "enumeratum.Enum.withNameEither", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameOption", "tail" : "(name: String): Option[Enumerated]", "member" : "enumeratum.Enum.withNameOption", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withNameOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withName", "tail" : "(name: String): Enumerated", "member" : "enumeratum.Enum.withName", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#withName(name:String):A", "kind" : "def"}, {"label" : "valuesToIndex", "tail" : ": Map[Enumerated, Int]", "member" : "enumeratum.Enum.valuesToIndex", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#valuesToIndex:scala.collection.immutable.Map[A,Int]", "kind" : "final lazy val"}, {"label" : "upperCaseNameValuesToMap", "tail" : ": Map[String, Enumerated]", "member" : "enumeratum.Enum.upperCaseNameValuesToMap", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#upperCaseNameValuesToMap:scala.collection.immutable.Map[String,A]", "kind" : "final lazy val"}, {"label" : "lowerCaseNamesToValuesMap", "tail" : ": Map[String, Enumerated]", "member" : "enumeratum.Enum.lowerCaseNamesToValuesMap", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#lowerCaseNamesToValuesMap:scala.collection.immutable.Map[String,A]", "kind" : "final lazy val"}, {"label" : "namesToValuesMap", "tail" : ": Map[String, Enumerated]", "member" : "enumeratum.Enum.namesToValuesMap", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#namesToValuesMap:scala.collection.immutable.Map[String,A]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html", "kind" : "trait", "members_trait" : [{"label" : "entryName", "tail" : "(): String", "member" : "enumeratum.EnumEntry.entryName", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#entryName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/Enumerated.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Defines a standard Enum for tests to use."}, {"name" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedByte", "shortDescription" : "Defines a standard ByteEnum for tests to use.", "object" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): Byte", "member" : "enumeratum.values.ValueEnumEntry.value", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html#value:ValueType", "kind" : "abstract def"}], "members_object" : [{"label" : "Value3", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedByte.Value3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#Value3", "kind" : "object"}, {"label" : "Value2", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedByte.Value2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#Value2", "kind" : "object"}, {"label" : "Value1", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedByte.Value1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#Value1", "kind" : "object"}, {"label" : "values", "tail" : ": IndexedSeq[EnumeratedByte]", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedByte.values", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#values:IndexedSeq[kantan.codecs.enumeratum.laws.discipline.EnumeratedByte]", "kind" : "val"}, {"label" : "findValues", "tail" : "(): IndexedSeq[EnumeratedByte]", "member" : "enumeratum.values.ByteEnum.findValues", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#findValues:IndexedSeq[A]", "kind" : "final macro def"}, {"label" : "withValueEither", "tail" : "(i: Byte): Either[NoSuchMember[Byte, ValueEnumEntry[Byte]], EnumeratedByte]", "member" : "enumeratum.values.ValueEnum.withValueEither", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#withValueEither(i:ValueType):Either[enumeratum.values.NoSuchMember[ValueType,enumeratum.values.ValueEnumEntry[ValueType]],EntryType]", "kind" : "def"}, {"label" : "withValueOpt", "tail" : "(i: Byte): Option[EnumeratedByte]", "member" : "enumeratum.values.ValueEnum.withValueOpt", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#withValueOpt(i:ValueType):Option[EntryType]", "kind" : "def"}, {"label" : "withValue", "tail" : "(i: Byte): EnumeratedByte", "member" : "enumeratum.values.ValueEnum.withValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#withValue(i:ValueType):EntryType", "kind" : "def"}, {"label" : "valuesToEntriesMap", "tail" : ": Map[Byte, EnumeratedByte]", "member" : "enumeratum.values.ValueEnum.valuesToEntriesMap", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#valuesToEntriesMap:scala.collection.immutable.Map[ValueType,EntryType]", "kind" : "final lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedByte.html", "kind" : "class"}, {"name" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedChar", "shortDescription" : "Defines a standard CharEnum for tests to use.", "object" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): Char", "member" : "enumeratum.values.ValueEnumEntry.value", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html#value:ValueType", "kind" : "abstract def"}], "members_object" : [{"label" : "Value3", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedChar.Value3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#Value3", "kind" : "object"}, {"label" : "Value2", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedChar.Value2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#Value2", "kind" : "object"}, {"label" : "Value1", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedChar.Value1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#Value1", "kind" : "object"}, {"label" : "values", "tail" : ": IndexedSeq[EnumeratedChar]", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedChar.values", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#values:IndexedSeq[kantan.codecs.enumeratum.laws.discipline.EnumeratedChar]", "kind" : "val"}, {"label" : "findValues", "tail" : "(): IndexedSeq[EnumeratedChar]", "member" : "enumeratum.values.CharEnum.findValues", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#findValues:IndexedSeq[A]", "kind" : "final macro def"}, {"label" : "withValueEither", "tail" : "(i: Char): Either[NoSuchMember[Char, ValueEnumEntry[Char]], EnumeratedChar]", "member" : "enumeratum.values.ValueEnum.withValueEither", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#withValueEither(i:ValueType):Either[enumeratum.values.NoSuchMember[ValueType,enumeratum.values.ValueEnumEntry[ValueType]],EntryType]", "kind" : "def"}, {"label" : "withValueOpt", "tail" : "(i: Char): Option[EnumeratedChar]", "member" : "enumeratum.values.ValueEnum.withValueOpt", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#withValueOpt(i:ValueType):Option[EntryType]", "kind" : "def"}, {"label" : "withValue", "tail" : "(i: Char): EnumeratedChar", "member" : "enumeratum.values.ValueEnum.withValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#withValue(i:ValueType):EntryType", "kind" : "def"}, {"label" : "valuesToEntriesMap", "tail" : ": Map[Char, EnumeratedChar]", "member" : "enumeratum.values.ValueEnum.valuesToEntriesMap", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#valuesToEntriesMap:scala.collection.immutable.Map[ValueType,EntryType]", "kind" : "final lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedChar.html", "kind" : "class"}, {"name" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedInt", "shortDescription" : "Defines a standard IntEnum for tests to use.", "object" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): Int", "member" : "enumeratum.values.ValueEnumEntry.value", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html#value:ValueType", "kind" : "abstract def"}], "members_object" : [{"label" : "Value3", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedInt.Value3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#Value3", "kind" : "object"}, {"label" : "Value2", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedInt.Value2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#Value2", "kind" : "object"}, {"label" : "Value1", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedInt.Value1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#Value1", "kind" : "object"}, {"label" : "values", "tail" : ": IndexedSeq[EnumeratedInt]", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedInt.values", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#values:IndexedSeq[kantan.codecs.enumeratum.laws.discipline.EnumeratedInt]", "kind" : "val"}, {"label" : "findValues", "tail" : "(): IndexedSeq[EnumeratedInt]", "member" : "enumeratum.values.IntEnum.findValues", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#findValues:IndexedSeq[A]", "kind" : "macro def"}, {"label" : "withValueEither", "tail" : "(i: Int): Either[NoSuchMember[Int, ValueEnumEntry[Int]], EnumeratedInt]", "member" : "enumeratum.values.ValueEnum.withValueEither", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#withValueEither(i:ValueType):Either[enumeratum.values.NoSuchMember[ValueType,enumeratum.values.ValueEnumEntry[ValueType]],EntryType]", "kind" : "def"}, {"label" : "withValueOpt", "tail" : "(i: Int): Option[EnumeratedInt]", "member" : "enumeratum.values.ValueEnum.withValueOpt", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#withValueOpt(i:ValueType):Option[EntryType]", "kind" : "def"}, {"label" : "withValue", "tail" : "(i: Int): EnumeratedInt", "member" : "enumeratum.values.ValueEnum.withValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#withValue(i:ValueType):EntryType", "kind" : "def"}, {"label" : "valuesToEntriesMap", "tail" : ": Map[Int, EnumeratedInt]", "member" : "enumeratum.values.ValueEnum.valuesToEntriesMap", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#valuesToEntriesMap:scala.collection.immutable.Map[ValueType,EntryType]", "kind" : "final lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedInt.html", "kind" : "class"}, {"name" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedLong", "shortDescription" : "Defines a standard LongEnum for tests to use.", "object" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): Long", "member" : "enumeratum.values.ValueEnumEntry.value", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html#value:ValueType", "kind" : "abstract def"}], "members_object" : [{"label" : "Value3", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedLong.Value3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#Value3", "kind" : "object"}, {"label" : "Value2", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedLong.Value2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#Value2", "kind" : "object"}, {"label" : "Value1", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedLong.Value1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#Value1", "kind" : "object"}, {"label" : "values", "tail" : ": IndexedSeq[EnumeratedLong]", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedLong.values", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#values:IndexedSeq[kantan.codecs.enumeratum.laws.discipline.EnumeratedLong]", "kind" : "val"}, {"label" : "findValues", "tail" : "(): IndexedSeq[EnumeratedLong]", "member" : "enumeratum.values.LongEnum.findValues", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#findValues:IndexedSeq[A]", "kind" : "final macro def"}, {"label" : "withValueEither", "tail" : "(i: Long): Either[NoSuchMember[Long, ValueEnumEntry[Long]], EnumeratedLong]", "member" : "enumeratum.values.ValueEnum.withValueEither", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#withValueEither(i:ValueType):Either[enumeratum.values.NoSuchMember[ValueType,enumeratum.values.ValueEnumEntry[ValueType]],EntryType]", "kind" : "def"}, {"label" : "withValueOpt", "tail" : "(i: Long): Option[EnumeratedLong]", "member" : "enumeratum.values.ValueEnum.withValueOpt", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#withValueOpt(i:ValueType):Option[EntryType]", "kind" : "def"}, {"label" : "withValue", "tail" : "(i: Long): EnumeratedLong", "member" : "enumeratum.values.ValueEnum.withValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#withValue(i:ValueType):EntryType", "kind" : "def"}, {"label" : "valuesToEntriesMap", "tail" : ": Map[Long, EnumeratedLong]", "member" : "enumeratum.values.ValueEnum.valuesToEntriesMap", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#valuesToEntriesMap:scala.collection.immutable.Map[ValueType,EntryType]", "kind" : "final lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedLong.html", "kind" : "class"}, {"name" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedShort", "shortDescription" : "Defines a standard ShortEnum for tests to use.", "object" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): Short", "member" : "enumeratum.values.ValueEnumEntry.value", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html#value:ValueType", "kind" : "abstract def"}], "members_object" : [{"label" : "Value3", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedShort.Value3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#Value3", "kind" : "object"}, {"label" : "Value2", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedShort.Value2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#Value2", "kind" : "object"}, {"label" : "Value1", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedShort.Value1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#Value1", "kind" : "object"}, {"label" : "values", "tail" : ": IndexedSeq[EnumeratedShort]", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedShort.values", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#values:IndexedSeq[kantan.codecs.enumeratum.laws.discipline.EnumeratedShort]", "kind" : "val"}, {"label" : "findValues", "tail" : "(): IndexedSeq[EnumeratedShort]", "member" : "enumeratum.values.ShortEnum.findValues", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#findValues:IndexedSeq[A]", "kind" : "final macro def"}, {"label" : "withValueEither", "tail" : "(i: Short): Either[NoSuchMember[Short, ValueEnumEntry[Short]], EnumeratedShort]", "member" : "enumeratum.values.ValueEnum.withValueEither", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#withValueEither(i:ValueType):Either[enumeratum.values.NoSuchMember[ValueType,enumeratum.values.ValueEnumEntry[ValueType]],EntryType]", "kind" : "def"}, {"label" : "withValueOpt", "tail" : "(i: Short): Option[EnumeratedShort]", "member" : "enumeratum.values.ValueEnum.withValueOpt", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#withValueOpt(i:ValueType):Option[EntryType]", "kind" : "def"}, {"label" : "withValue", "tail" : "(i: Short): EnumeratedShort", "member" : "enumeratum.values.ValueEnum.withValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#withValue(i:ValueType):EntryType", "kind" : "def"}, {"label" : "valuesToEntriesMap", "tail" : ": Map[Short, EnumeratedShort]", "member" : "enumeratum.values.ValueEnum.valuesToEntriesMap", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#valuesToEntriesMap:scala.collection.immutable.Map[ValueType,EntryType]", "kind" : "final lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedShort.html", "kind" : "class"}, {"name" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedString", "shortDescription" : "Defines a standard StringEnum for tests to use.", "object" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): String", "member" : "enumeratum.values.ValueEnumEntry.value", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html#value:ValueType", "kind" : "abstract def"}], "members_object" : [{"label" : "Value3", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedString.Value3", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#Value3", "kind" : "object"}, {"label" : "Value2", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedString.Value2", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#Value2", "kind" : "object"}, {"label" : "Value1", "tail" : "", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedString.Value1", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#Value1", "kind" : "object"}, {"label" : "values", "tail" : ": IndexedSeq[EnumeratedString]", "member" : "kantan.codecs.enumeratum.laws.discipline.EnumeratedString.values", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#values:IndexedSeq[kantan.codecs.enumeratum.laws.discipline.EnumeratedString]", "kind" : "val"}, {"label" : "findValues", "tail" : "(): IndexedSeq[EnumeratedString]", "member" : "enumeratum.values.StringEnum.findValues", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#findValues:IndexedSeq[A]", "kind" : "final macro def"}, {"label" : "withValueEither", "tail" : "(i: String): Either[NoSuchMember[String, ValueEnumEntry[String]], EnumeratedString]", "member" : "enumeratum.values.ValueEnum.withValueEither", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#withValueEither(i:ValueType):Either[enumeratum.values.NoSuchMember[ValueType,enumeratum.values.ValueEnumEntry[ValueType]],EntryType]", "kind" : "def"}, {"label" : "withValueOpt", "tail" : "(i: String): Option[EnumeratedString]", "member" : "enumeratum.values.ValueEnum.withValueOpt", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#withValueOpt(i:ValueType):Option[EntryType]", "kind" : "def"}, {"label" : "withValue", "tail" : "(i: String): EnumeratedString", "member" : "enumeratum.values.ValueEnum.withValue", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#withValue(i:ValueType):EntryType", "kind" : "def"}, {"label" : "valuesToEntriesMap", "tail" : ": Map[String, EnumeratedString]", "member" : "enumeratum.values.ValueEnum.valuesToEntriesMap", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#valuesToEntriesMap:scala.collection.immutable.Map[ValueType,EntryType]", "kind" : "final lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/enumeratum\/laws\/discipline\/EnumeratedString.html", "kind" : "class"}], "kantan.codecs.strings" : [{"name" : "kantan.codecs.strings.codecs", "shortDescription" : "Defines default instances for StringEncoder and StringDecoder.", "object" : "kantan\/codecs\/strings\/codecs$.html", "members_object" : [{"label" : "uuidStringCodec", "tail" : ": StringCodec[UUID]", "member" : "kantan.codecs.strings.codecs.uuidStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#uuidStringCodec:kantan.codecs.strings.StringCodec[java.util.UUID]", "kind" : "implicit val"}, {"label" : "stringStringCodec", "tail" : ": StringCodec[String]", "member" : "kantan.codecs.strings.codecs.stringStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#stringStringCodec:kantan.codecs.strings.StringCodec[String]", "kind" : "implicit val"}, {"label" : "shortStringCodec", "tail" : ": StringCodec[Short]", "member" : "kantan.codecs.strings.codecs.shortStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#shortStringCodec:kantan.codecs.strings.StringCodec[Short]", "kind" : "implicit val"}, {"label" : "longStringCodec", "tail" : ": StringCodec[Long]", "member" : "kantan.codecs.strings.codecs.longStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#longStringCodec:kantan.codecs.strings.StringCodec[Long]", "kind" : "implicit val"}, {"label" : "intStringCodec", "tail" : ": StringCodec[Int]", "member" : "kantan.codecs.strings.codecs.intStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#intStringCodec:kantan.codecs.strings.StringCodec[Int]", "kind" : "implicit val"}, {"label" : "floatStringCodec", "tail" : ": StringCodec[Float]", "member" : "kantan.codecs.strings.codecs.floatStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#floatStringCodec:kantan.codecs.strings.StringCodec[Float]", "kind" : "implicit val"}, {"label" : "byteStringCodec", "tail" : ": StringCodec[Byte]", "member" : "kantan.codecs.strings.codecs.byteStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#byteStringCodec:kantan.codecs.strings.StringCodec[Byte]", "kind" : "implicit val"}, {"label" : "doubleStringCodec", "tail" : ": StringCodec[Double]", "member" : "kantan.codecs.strings.codecs.doubleStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#doubleStringCodec:kantan.codecs.strings.StringCodec[Double]", "kind" : "implicit val"}, {"label" : "charStringCodec", "tail" : ": StringCodec[Char]", "member" : "kantan.codecs.strings.codecs.charStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#charStringCodec:kantan.codecs.strings.StringCodec[Char]", "kind" : "implicit val"}, {"label" : "booleanStringCodec", "tail" : ": StringCodec[Boolean]", "member" : "kantan.codecs.strings.codecs.booleanStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#booleanStringCodec:kantan.codecs.strings.StringCodec[Boolean]", "kind" : "implicit val"}, {"label" : "bigIntStringCodec", "tail" : ": StringCodec[BigInt]", "member" : "kantan.codecs.strings.codecs.bigIntStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#bigIntStringCodec:kantan.codecs.strings.StringCodec[BigInt]", "kind" : "implicit val"}, {"label" : "bigDecimalStringCodec", "tail" : ": StringCodec[BigDecimal]", "member" : "kantan.codecs.strings.codecs.bigDecimalStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#bigDecimalStringCodec:kantan.codecs.strings.StringCodec[BigDecimal]", "kind" : "implicit val"}, {"label" : "regexStringCodec", "tail" : ": StringCodec[Regex]", "member" : "kantan.codecs.strings.codecs.regexStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#regexStringCodec:kantan.codecs.strings.StringCodec[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "patternStringCodec", "tail" : ": StringCodec[Pattern]", "member" : "kantan.codecs.strings.codecs.patternStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#patternStringCodec:kantan.codecs.strings.StringCodec[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "javaEnumStringCodec", "tail" : "(tag: ClassTag[T]): StringCodec[T]", "member" : "kantan.codecs.strings.codecs.javaEnumStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#javaEnumStringCodec[T<:Enum[T]](implicittag:scala.reflect.ClassTag[T]):kantan.codecs.strings.StringCodec[T]", "kind" : "implicit def"}, {"label" : "pathStringCodec", "tail" : ": StringCodec[Path]", "member" : "kantan.codecs.strings.PlatformSpecificInstances.pathStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#pathStringCodec:kantan.codecs.strings.StringCodec[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "fileStringCodec", "tail" : ": StringCodec[File]", "member" : "kantan.codecs.strings.PlatformSpecificInstances.fileStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#fileStringCodec:kantan.codecs.strings.StringCodec[java.io.File]", "kind" : "implicit val"}, {"label" : "uriStringCodec", "tail" : ": StringCodec[URI]", "member" : "kantan.codecs.strings.PlatformSpecificInstances.uriStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#uriStringCodec:kantan.codecs.strings.StringCodec[java.net.URI]", "kind" : "implicit val"}, {"label" : "urlStringCodec", "tail" : ": StringCodec[URL]", "member" : "kantan.codecs.strings.PlatformSpecificInstances.urlStringCodec", "link" : "kantan\/codecs\/strings\/codecs$.html#urlStringCodec:kantan.codecs.strings.StringCodec[java.net.URL]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/codecs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/codecs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/codecs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/codecs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/codecs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/codecs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/codecs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/codecs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/codecs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/codecs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/codecs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/codecs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/codecs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/codecs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/codecs$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/codecs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/codecs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/codecs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/codecs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.strings.DecodeError", "shortDescription" : "", "object" : "kantan\/codecs\/strings\/DecodeError$.html", "members_object" : [{"label" : "apply", "tail" : "(msg: String): DecodeError", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/codecs\/strings\/DecodeError$.html#apply(msg:String):T", "kind" : "def"}, {"label" : "apply", "tail" : "(cause: Throwable): DecodeError", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/codecs\/strings\/DecodeError$.html#apply(cause:Throwable):T", "kind" : "def"}, {"label" : "apply", "tail" : "(msg: String, cause: Throwable): DecodeError", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/codecs\/strings\/DecodeError$.html#apply(msg:String,cause:Throwable):T", "kind" : "def"}, {"label" : "safe", "tail" : "(a: => A): Either[DecodeError, A]", "member" : "kantan.codecs.error.ErrorCompanion.safe", "link" : "kantan\/codecs\/strings\/DecodeError$.html#safe[A](a:=>A):Either[T,A]", "kind" : "def"}, {"label" : "isError", "tail" : ": IsError[DecodeError]", "member" : "kantan.codecs.error.ErrorCompanion.isError", "link" : "kantan\/codecs\/strings\/DecodeError$.html#isError:kantan.codecs.error.IsError[T]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/DecodeError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/DecodeError$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/DecodeError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/DecodeError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/DecodeError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/DecodeError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/DecodeError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/DecodeError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/DecodeError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/DecodeError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/DecodeError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/DecodeError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/DecodeError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/DecodeError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/DecodeError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/DecodeError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/DecodeError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/DecodeError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/DecodeError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "kantan.codecs.strings.DecodeError#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "kantan.codecs.strings.DecodeError.message", "link" : "kantan\/codecs\/strings\/DecodeError.html#message:String", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/codecs\/strings\/DecodeError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/codecs\/strings\/DecodeError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/codecs\/strings\/DecodeError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/codecs\/strings\/DecodeError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/codecs\/strings\/DecodeError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/codecs\/strings\/DecodeError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/codecs\/strings\/DecodeError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/codecs\/strings\/DecodeError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/codecs\/strings\/DecodeError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/codecs\/strings\/DecodeError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/codecs\/strings\/DecodeError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/codecs\/strings\/DecodeError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/codecs\/strings\/DecodeError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/codecs\/strings\/DecodeError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/DecodeError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/DecodeError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/DecodeError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/DecodeError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/DecodeError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/DecodeError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/DecodeError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/DecodeError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/DecodeError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/DecodeError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/DecodeError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/DecodeError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/DecodeError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/DecodeError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/DecodeError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/DecodeError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/codecs\/strings\/DecodeError.html", "kind" : "case class"}, {"name" : "kantan.codecs.strings.PlatformSpecificCodecs", "trait" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html", "kind" : "trait", "members_trait" : [{"label" : "dateCodec", "tail" : "(format: DateFormat): StringCodec[Date]", "member" : "kantan.codecs.strings.PlatformSpecificCodecs.dateCodec", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#dateCodec(format:java.text.DateFormat):kantan.codecs.strings.StringCodec[java.util.Date]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/PlatformSpecificCodecs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "JVM-specific codecs."}, {"name" : "kantan.codecs.strings.PlatformSpecificDecoders", "trait" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html", "kind" : "trait", "members_trait" : [{"label" : "dateDecoder", "tail" : "(format: DateFormat): StringDecoder[Date]", "member" : "kantan.codecs.strings.PlatformSpecificDecoders.dateDecoder", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#dateDecoder(format:java.text.DateFormat):kantan.codecs.strings.StringDecoder[java.util.Date]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/PlatformSpecificDecoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "JVM-specific decoders."}, {"name" : "kantan.codecs.strings.PlatformSpecificEncoders", "trait" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html", "kind" : "trait", "members_trait" : [{"label" : "dateEncoder", "tail" : "(format: DateFormat): StringEncoder[Date]", "member" : "kantan.codecs.strings.PlatformSpecificEncoders.dateEncoder", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#dateEncoder(format:java.text.DateFormat):kantan.codecs.strings.StringEncoder[java.util.Date]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/PlatformSpecificEncoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "JVM-specific encoders."}, {"name" : "kantan.codecs.strings.PlatformSpecificInstances", "trait" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html", "kind" : "trait", "members_trait" : [{"label" : "pathStringCodec", "tail" : ": StringCodec[Path]", "member" : "kantan.codecs.strings.PlatformSpecificInstances.pathStringCodec", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#pathStringCodec:kantan.codecs.strings.StringCodec[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "fileStringCodec", "tail" : ": StringCodec[File]", "member" : "kantan.codecs.strings.PlatformSpecificInstances.fileStringCodec", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#fileStringCodec:kantan.codecs.strings.StringCodec[java.io.File]", "kind" : "implicit val"}, {"label" : "uriStringCodec", "tail" : ": StringCodec[URI]", "member" : "kantan.codecs.strings.PlatformSpecificInstances.uriStringCodec", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#uriStringCodec:kantan.codecs.strings.StringCodec[java.net.URI]", "kind" : "implicit val"}, {"label" : "urlStringCodec", "tail" : ": StringCodec[URL]", "member" : "kantan.codecs.strings.PlatformSpecificInstances.urlStringCodec", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#urlStringCodec:kantan.codecs.strings.StringCodec[java.net.URL]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/PlatformSpecificInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "JVM-specific codec instances."}, {"name" : "kantan.codecs.strings.StringCodec", "shortDescription" : "Provides instance creation methods.", "object" : "kantan\/codecs\/strings\/StringCodec$.html", "members_object" : [{"label" : "dateCodec", "tail" : "(format: DateFormat): StringCodec[Date]", "member" : "kantan.codecs.strings.PlatformSpecificCodecs.dateCodec", "link" : "kantan\/codecs\/strings\/StringCodec$.html#dateCodec(format:java.text.DateFormat):kantan.codecs.strings.StringCodec[java.util.Date]", "kind" : "def"}, {"label" : "from", "tail" : "(d: Decoder[String, D, DecodeError, codecs.type], e: Encoder[String, D, codecs.type]): Codec[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/codecs\/strings\/StringCodec$.html#from[D](d:kantan.codecs.Decoder[E,D,F,T],e:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (String) => Either[DecodeError, D])(g: (D) => String): Codec[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/codecs\/strings\/StringCodec$.html#from[D](f:E=>Either[F,D])(g:D=>E):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/StringCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/StringCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/StringCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/StringCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/StringCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/StringCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/StringCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/StringCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/StringCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/StringCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/StringCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/StringCodec$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/StringCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/StringCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/StringCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/StringCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.strings.StringDecoder", "shortDescription" : "Provides instance creation and summing methods for StringDecoder.", "object" : "kantan\/codecs\/strings\/StringDecoder$.html", "members_object" : [{"label" : "makeSafe", "tail" : "(typeName: String)(f: (String) => D): (String) => StringResult[D]", "member" : "kantan.codecs.strings.StringDecoder.makeSafe", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#makeSafe[D](typeName:String)(f:String=>D):String=>kantan.codecs.strings.StringResult[D]", "kind" : "def"}, {"label" : "dateDecoder", "tail" : "(format: DateFormat): StringDecoder[Date]", "member" : "kantan.codecs.strings.PlatformSpecificDecoders.dateDecoder", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#dateDecoder(format:java.text.DateFormat):kantan.codecs.strings.StringDecoder[java.util.Date]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(ds: Decoder[String, D, DecodeError, codecs.type]*)(i: IsError[DecodeError]): Decoder[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.oneOf", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#oneOf[D](ds:kantan.codecs.Decoder[E,D,F,T]*)(impliciti:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromPartial", "tail" : "(f: PartialFunction[String, Either[DecodeError, D]])(t: IsError[DecodeError]): Decoder[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromPartial", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#fromPartial[D](f:PartialFunction[E,Either[F,D]])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromUnsafe", "tail" : "(f: (String) => D)(t: IsError[DecodeError]): Decoder[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromUnsafe", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#fromUnsafe[D](f:E=>D)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (String) => Either[DecodeError, D]): Decoder[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.from", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#from[D](f:E=>Either[F,D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Decoder[String, D, DecodeError, codecs.type]): Decoder[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.apply", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#apply[D](implicitev:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/StringDecoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/StringDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.strings.StringEncoder", "shortDescription" : "", "object" : "kantan\/codecs\/strings\/StringEncoder$.html", "members_object" : [{"label" : "dateEncoder", "tail" : "(format: DateFormat): StringEncoder[Date]", "member" : "kantan.codecs.strings.PlatformSpecificEncoders.dateEncoder", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#dateEncoder(format:java.text.DateFormat):kantan.codecs.strings.StringEncoder[java.util.Date]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (D) => String): Encoder[String, D, codecs.type]", "member" : "kantan.codecs.EncoderCompanion.from", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#from[D](f:D=>E):kantan.codecs.Encoder[E,D,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Encoder[String, D, codecs.type]): Encoder[String, D, codecs.type]", "member" : "kantan.codecs.EncoderCompanion.apply", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#apply[D](implicitev:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/StringEncoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/StringEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.strings.StringResult", "shortDescription" : "", "object" : "kantan\/codecs\/strings\/StringResult$.html", "members_object" : [{"label" : "fromThrowable", "tail" : "(t: Throwable): DecodeError", "member" : "kantan.codecs.ResultCompanion.WithError.fromThrowable", "link" : "kantan\/codecs\/strings\/StringResult$.html#fromThrowable(t:Throwable):F", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/codecs\/strings\/StringResult$.html#fromTry[S](t:scala.util.Try[S]):Either[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: => S): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/codecs\/strings\/StringResult$.html#apply[S](s:=>S):Either[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: DecodeError): Either[DecodeError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/codecs\/strings\/StringResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/codecs\/strings\/StringResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[DecodeError, S]])(bf: BuildFrom[M[Either[DecodeError, S]], S, M[S]]): Either[DecodeError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/codecs\/strings\/StringResult$.html#sequence[S,M[X]<:IterableOnce[X]](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/StringResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/StringResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/StringResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/StringResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/StringResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/StringResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/StringResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/StringResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/StringResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/StringResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/StringResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/StringResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/StringResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/StringResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/StringResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/StringResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/StringResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "kantan.codecs.strings.java8" : [{"name" : "kantan.codecs.strings.java8.Format", "object" : "kantan\/codecs\/strings\/java8\/Format$.html", "members_object" : [{"label" : "defaultLocalTimeFormat", "tail" : ": Format", "member" : "kantan.codecs.strings.java8.Format.defaultLocalTimeFormat", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#defaultLocalTimeFormat:kantan.codecs.strings.java8.Format", "kind" : "val"}, {"label" : "defaultLocalDateFormat", "tail" : ": Format", "member" : "kantan.codecs.strings.java8.Format.defaultLocalDateFormat", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#defaultLocalDateFormat:kantan.codecs.strings.java8.Format", "kind" : "val"}, {"label" : "defaultOffsetDateTimeFormat", "tail" : ": Format", "member" : "kantan.codecs.strings.java8.Format.defaultOffsetDateTimeFormat", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#defaultOffsetDateTimeFormat:kantan.codecs.strings.java8.Format", "kind" : "val"}, {"label" : "defaultZonedDateTimeFormat", "tail" : ": Format", "member" : "kantan.codecs.strings.java8.Format.defaultZonedDateTimeFormat", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#defaultZonedDateTimeFormat:kantan.codecs.strings.java8.Format", "kind" : "val"}, {"label" : "defaultLocalDateTimeFormat", "tail" : ": Format", "member" : "kantan.codecs.strings.java8.Format.defaultLocalDateTimeFormat", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#defaultLocalDateTimeFormat:kantan.codecs.strings.java8.Format", "kind" : "val"}, {"label" : "defaultInstantFormat", "tail" : ": Format", "member" : "kantan.codecs.strings.java8.Format.defaultInstantFormat", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#defaultInstantFormat:kantan.codecs.strings.java8.Format", "kind" : "val"}, {"label" : "from", "tail" : "(pattern: String): Either[String, Format]", "member" : "kantan.codecs.strings.java8.Format.from", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#from(pattern:String):Either[String,kantan.codecs.strings.java8.Format]", "kind" : "def"}, {"label" : "apply", "tail" : "(fmt: => DateTimeFormatter): Format", "member" : "kantan.codecs.strings.java8.Format.apply", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#apply(fmt:=>java.time.format.DateTimeFormatter):kantan.codecs.strings.java8.Format", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/java8\/Format$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/Format$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/strings\/java8\/Format.html", "kind" : "trait", "members_trait" : [{"label" : "format", "tail" : "(temporal: TemporalAccessor): String", "member" : "kantan.codecs.strings.java8.Format.format", "link" : "kantan\/codecs\/strings\/java8\/Format.html#format(temporal:java.time.temporal.TemporalAccessor):String", "kind" : "def"}, {"label" : "parseOffsetDateTime", "tail" : "(str: String): StringResult[OffsetDateTime]", "member" : "kantan.codecs.strings.java8.Format.parseOffsetDateTime", "link" : "kantan\/codecs\/strings\/java8\/Format.html#parseOffsetDateTime(str:String):kantan.codecs.strings.StringResult[java.time.OffsetDateTime]", "kind" : "def"}, {"label" : "parseLocalDate", "tail" : "(str: String): StringResult[LocalDate]", "member" : "kantan.codecs.strings.java8.Format.parseLocalDate", "link" : "kantan\/codecs\/strings\/java8\/Format.html#parseLocalDate(str:String):kantan.codecs.strings.StringResult[java.time.LocalDate]", "kind" : "def"}, {"label" : "parseLocalTime", "tail" : "(str: String): StringResult[LocalTime]", "member" : "kantan.codecs.strings.java8.Format.parseLocalTime", "link" : "kantan\/codecs\/strings\/java8\/Format.html#parseLocalTime(str:String):kantan.codecs.strings.StringResult[java.time.LocalTime]", "kind" : "def"}, {"label" : "parseZonedDateTime", "tail" : "(str: String): StringResult[ZonedDateTime]", "member" : "kantan.codecs.strings.java8.Format.parseZonedDateTime", "link" : "kantan\/codecs\/strings\/java8\/Format.html#parseZonedDateTime(str:String):kantan.codecs.strings.StringResult[java.time.ZonedDateTime]", "kind" : "def"}, {"label" : "parseLocalDateTime", "tail" : "(str: String): StringResult[LocalDateTime]", "member" : "kantan.codecs.strings.java8.Format.parseLocalDateTime", "link" : "kantan\/codecs\/strings\/java8\/Format.html#parseLocalDateTime(str:String):kantan.codecs.strings.StringResult[java.time.LocalDateTime]", "kind" : "def"}, {"label" : "parseInstant", "tail" : "(str: String): StringResult[Instant]", "member" : "kantan.codecs.strings.java8.Format.parseInstant", "link" : "kantan\/codecs\/strings\/java8\/Format.html#parseInstant(str:String):kantan.codecs.strings.StringResult[java.time.Instant]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/java8\/Format.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/java8\/Format.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/java8\/Format.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/java8\/Format.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/java8\/Format.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/java8\/Format.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/java8\/Format.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/Format.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/Format.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/Format.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/java8\/Format.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/java8\/Format.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/java8\/Format.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/java8\/Format.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/java8\/Format.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/java8\/Format.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/java8\/Format.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/Format.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/Format.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "formatter", "tail" : "(): DateTimeFormatter", "member" : "kantan.codecs.strings.java8.Format.formatter", "link" : "kantan\/codecs\/strings\/java8\/Format.html#formatter:java.time.format.DateTimeFormatter", "kind" : "abstract def"}], "shortDescription" : "Serializable wrapper around DateTimeFormatter."}, {"name" : "kantan.codecs.strings.java8.FormatLiteral", "shortDescription" : "", "object" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html", "members_class" : [{"label" : "fmt", "tail" : "(args: Any*): Format", "member" : "kantan.codecs.strings.java8.FormatLiteral.fmt", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral.html#fmt(args:Any*):kantan.codecs.strings.java8.Format", "kind" : "macro def"}, {"member" : "kantan.codecs.strings.java8.FormatLiteral#<init>", "error" : "unsupported entity"}, {"label" : "sc", "tail" : ": StringContext", "member" : "kantan.codecs.strings.java8.FormatLiteral.sc", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral.html#sc:StringContext", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fmtImpl", "tail" : "(c: Context)(args: scala.reflect.macros.blackbox.Context.Expr[Any]*): scala.reflect.macros.blackbox.Context.Expr[Format]", "member" : "kantan.codecs.strings.java8.FormatLiteral.fmtImpl", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#fmtImpl(c:scala.reflect.macros.blackbox.Context)(args:c.Expr[Any]*):c.Expr[kantan.codecs.strings.java8.Format]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteral$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/strings\/java8\/FormatLiteral.html", "kind" : "class"}, {"name" : "kantan.codecs.strings.java8.FormatLiteralMacro", "trait" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "fmtImpl", "tail" : "(c: Context)(args: scala.reflect.macros.blackbox.Context.Expr[Any]*): scala.reflect.macros.blackbox.Context.Expr[Format]", "member" : "kantan.codecs.strings.java8.FormatLiteralMacro.fmtImpl", "link" : "kantan\/codecs\/strings\/java8\/FormatLiteralMacro.html#fmtImpl(c:scala.reflect.macros.blackbox.Context)(args:c.Expr[Any]*):c.Expr[kantan.codecs.strings.java8.Format]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.strings.java8.TimeCodecCompanion", "trait" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html", "kind" : "trait", "members_trait" : [{"label" : "offsetDateTimeCodec", "tail" : "(format: Format): Codec[E, OffsetDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.offsetDateTimeCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#offsetDateTimeCodec(format:kantan.codecs.strings.java8.Format):kantan.codecs.Codec[E,java.time.OffsetDateTime,F,T]", "kind" : "def"}, {"label" : "offsetDateTimeCodec", "tail" : "(format: => DateTimeFormatter): Codec[E, OffsetDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.offsetDateTimeCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#offsetDateTimeCodec(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Codec[E,java.time.OffsetDateTime,F,T]", "kind" : "def"}, {"label" : "zonedDateTimeCodec", "tail" : "(format: Format): Codec[E, ZonedDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.zonedDateTimeCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#zonedDateTimeCodec(format:kantan.codecs.strings.java8.Format):kantan.codecs.Codec[E,java.time.ZonedDateTime,F,T]", "kind" : "def"}, {"label" : "zonedDateTimeCodec", "tail" : "(format: => DateTimeFormatter): Codec[E, ZonedDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.zonedDateTimeCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#zonedDateTimeCodec(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Codec[E,java.time.ZonedDateTime,F,T]", "kind" : "def"}, {"label" : "instantCodec", "tail" : "(format: Format): Codec[E, Instant, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.instantCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#instantCodec(format:kantan.codecs.strings.java8.Format):kantan.codecs.Codec[E,java.time.Instant,F,T]", "kind" : "def"}, {"label" : "instantCodec", "tail" : "(format: => DateTimeFormatter): Codec[E, Instant, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.instantCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#instantCodec(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Codec[E,java.time.Instant,F,T]", "kind" : "def"}, {"label" : "localDateCodec", "tail" : "(format: Format): Codec[E, LocalDate, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.localDateCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateCodec(format:kantan.codecs.strings.java8.Format):kantan.codecs.Codec[E,java.time.LocalDate,F,T]", "kind" : "def"}, {"label" : "localDateCodec", "tail" : "(format: => DateTimeFormatter): Codec[E, LocalDate, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.localDateCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateCodec(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Codec[E,java.time.LocalDate,F,T]", "kind" : "def"}, {"label" : "localDateTimeCodec", "tail" : "(format: Format): Codec[E, LocalDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.localDateTimeCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateTimeCodec(format:kantan.codecs.strings.java8.Format):kantan.codecs.Codec[E,java.time.LocalDateTime,F,T]", "kind" : "def"}, {"label" : "localDateTimeCodec", "tail" : "(format: => DateTimeFormatter): Codec[E, LocalDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.localDateTimeCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateTimeCodec(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Codec[E,java.time.LocalDateTime,F,T]", "kind" : "def"}, {"label" : "localTimeCodec", "tail" : "(format: Format): Codec[E, LocalTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.localTimeCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localTimeCodec(format:kantan.codecs.strings.java8.Format):kantan.codecs.Codec[E,java.time.LocalTime,F,T]", "kind" : "def"}, {"label" : "localTimeCodec", "tail" : "(format: => DateTimeFormatter): Codec[E, LocalTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeCodecCompanion.localTimeCodec", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localTimeCodec(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Codec[E,java.time.LocalTime,F,T]", "kind" : "def"}, {"label" : "defaultInstantEncoder", "tail" : "(): Encoder[E, Instant, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultInstantEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultInstantEncoder:kantan.codecs.Encoder[E,java.time.Instant,T]", "kind" : "def"}, {"label" : "instantEncoder", "tail" : "(format: Format): Encoder[E, Instant, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.instantEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#instantEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.Instant,T]", "kind" : "def"}, {"label" : "instantEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, Instant, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.instantEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#instantEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.Instant,T]", "kind" : "def"}, {"label" : "defaultZonedDateTimeEncoder", "tail" : "(): Encoder[E, ZonedDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultZonedDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultZonedDateTimeEncoder:kantan.codecs.Encoder[E,java.time.ZonedDateTime,T]", "kind" : "def"}, {"label" : "zonedDateTimeEncoder", "tail" : "(format: Format): Encoder[E, ZonedDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.zonedDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#zonedDateTimeEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.ZonedDateTime,T]", "kind" : "def"}, {"label" : "zonedDateTimeEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, ZonedDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.zonedDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#zonedDateTimeEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.ZonedDateTime,T]", "kind" : "def"}, {"label" : "defaultOffsetDateTimeEncoder", "tail" : "(): Encoder[E, OffsetDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultOffsetDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultOffsetDateTimeEncoder:kantan.codecs.Encoder[E,java.time.OffsetDateTime,T]", "kind" : "def"}, {"label" : "offsetDateTimeEncoder", "tail" : "(format: Format): Encoder[E, OffsetDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.offsetDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#offsetDateTimeEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.OffsetDateTime,T]", "kind" : "def"}, {"label" : "offsetDateTimeEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, OffsetDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.offsetDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#offsetDateTimeEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.OffsetDateTime,T]", "kind" : "def"}, {"label" : "defaultLocalDateTimeEncoder", "tail" : "(): Encoder[E, LocalDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultLocalDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultLocalDateTimeEncoder:kantan.codecs.Encoder[E,java.time.LocalDateTime,T]", "kind" : "def"}, {"label" : "localDateTimeEncoder", "tail" : "(format: Format): Encoder[E, LocalDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateTimeEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.LocalDateTime,T]", "kind" : "def"}, {"label" : "localDateTimeEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, LocalDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateTimeEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.LocalDateTime,T]", "kind" : "def"}, {"label" : "defaultLocalDateEncoder", "tail" : "(): Encoder[E, LocalDate, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultLocalDateEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultLocalDateEncoder:kantan.codecs.Encoder[E,java.time.LocalDate,T]", "kind" : "def"}, {"label" : "localDateEncoder", "tail" : "(format: Format): Encoder[E, LocalDate, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localDateEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.LocalDate,T]", "kind" : "def"}, {"label" : "localDateEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, LocalDate, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localDateEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.LocalDate,T]", "kind" : "def"}, {"label" : "defaultLocalTimeEncoder", "tail" : "(): Encoder[E, LocalTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultLocalTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultLocalTimeEncoder:kantan.codecs.Encoder[E,java.time.LocalTime,T]", "kind" : "def"}, {"label" : "localTimeEncoder", "tail" : "(format: Format): Encoder[E, LocalTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localTimeEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.LocalTime,T]", "kind" : "def"}, {"label" : "localTimeEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, LocalTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localTimeEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.LocalTime,T]", "kind" : "def"}, {"label" : "defaultInstantDecoder", "tail" : "(): Decoder[E, Instant, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultInstantDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultInstantDecoder:kantan.codecs.Decoder[E,java.time.Instant,F,T]", "kind" : "def"}, {"label" : "instantDecoder", "tail" : "(format: Format): Decoder[E, Instant, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.instantDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#instantDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.Instant,F,T]", "kind" : "def"}, {"label" : "instantDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, Instant, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.instantDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#instantDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.Instant,F,T]", "kind" : "def"}, {"label" : "defaultZonedDateTimeDecoder", "tail" : "(): Decoder[E, ZonedDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultZonedDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultZonedDateTimeDecoder:kantan.codecs.Decoder[E,java.time.ZonedDateTime,F,T]", "kind" : "def"}, {"label" : "zonedDateTimeDecoder", "tail" : "(format: Format): Decoder[E, ZonedDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.zonedDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#zonedDateTimeDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.ZonedDateTime,F,T]", "kind" : "def"}, {"label" : "zonedDateTimeDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, ZonedDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.zonedDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#zonedDateTimeDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.ZonedDateTime,F,T]", "kind" : "def"}, {"label" : "defaultOffsetDateTimeDecoder", "tail" : "(): Decoder[E, OffsetDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultOffsetDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultOffsetDateTimeDecoder:kantan.codecs.Decoder[E,java.time.OffsetDateTime,F,T]", "kind" : "def"}, {"label" : "offsetDateTimeDecoder", "tail" : "(format: Format): Decoder[E, OffsetDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.offsetDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#offsetDateTimeDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.OffsetDateTime,F,T]", "kind" : "def"}, {"label" : "offsetDateTimeDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, OffsetDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.offsetDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#offsetDateTimeDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.OffsetDateTime,F,T]", "kind" : "def"}, {"label" : "defaultLocalDateTimeDecoder", "tail" : "(): Decoder[E, LocalDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultLocalDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultLocalDateTimeDecoder:kantan.codecs.Decoder[E,java.time.LocalDateTime,F,T]", "kind" : "def"}, {"label" : "localDateTimeDecoder", "tail" : "(format: Format): Decoder[E, LocalDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateTimeDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.LocalDateTime,F,T]", "kind" : "def"}, {"label" : "localDateTimeDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, LocalDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateTimeDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.LocalDateTime,F,T]", "kind" : "def"}, {"label" : "defaultLocalDateDecoder", "tail" : "(): Decoder[E, LocalDate, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultLocalDateDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultLocalDateDecoder:kantan.codecs.Decoder[E,java.time.LocalDate,F,T]", "kind" : "def"}, {"label" : "localDateDecoder", "tail" : "(format: Format): Decoder[E, LocalDate, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localDateDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.LocalDate,F,T]", "kind" : "def"}, {"label" : "localDateDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, LocalDate, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localDateDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localDateDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.LocalDate,F,T]", "kind" : "def"}, {"label" : "defaultLocalTimeDecoder", "tail" : "(): Decoder[E, LocalTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultLocalTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#defaultLocalTimeDecoder:kantan.codecs.Decoder[E,java.time.LocalTime,F,T]", "kind" : "def"}, {"label" : "localTimeDecoder", "tail" : "(format: Format): Decoder[E, LocalTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localTimeDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.LocalTime,F,T]", "kind" : "def"}, {"label" : "localTimeDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, LocalTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#localTimeDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.LocalTime,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encoderFrom", "tail" : "(d: StringEncoder[D]): Encoder[E, D, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.encoderFrom", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#encoderFrom[D](d:kantan.codecs.strings.StringEncoder[D]):kantan.codecs.Encoder[E,D,T]", "kind" : "abstract def"}, {"label" : "decoderFrom", "tail" : "(d: StringDecoder[D]): Decoder[E, D, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.decoderFrom", "link" : "kantan\/codecs\/strings\/java8\/TimeCodecCompanion.html#decoderFrom[D](d:kantan.codecs.strings.StringDecoder[D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "abstract def"}], "shortDescription" : "Provides useful methods for a java8 time codec companions."}, {"name" : "kantan.codecs.strings.java8.TimeDecoderCompanion", "trait" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html", "kind" : "trait", "members_trait" : [{"label" : "defaultInstantDecoder", "tail" : "(): Decoder[E, Instant, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultInstantDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#defaultInstantDecoder:kantan.codecs.Decoder[E,java.time.Instant,F,T]", "kind" : "def"}, {"label" : "instantDecoder", "tail" : "(format: Format): Decoder[E, Instant, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.instantDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#instantDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.Instant,F,T]", "kind" : "def"}, {"label" : "instantDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, Instant, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.instantDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#instantDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.Instant,F,T]", "kind" : "def"}, {"label" : "defaultZonedDateTimeDecoder", "tail" : "(): Decoder[E, ZonedDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultZonedDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#defaultZonedDateTimeDecoder:kantan.codecs.Decoder[E,java.time.ZonedDateTime,F,T]", "kind" : "def"}, {"label" : "zonedDateTimeDecoder", "tail" : "(format: Format): Decoder[E, ZonedDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.zonedDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#zonedDateTimeDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.ZonedDateTime,F,T]", "kind" : "def"}, {"label" : "zonedDateTimeDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, ZonedDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.zonedDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#zonedDateTimeDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.ZonedDateTime,F,T]", "kind" : "def"}, {"label" : "defaultOffsetDateTimeDecoder", "tail" : "(): Decoder[E, OffsetDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultOffsetDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#defaultOffsetDateTimeDecoder:kantan.codecs.Decoder[E,java.time.OffsetDateTime,F,T]", "kind" : "def"}, {"label" : "offsetDateTimeDecoder", "tail" : "(format: Format): Decoder[E, OffsetDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.offsetDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#offsetDateTimeDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.OffsetDateTime,F,T]", "kind" : "def"}, {"label" : "offsetDateTimeDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, OffsetDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.offsetDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#offsetDateTimeDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.OffsetDateTime,F,T]", "kind" : "def"}, {"label" : "defaultLocalDateTimeDecoder", "tail" : "(): Decoder[E, LocalDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultLocalDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#defaultLocalDateTimeDecoder:kantan.codecs.Decoder[E,java.time.LocalDateTime,F,T]", "kind" : "def"}, {"label" : "localDateTimeDecoder", "tail" : "(format: Format): Decoder[E, LocalDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#localDateTimeDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.LocalDateTime,F,T]", "kind" : "def"}, {"label" : "localDateTimeDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, LocalDateTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localDateTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#localDateTimeDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.LocalDateTime,F,T]", "kind" : "def"}, {"label" : "defaultLocalDateDecoder", "tail" : "(): Decoder[E, LocalDate, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultLocalDateDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#defaultLocalDateDecoder:kantan.codecs.Decoder[E,java.time.LocalDate,F,T]", "kind" : "def"}, {"label" : "localDateDecoder", "tail" : "(format: Format): Decoder[E, LocalDate, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localDateDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#localDateDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.LocalDate,F,T]", "kind" : "def"}, {"label" : "localDateDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, LocalDate, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localDateDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#localDateDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.LocalDate,F,T]", "kind" : "def"}, {"label" : "defaultLocalTimeDecoder", "tail" : "(): Decoder[E, LocalTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.defaultLocalTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#defaultLocalTimeDecoder:kantan.codecs.Decoder[E,java.time.LocalTime,F,T]", "kind" : "def"}, {"label" : "localTimeDecoder", "tail" : "(format: Format): Decoder[E, LocalTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#localTimeDecoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Decoder[E,java.time.LocalTime,F,T]", "kind" : "def"}, {"label" : "localTimeDecoder", "tail" : "(format: => DateTimeFormatter): Decoder[E, LocalTime, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.localTimeDecoder", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#localTimeDecoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Decoder[E,java.time.LocalTime,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decoderFrom", "tail" : "(d: StringDecoder[D]): Decoder[E, D, F, T]", "member" : "kantan.codecs.strings.java8.TimeDecoderCompanion.decoderFrom", "link" : "kantan\/codecs\/strings\/java8\/TimeDecoderCompanion.html#decoderFrom[D](d:kantan.codecs.strings.StringDecoder[D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "abstract def"}], "shortDescription" : "Provides useful methods for a java8 time decoder companions."}, {"name" : "kantan.codecs.strings.java8.TimeEncoderCompanion", "trait" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html", "kind" : "trait", "members_trait" : [{"label" : "defaultInstantEncoder", "tail" : "(): Encoder[E, Instant, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultInstantEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#defaultInstantEncoder:kantan.codecs.Encoder[E,java.time.Instant,T]", "kind" : "def"}, {"label" : "instantEncoder", "tail" : "(format: Format): Encoder[E, Instant, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.instantEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#instantEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.Instant,T]", "kind" : "def"}, {"label" : "instantEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, Instant, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.instantEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#instantEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.Instant,T]", "kind" : "def"}, {"label" : "defaultZonedDateTimeEncoder", "tail" : "(): Encoder[E, ZonedDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultZonedDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#defaultZonedDateTimeEncoder:kantan.codecs.Encoder[E,java.time.ZonedDateTime,T]", "kind" : "def"}, {"label" : "zonedDateTimeEncoder", "tail" : "(format: Format): Encoder[E, ZonedDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.zonedDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#zonedDateTimeEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.ZonedDateTime,T]", "kind" : "def"}, {"label" : "zonedDateTimeEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, ZonedDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.zonedDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#zonedDateTimeEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.ZonedDateTime,T]", "kind" : "def"}, {"label" : "defaultOffsetDateTimeEncoder", "tail" : "(): Encoder[E, OffsetDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultOffsetDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#defaultOffsetDateTimeEncoder:kantan.codecs.Encoder[E,java.time.OffsetDateTime,T]", "kind" : "def"}, {"label" : "offsetDateTimeEncoder", "tail" : "(format: Format): Encoder[E, OffsetDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.offsetDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#offsetDateTimeEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.OffsetDateTime,T]", "kind" : "def"}, {"label" : "offsetDateTimeEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, OffsetDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.offsetDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#offsetDateTimeEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.OffsetDateTime,T]", "kind" : "def"}, {"label" : "defaultLocalDateTimeEncoder", "tail" : "(): Encoder[E, LocalDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultLocalDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#defaultLocalDateTimeEncoder:kantan.codecs.Encoder[E,java.time.LocalDateTime,T]", "kind" : "def"}, {"label" : "localDateTimeEncoder", "tail" : "(format: Format): Encoder[E, LocalDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#localDateTimeEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.LocalDateTime,T]", "kind" : "def"}, {"label" : "localDateTimeEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, LocalDateTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localDateTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#localDateTimeEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.LocalDateTime,T]", "kind" : "def"}, {"label" : "defaultLocalDateEncoder", "tail" : "(): Encoder[E, LocalDate, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultLocalDateEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#defaultLocalDateEncoder:kantan.codecs.Encoder[E,java.time.LocalDate,T]", "kind" : "def"}, {"label" : "localDateEncoder", "tail" : "(format: Format): Encoder[E, LocalDate, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localDateEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#localDateEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.LocalDate,T]", "kind" : "def"}, {"label" : "localDateEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, LocalDate, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localDateEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#localDateEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.LocalDate,T]", "kind" : "def"}, {"label" : "defaultLocalTimeEncoder", "tail" : "(): Encoder[E, LocalTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.defaultLocalTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#defaultLocalTimeEncoder:kantan.codecs.Encoder[E,java.time.LocalTime,T]", "kind" : "def"}, {"label" : "localTimeEncoder", "tail" : "(format: Format): Encoder[E, LocalTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#localTimeEncoder(format:kantan.codecs.strings.java8.Format):kantan.codecs.Encoder[E,java.time.LocalTime,T]", "kind" : "def"}, {"label" : "localTimeEncoder", "tail" : "(format: => DateTimeFormatter): Encoder[E, LocalTime, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.localTimeEncoder", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#localTimeEncoder(format:=>java.time.format.DateTimeFormatter):kantan.codecs.Encoder[E,java.time.LocalTime,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encoderFrom", "tail" : "(d: StringEncoder[D]): Encoder[E, D, T]", "member" : "kantan.codecs.strings.java8.TimeEncoderCompanion.encoderFrom", "link" : "kantan\/codecs\/strings\/java8\/TimeEncoderCompanion.html#encoderFrom[D](d:kantan.codecs.strings.StringEncoder[D]):kantan.codecs.Encoder[E,D,T]", "kind" : "abstract def"}], "shortDescription" : "Provides useful methods for a java8 time encoder companions."}, {"name" : "kantan.codecs.strings.java8.ToFormatLiteral", "trait" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html", "kind" : "trait", "members_trait" : [{"label" : "toFormatLiteral", "tail" : "(sc: StringContext): FormatLiteral", "member" : "kantan.codecs.strings.java8.ToFormatLiteral.toFormatLiteral", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#toFormatLiteral(sc:StringContext):kantan.codecs.strings.java8.FormatLiteral", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/ToFormatLiteral.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.codecs.enumeratum.values" : [{"name" : "kantan.codecs.enumeratum.values.DecoderInstances", "trait" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "charEnumeratumDecoder", "tail" : "(arg0: CharEnum[D], arg1: IsError[F], decoder: Decoder[E, Char, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.enumeratum.values.DecoderInstances.charEnumeratumDecoder", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#charEnumeratumDecoder[E,D<:enumeratum.values.CharEnumEntry,F,T](implicitevidence$11:enumeratum.values.CharEnum[D],implicitevidence$12:kantan.codecs.error.IsError[F],implicitdecoder:kantan.codecs.Decoder[E,Char,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "byteEnumeratumDecoder", "tail" : "(arg0: ByteEnum[D], arg1: IsError[F], decoder: Decoder[E, Byte, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.enumeratum.values.DecoderInstances.byteEnumeratumDecoder", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#byteEnumeratumDecoder[E,D<:enumeratum.values.ByteEnumEntry,F,T](implicitevidence$9:enumeratum.values.ByteEnum[D],implicitevidence$10:kantan.codecs.error.IsError[F],implicitdecoder:kantan.codecs.Decoder[E,Byte,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "stringEnumeratumDecoder", "tail" : "(arg0: StringEnum[D], arg1: IsError[F], decoder: Decoder[E, String, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.enumeratum.values.DecoderInstances.stringEnumeratumDecoder", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#stringEnumeratumDecoder[E,D<:enumeratum.values.StringEnumEntry,F,T](implicitevidence$7:enumeratum.values.StringEnum[D],implicitevidence$8:kantan.codecs.error.IsError[F],implicitdecoder:kantan.codecs.Decoder[E,String,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "shortEnumeratumDecoder", "tail" : "(arg0: ShortEnum[D], arg1: IsError[F], decoder: Decoder[E, Short, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.enumeratum.values.DecoderInstances.shortEnumeratumDecoder", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#shortEnumeratumDecoder[E,D<:enumeratum.values.ShortEnumEntry,F,T](implicitevidence$5:enumeratum.values.ShortEnum[D],implicitevidence$6:kantan.codecs.error.IsError[F],implicitdecoder:kantan.codecs.Decoder[E,Short,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "longEnumeratumDecoder", "tail" : "(arg0: LongEnum[D], arg1: IsError[F], decoder: Decoder[E, Long, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.enumeratum.values.DecoderInstances.longEnumeratumDecoder", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#longEnumeratumDecoder[E,D<:enumeratum.values.LongEnumEntry,F,T](implicitevidence$3:enumeratum.values.LongEnum[D],implicitevidence$4:kantan.codecs.error.IsError[F],implicitdecoder:kantan.codecs.Decoder[E,Long,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "intEnumeratumDecoder", "tail" : "(arg0: IntEnum[D], arg1: IsError[F], decoder: Decoder[E, Int, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.enumeratum.values.DecoderInstances.intEnumeratumDecoder", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#intEnumeratumDecoder[E,D<:enumeratum.values.IntEnumEntry,F,T](implicitevidence$1:enumeratum.values.IntEnum[D],implicitevidence$2:kantan.codecs.error.IsError[F],implicitdecoder:kantan.codecs.Decoder[E,Int,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "enumeratumDecoder", "tail" : "(enum: ValueEnum[V, D], decoder: Decoder[E, V, F, T], error: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.enumeratum.values.DecoderInstances.enumeratumDecoder", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#enumeratumDecoder[V,E,D<:enumeratum.values.ValueEnumEntry[V],F,T](implicitenum:enumeratum.values.ValueEnum[V,D],implicitdecoder:kantan.codecs.Decoder[E,V,F,T],impliciterror:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/values\/DecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Defines implicit Decoder instances for any enumeratum ValueEnum type."}, {"name" : "kantan.codecs.enumeratum.values.EncoderInstances", "trait" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "charEnumeratumEncoder", "tail" : "(arg0: CharEnum[D], encoder: Encoder[E, Char, T]): Encoder[E, D, T]", "member" : "kantan.codecs.enumeratum.values.EncoderInstances.charEnumeratumEncoder", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#charEnumeratumEncoder[E,D<:enumeratum.values.CharEnumEntry,T](implicitevidence$18:enumeratum.values.CharEnum[D],implicitencoder:kantan.codecs.Encoder[E,Char,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "implicit def"}, {"label" : "byteEnumeratumEncoder", "tail" : "(arg0: ByteEnum[D], encoder: Encoder[E, Byte, T]): Encoder[E, D, T]", "member" : "kantan.codecs.enumeratum.values.EncoderInstances.byteEnumeratumEncoder", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#byteEnumeratumEncoder[E,D<:enumeratum.values.ByteEnumEntry,T](implicitevidence$17:enumeratum.values.ByteEnum[D],implicitencoder:kantan.codecs.Encoder[E,Byte,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "implicit def"}, {"label" : "stringEnumeratumEncoder", "tail" : "(arg0: StringEnum[D], encoder: Encoder[E, String, T]): Encoder[E, D, T]", "member" : "kantan.codecs.enumeratum.values.EncoderInstances.stringEnumeratumEncoder", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#stringEnumeratumEncoder[E,D<:enumeratum.values.StringEnumEntry,T](implicitevidence$16:enumeratum.values.StringEnum[D],implicitencoder:kantan.codecs.Encoder[E,String,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "implicit def"}, {"label" : "shortEnumeratumEncoder", "tail" : "(arg0: ShortEnum[D], encoder: Encoder[E, Short, T]): Encoder[E, D, T]", "member" : "kantan.codecs.enumeratum.values.EncoderInstances.shortEnumeratumEncoder", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#shortEnumeratumEncoder[E,D<:enumeratum.values.ShortEnumEntry,T](implicitevidence$15:enumeratum.values.ShortEnum[D],implicitencoder:kantan.codecs.Encoder[E,Short,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "implicit def"}, {"label" : "longEnumeratumEncoder", "tail" : "(arg0: LongEnum[D], encoder: Encoder[E, Long, T]): Encoder[E, D, T]", "member" : "kantan.codecs.enumeratum.values.EncoderInstances.longEnumeratumEncoder", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#longEnumeratumEncoder[E,D<:enumeratum.values.LongEnumEntry,T](implicitevidence$14:enumeratum.values.LongEnum[D],implicitencoder:kantan.codecs.Encoder[E,Long,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "implicit def"}, {"label" : "intEnumeratumEncoder", "tail" : "(arg0: IntEnum[D], encoder: Encoder[E, Int, T]): Encoder[E, D, T]", "member" : "kantan.codecs.enumeratum.values.EncoderInstances.intEnumeratumEncoder", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#intEnumeratumEncoder[E,D<:enumeratum.values.IntEnumEntry,T](implicitevidence$13:enumeratum.values.IntEnum[D],implicitencoder:kantan.codecs.Encoder[E,Int,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "implicit def"}, {"label" : "enumeratumEncoder", "tail" : "(encoder: Encoder[E, V, T]): Encoder[E, D, T]", "member" : "kantan.codecs.enumeratum.values.EncoderInstances.enumeratumEncoder", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#enumeratumEncoder[V,E,D<:enumeratum.values.ValueEnumEntry[V],T](implicitencoder:kantan.codecs.Encoder[E,V,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/values\/EncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Defines implicit Encoder instances for any enumeratum ValueEnum type."}], "libra" : [], "kantan.codecs.refined.laws" : [], "kantan.codecs.shapeless.laws.discipline" : [{"name" : "kantan.codecs.shapeless.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "shrinkFieldType", "tail" : "(underlying: Shrink[H]): Shrink[FieldType[K, H]]", "member" : "org.scalacheck.derive.FieldTypeInstances.shrinkFieldType", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#shrinkFieldType[K,H](implicitunderlying:org.scalacheck.Shrink[H]):org.scalacheck.Shrink[shapeless.labelled.FieldType[K,H]]", "kind" : "implicit def"}, {"label" : "cogenFieldType", "tail" : "(underlying: Cogen[H]): Cogen[FieldType[K, H]]", "member" : "org.scalacheck.derive.FieldTypeInstances.cogenFieldType", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenFieldType[K,H](implicitunderlying:org.scalacheck.Cogen[H]):org.scalacheck.Cogen[shapeless.labelled.FieldType[K,H]]", "kind" : "implicit def"}, {"label" : "arbitraryFieldType", "tail" : "(underlying: Arbitrary[H]): Arbitrary[FieldType[K, H]]", "member" : "org.scalacheck.derive.FieldTypeInstances.arbitraryFieldType", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbitraryFieldType[K,H](implicitunderlying:org.scalacheck.Arbitrary[H]):org.scalacheck.Arbitrary[shapeless.labelled.FieldType[K,H]]", "kind" : "implicit def"}, {"label" : "derivedCogen", "tail" : "(ev: LowPriority, underlying: Strict[MkCogen[T]]): Cogen[T]", "member" : "org.scalacheck.derive.DerivedInstances.derivedCogen", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#derivedCogen[T](implicitev:shapeless.LowPriority,implicitunderlying:shapeless.Strict[org.scalacheck.derive.MkCogen[T]]):org.scalacheck.Cogen[T]", "kind" : "implicit def"}, {"label" : "derivedShrink", "tail" : "(ev: Ignoring[String(\"shrinkAny\")], underlying: Strict[MkShrink[T]]): Shrink[T]", "member" : "org.scalacheck.derive.DerivedInstances.derivedShrink", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#derivedShrink[T](implicitev:shapeless.LowPriority.Ignoring[String(\"shrinkAny\")],implicitunderlying:shapeless.Strict[org.scalacheck.derive.MkShrink[T]]):org.scalacheck.Shrink[T]", "kind" : "implicit def"}, {"label" : "derivedArbitrary", "tail" : "(ev: LowPriority, underlying: Strict[MkArbitrary[T]]): Arbitrary[T]", "member" : "org.scalacheck.derive.DerivedInstances.derivedArbitrary", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#derivedArbitrary[T](implicitev:shapeless.LowPriority,implicitunderlying:shapeless.Strict[org.scalacheck.derive.MkArbitrary[T]]):org.scalacheck.Arbitrary[T]", "kind" : "implicit def"}, {"label" : "coproductShrink", "tail" : "(arb: MkCoproductShrink[C]): Shrink[C]", "member" : "org.scalacheck.derive.CoproductInstances.coproductShrink", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#coproductShrink[C<:shapeless.Coproduct](implicitarb:org.scalacheck.derive.MkCoproductShrink[C]):org.scalacheck.Shrink[C]", "kind" : "def"}, {"label" : "coproductCogen", "tail" : "(arb: MkCoproductCogen[C]): Cogen[C]", "member" : "org.scalacheck.derive.CoproductInstances.coproductCogen", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#coproductCogen[C<:shapeless.Coproduct](implicitarb:org.scalacheck.derive.MkCoproductCogen[C]):org.scalacheck.Cogen[C]", "kind" : "implicit def"}, {"label" : "coproductArbitrary", "tail" : "(arb: MkCoproductArbitrary[C]): Arbitrary[C]", "member" : "org.scalacheck.derive.CoproductInstances.coproductArbitrary", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#coproductArbitrary[C<:shapeless.Coproduct](implicitarb:org.scalacheck.derive.MkCoproductArbitrary[C]):org.scalacheck.Arbitrary[C]", "kind" : "implicit def"}, {"label" : "hlistShrink", "tail" : "(arb: MkHListShrink[L]): Shrink[L]", "member" : "org.scalacheck.derive.HListInstances.hlistShrink", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#hlistShrink[L<:shapeless.HList](implicitarb:org.scalacheck.derive.MkHListShrink[L]):org.scalacheck.Shrink[L]", "kind" : "implicit def"}, {"label" : "hlistCogen", "tail" : "(arb: MkHListCogen[L]): Cogen[L]", "member" : "org.scalacheck.derive.HListInstances.hlistCogen", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#hlistCogen[L<:shapeless.HList](implicitarb:org.scalacheck.derive.MkHListCogen[L]):org.scalacheck.Cogen[L]", "kind" : "implicit def"}, {"label" : "hlistArbitrary", "tail" : "(arb: MkHListArbitrary[L]): Arbitrary[L]", "member" : "org.scalacheck.derive.HListInstances.hlistArbitrary", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#hlistArbitrary[L<:shapeless.HList](implicitarb:org.scalacheck.derive.MkHListArbitrary[L]):org.scalacheck.Arbitrary[L]", "kind" : "implicit def"}, {"label" : "cogenSingletonType", "tail" : "(w: Aux[S]): Cogen[S]", "member" : "org.scalacheck.derive.SingletonInstances.cogenSingletonType", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#cogenSingletonType[S](implicitw:shapeless.Witness.Aux[S]):org.scalacheck.Cogen[S]", "kind" : "implicit def"}, {"label" : "arbitrarySingletonType", "tail" : "(w: Aux[S]): Arbitrary[S]", "member" : "org.scalacheck.derive.SingletonInstances.arbitrarySingletonType", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#arbitrarySingletonType[S](implicitw:shapeless.Witness.Aux[S]):org.scalacheck.Arbitrary[S]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.shapeless.laws.discipline.ArbitraryInstances", "trait" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "shrinkFieldType", "tail" : "(underlying: Shrink[H]): Shrink[FieldType[K, H]]", "member" : "org.scalacheck.derive.FieldTypeInstances.shrinkFieldType", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#shrinkFieldType[K,H](implicitunderlying:org.scalacheck.Shrink[H]):org.scalacheck.Shrink[shapeless.labelled.FieldType[K,H]]", "kind" : "implicit def"}, {"label" : "cogenFieldType", "tail" : "(underlying: Cogen[H]): Cogen[FieldType[K, H]]", "member" : "org.scalacheck.derive.FieldTypeInstances.cogenFieldType", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#cogenFieldType[K,H](implicitunderlying:org.scalacheck.Cogen[H]):org.scalacheck.Cogen[shapeless.labelled.FieldType[K,H]]", "kind" : "implicit def"}, {"label" : "arbitraryFieldType", "tail" : "(underlying: Arbitrary[H]): Arbitrary[FieldType[K, H]]", "member" : "org.scalacheck.derive.FieldTypeInstances.arbitraryFieldType", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#arbitraryFieldType[K,H](implicitunderlying:org.scalacheck.Arbitrary[H]):org.scalacheck.Arbitrary[shapeless.labelled.FieldType[K,H]]", "kind" : "implicit def"}, {"label" : "derivedCogen", "tail" : "(ev: LowPriority, underlying: Strict[MkCogen[T]]): Cogen[T]", "member" : "org.scalacheck.derive.DerivedInstances.derivedCogen", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#derivedCogen[T](implicitev:shapeless.LowPriority,implicitunderlying:shapeless.Strict[org.scalacheck.derive.MkCogen[T]]):org.scalacheck.Cogen[T]", "kind" : "implicit def"}, {"label" : "derivedShrink", "tail" : "(ev: Ignoring[String(\"shrinkAny\")], underlying: Strict[MkShrink[T]]): Shrink[T]", "member" : "org.scalacheck.derive.DerivedInstances.derivedShrink", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#derivedShrink[T](implicitev:shapeless.LowPriority.Ignoring[String(\"shrinkAny\")],implicitunderlying:shapeless.Strict[org.scalacheck.derive.MkShrink[T]]):org.scalacheck.Shrink[T]", "kind" : "implicit def"}, {"label" : "derivedArbitrary", "tail" : "(ev: LowPriority, underlying: Strict[MkArbitrary[T]]): Arbitrary[T]", "member" : "org.scalacheck.derive.DerivedInstances.derivedArbitrary", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#derivedArbitrary[T](implicitev:shapeless.LowPriority,implicitunderlying:shapeless.Strict[org.scalacheck.derive.MkArbitrary[T]]):org.scalacheck.Arbitrary[T]", "kind" : "implicit def"}, {"label" : "coproductShrink", "tail" : "(arb: MkCoproductShrink[C]): Shrink[C]", "member" : "org.scalacheck.derive.CoproductInstances.coproductShrink", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#coproductShrink[C<:shapeless.Coproduct](implicitarb:org.scalacheck.derive.MkCoproductShrink[C]):org.scalacheck.Shrink[C]", "kind" : "def"}, {"label" : "coproductCogen", "tail" : "(arb: MkCoproductCogen[C]): Cogen[C]", "member" : "org.scalacheck.derive.CoproductInstances.coproductCogen", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#coproductCogen[C<:shapeless.Coproduct](implicitarb:org.scalacheck.derive.MkCoproductCogen[C]):org.scalacheck.Cogen[C]", "kind" : "implicit def"}, {"label" : "coproductArbitrary", "tail" : "(arb: MkCoproductArbitrary[C]): Arbitrary[C]", "member" : "org.scalacheck.derive.CoproductInstances.coproductArbitrary", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#coproductArbitrary[C<:shapeless.Coproduct](implicitarb:org.scalacheck.derive.MkCoproductArbitrary[C]):org.scalacheck.Arbitrary[C]", "kind" : "implicit def"}, {"label" : "hlistShrink", "tail" : "(arb: MkHListShrink[L]): Shrink[L]", "member" : "org.scalacheck.derive.HListInstances.hlistShrink", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#hlistShrink[L<:shapeless.HList](implicitarb:org.scalacheck.derive.MkHListShrink[L]):org.scalacheck.Shrink[L]", "kind" : "implicit def"}, {"label" : "hlistCogen", "tail" : "(arb: MkHListCogen[L]): Cogen[L]", "member" : "org.scalacheck.derive.HListInstances.hlistCogen", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#hlistCogen[L<:shapeless.HList](implicitarb:org.scalacheck.derive.MkHListCogen[L]):org.scalacheck.Cogen[L]", "kind" : "implicit def"}, {"label" : "hlistArbitrary", "tail" : "(arb: MkHListArbitrary[L]): Arbitrary[L]", "member" : "org.scalacheck.derive.HListInstances.hlistArbitrary", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#hlistArbitrary[L<:shapeless.HList](implicitarb:org.scalacheck.derive.MkHListArbitrary[L]):org.scalacheck.Arbitrary[L]", "kind" : "implicit def"}, {"label" : "cogenSingletonType", "tail" : "(w: Aux[S]): Cogen[S]", "member" : "org.scalacheck.derive.SingletonInstances.cogenSingletonType", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#cogenSingletonType[S](implicitw:shapeless.Witness.Aux[S]):org.scalacheck.Cogen[S]", "kind" : "implicit def"}, {"label" : "arbitrarySingletonType", "tail" : "(w: Aux[S]): Arbitrary[S]", "member" : "org.scalacheck.derive.SingletonInstances.arbitrarySingletonType", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#arbitrarySingletonType[S](implicitw:shapeless.Witness.Aux[S]):org.scalacheck.Arbitrary[S]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/shapeless\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.codecs.error" : [{"name" : "kantan.codecs.error.Error", "shortDescription" : "Base class for errors", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/codecs\/error\/Error.html#toString():String", "kind" : "final def"}, {"member" : "kantan.codecs.error.Error#<init>", "error" : "unsupported entity"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/codecs\/error\/Error.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/codecs\/error\/Error.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/codecs\/error\/Error.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/codecs\/error\/Error.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/codecs\/error\/Error.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/codecs\/error\/Error.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/codecs\/error\/Error.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/codecs\/error\/Error.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/codecs\/error\/Error.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/codecs\/error\/Error.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/codecs\/error\/Error.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/codecs\/error\/Error.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/codecs\/error\/Error.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/codecs\/error\/Error.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/codecs\/error\/Error.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/codecs\/error\/Error.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/error\/Error.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/error\/Error.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/error\/Error.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/error\/Error.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/error\/Error.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/error\/Error.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/error\/Error.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/Error.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/Error.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/Error.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/error\/Error.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/error\/Error.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/error\/Error.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/error\/Error.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/error\/Error.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/error\/Error.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/error\/Error.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/error\/Error.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/codecs\/error\/Error.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/codecs\/error\/Error.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/codecs\/error\/Error.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "class" : "kantan\/codecs\/error\/Error.html", "kind" : "class"}, {"name" : "kantan.codecs.error.ErrorCompanion", "shortDescription" : "Provides useful instance creation methods for errors that might be created as a result of Java exceptions.", "members_class" : [{"label" : "apply", "tail" : "(msg: String): T", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#apply(msg:String):T", "kind" : "def"}, {"label" : "apply", "tail" : "(cause: Throwable): T", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#apply(cause:Throwable):T", "kind" : "def"}, {"label" : "apply", "tail" : "(msg: String, cause: Throwable): T", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#apply(msg:String,cause:Throwable):T", "kind" : "def"}, {"label" : "safe", "tail" : "(a: => A): Either[T, A]", "member" : "kantan.codecs.error.ErrorCompanion.safe", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#safe[A](a:=>A):Either[T,A]", "kind" : "def"}, {"label" : "isError", "tail" : ": IsError[T]", "member" : "kantan.codecs.error.ErrorCompanion.isError", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#isError:kantan.codecs.error.IsError[T]", "kind" : "implicit val"}, {"member" : "kantan.codecs.error.ErrorCompanion#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/error\/ErrorCompanion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/error\/ErrorCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/error\/ErrorCompanion.html", "kind" : "class"}, {"name" : "kantan.codecs.error.IsError", "object" : "kantan\/codecs\/error\/IsError$.html", "members_object" : [{"label" : "exceptionIsError", "tail" : ": IsError[Exception]", "member" : "kantan.codecs.error.IsError.exceptionIsError", "link" : "kantan\/codecs\/error\/IsError$.html#exceptionIsError:kantan.codecs.error.IsError[Exception]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(ev: IsError[A]): IsError[A]", "member" : "kantan.codecs.error.IsError.apply", "link" : "kantan\/codecs\/error\/IsError$.html#apply[A](implicitev:kantan.codecs.error.IsError[A]):kantan.codecs.error.IsError[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/error\/IsError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/error\/IsError$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/error\/IsError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/error\/IsError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/error\/IsError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/error\/IsError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/error\/IsError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/IsError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/IsError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/IsError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/error\/IsError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/error\/IsError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/error\/IsError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/error\/IsError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/error\/IsError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/error\/IsError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/error\/IsError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/error\/IsError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/error\/IsError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/error\/IsError.html", "kind" : "trait", "members_trait" : [{"label" : "map", "tail" : "(f: (E) => EE): IsError[EE]", "member" : "kantan.codecs.error.IsError.map", "link" : "kantan\/codecs\/error\/IsError.html#map[EE](f:E=>EE):kantan.codecs.error.IsError[EE]", "kind" : "def"}, {"label" : "safe", "tail" : "(a: => A): Either[E, A]", "member" : "kantan.codecs.error.IsError.safe", "link" : "kantan\/codecs\/error\/IsError.html#safe[A](a:=>A):Either[E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/error\/IsError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/error\/IsError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/error\/IsError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/error\/IsError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/error\/IsError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/error\/IsError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/error\/IsError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/IsError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/IsError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/error\/IsError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/error\/IsError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/error\/IsError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/error\/IsError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/error\/IsError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/error\/IsError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/error\/IsError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/error\/IsError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/error\/IsError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/error\/IsError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "from", "tail" : "(msg: String, t: Throwable): E", "member" : "kantan.codecs.error.IsError.from", "link" : "kantan\/codecs\/error\/IsError.html#from(msg:String,t:Throwable):E", "kind" : "abstract def"}, {"label" : "fromMessage", "tail" : "(msg: String): E", "member" : "kantan.codecs.error.IsError.fromMessage", "link" : "kantan\/codecs\/error\/IsError.html#fromMessage(msg:String):E", "kind" : "abstract def"}, {"label" : "fromThrowable", "tail" : "(t: Throwable): E", "member" : "kantan.codecs.error.IsError.fromThrowable", "link" : "kantan\/codecs\/error\/IsError.html#fromThrowable(t:Throwable):E", "kind" : "abstract def"}], "shortDescription" : "Type class for types that can be used as errors."}], "kantan.codecs.scalaz.laws" : [], "kantan.codecs.resource.bom" : [{"name" : "kantan.codecs.resource.bom.BomReader", "shortDescription" : "", "object" : "kantan\/codecs\/resource\/bom\/BomReader$.html", "members_object" : [{"label" : "apply", "tail" : "(input: InputStream, codec: scala.io.Codec): Reader", "member" : "kantan.codecs.resource.bom.BomReader.apply", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#apply(input:java.io.InputStream,codec:scala.io.Codec):java.io.Reader", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/bom\/BomReader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.resource.bom.BomWriter", "shortDescription" : "", "object" : "kantan\/codecs\/resource\/bom\/BomWriter$.html", "members_object" : [{"label" : "apply", "tail" : "(out: OutputStream, codec: scala.io.Codec): Writer", "member" : "kantan.codecs.resource.bom.BomWriter.apply", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#apply(out:java.io.OutputStream,codec:scala.io.Codec):java.io.Writer", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/bom\/BomWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "kantan" : [], "kantan.codecs.laws.discipline" : [{"name" : "kantan.codecs.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.laws.discipline.ArbitraryArities", "trait" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html", "kind" : "trait", "members_trait" : [{"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryArities.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.ArbitraryInstances", "trait" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.CodecTests", "object" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Cogen[D], arg4: Cogen[F], arg5: Arbitrary[F], l: CodecLaws[E, D, F, T], al: Arbitrary[LegalValue[E, D, T]]): CodecTests[E, D, F, T]", "member" : "kantan.codecs.laws.discipline.CodecTests.apply", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#apply[E,D,F,T](implicitevidence$13:org.scalacheck.Arbitrary[E],implicitevidence$14:org.scalacheck.Cogen[E],implicitevidence$15:org.scalacheck.Arbitrary[D],implicitevidence$16:org.scalacheck.Cogen[D],implicitevidence$17:org.scalacheck.Cogen[F],implicitevidence$18:org.scalacheck.Arbitrary[F],implicitl:kantan.codecs.laws.CodecLaws[E,D,F,T],implicital:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]]):kantan.codecs.laws.discipline.CodecTests[E,D,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/laws\/discipline\/CodecTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "codec", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A], arg2: Arbitrary[B], arg3: Cogen[B], ai: Arbitrary[IllegalValue[E, D, T]]): RuleSet", "member" : "kantan.codecs.laws.discipline.CodecTests.codec", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#codec[A,B](implicitevidence$9:org.scalacheck.Arbitrary[A],implicitevidence$10:org.scalacheck.Cogen[A],implicitevidence$11:org.scalacheck.Arbitrary[B],implicitevidence$12:org.scalacheck.Cogen[B],implicitai:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):CodecTests.this.RuleSet", "kind" : "def"}, {"label" : "bijectiveCodec", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A], arg2: Arbitrary[B], arg3: Cogen[B]): RuleSet", "member" : "kantan.codecs.laws.discipline.CodecTests.bijectiveCodec", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#bijectiveCodec[A,B](implicitevidence$5:org.scalacheck.Arbitrary[A],implicitevidence$6:org.scalacheck.Cogen[A],implicitevidence$7:org.scalacheck.Arbitrary[B],implicitevidence$8:org.scalacheck.Cogen[B]):CodecTests.this.RuleSet", "kind" : "def"}, {"label" : "encoder", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A], arg2: Arbitrary[B], arg3: Cogen[B]): RuleSet", "member" : "kantan.codecs.laws.discipline.EncoderTests.encoder", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#encoder[A,B](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Cogen[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:org.scalacheck.Cogen[B]):EncoderTests.this.RuleSet", "kind" : "def"}, {"label" : "decoder", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A], arg2: Arbitrary[B], arg3: Cogen[B], ai: Arbitrary[IllegalValue[E, D, T]]): RuleSet", "member" : "kantan.codecs.laws.discipline.DecoderTests.decoder", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#decoder[A,B](implicitevidence$9:org.scalacheck.Arbitrary[A],implicitevidence$10:org.scalacheck.Cogen[A],implicitevidence$11:org.scalacheck.Arbitrary[B],implicitevidence$12:org.scalacheck.Cogen[B],implicitai:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):DecoderTests.this.RuleSet", "kind" : "def"}, {"label" : "bijectiveDecoder", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A], arg2: Arbitrary[B], arg3: Cogen[B]): RuleSet", "member" : "kantan.codecs.laws.discipline.DecoderTests.bijectiveDecoder", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#bijectiveDecoder[A,B](implicitevidence$5:org.scalacheck.Arbitrary[A],implicitevidence$6:org.scalacheck.Cogen[A],implicitevidence$7:org.scalacheck.Arbitrary[B],implicitevidence$8:org.scalacheck.Cogen[B]):DecoderTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): CodecLaws[E, D, F, T]", "member" : "kantan.codecs.laws.discipline.CodecTests.laws", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#laws:kantan.codecs.laws.CodecLaws[E,D,F,T]", "kind" : "abstract def"}, {"label" : "cogenE", "tail" : ": Cogen[E]", "member" : "kantan.codecs.laws.discipline.EncoderTests.cogenE", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#cogenE:org.scalacheck.Cogen[E]", "kind" : "implicit abstract val"}, {"label" : "arbD", "tail" : ": Arbitrary[D]", "member" : "kantan.codecs.laws.discipline.EncoderTests.arbD", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#arbD:org.scalacheck.Arbitrary[D]", "kind" : "implicit abstract val"}, {"label" : "arbLegal", "tail" : "(): Arbitrary[LegalValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.EncoderTests.arbLegal", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#arbLegal:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]]", "kind" : "implicit abstract def"}, {"label" : "cogenD", "tail" : ": Cogen[D]", "member" : "kantan.codecs.laws.discipline.DecoderTests.cogenD", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#cogenD:org.scalacheck.Cogen[D]", "kind" : "implicit abstract val"}, {"label" : "cogenF", "tail" : ": Cogen[F]", "member" : "kantan.codecs.laws.discipline.DecoderTests.cogenF", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#cogenF:org.scalacheck.Cogen[F]", "kind" : "implicit abstract val"}, {"label" : "arbE", "tail" : ": Arbitrary[E]", "member" : "kantan.codecs.laws.discipline.DecoderTests.arbE", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#arbE:org.scalacheck.Arbitrary[E]", "kind" : "implicit abstract val"}, {"label" : "arbF", "tail" : "(): Arbitrary[F]", "member" : "kantan.codecs.laws.discipline.DecoderTests.arbF", "link" : "kantan\/codecs\/laws\/discipline\/CodecTests.html#arbF:org.scalacheck.Arbitrary[F]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.CommonArbitraryInstances", "trait" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "genIoException", "tail" : "(): Gen[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIoException", "link" : "kantan\/codecs\/laws\/discipline\/CommonArbitraryInstances.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.DecoderTests", "object" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D], arg3: Cogen[F], arg4: Arbitrary[F], l: DecoderLaws[E, D, F, T], al: Arbitrary[LegalValue[E, D, T]]): DecoderTests[E, D, F, T]", "member" : "kantan.codecs.laws.discipline.DecoderTests.apply", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#apply[E,D,F,T](implicitevidence$13:org.scalacheck.Arbitrary[E],implicitevidence$14:org.scalacheck.Arbitrary[D],implicitevidence$15:org.scalacheck.Cogen[D],implicitevidence$16:org.scalacheck.Cogen[F],implicitevidence$17:org.scalacheck.Arbitrary[F],implicitl:kantan.codecs.laws.DecoderLaws[E,D,F,T],implicital:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]]):kantan.codecs.laws.discipline.DecoderTests[E,D,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "decoder", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A], arg2: Arbitrary[B], arg3: Cogen[B], ai: Arbitrary[IllegalValue[E, D, T]]): RuleSet", "member" : "kantan.codecs.laws.discipline.DecoderTests.decoder", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#decoder[A,B](implicitevidence$9:org.scalacheck.Arbitrary[A],implicitevidence$10:org.scalacheck.Cogen[A],implicitevidence$11:org.scalacheck.Arbitrary[B],implicitevidence$12:org.scalacheck.Cogen[B],implicitai:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):DecoderTests.this.RuleSet", "kind" : "def"}, {"label" : "bijectiveDecoder", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A], arg2: Arbitrary[B], arg3: Cogen[B]): RuleSet", "member" : "kantan.codecs.laws.discipline.DecoderTests.bijectiveDecoder", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#bijectiveDecoder[A,B](implicitevidence$5:org.scalacheck.Arbitrary[A],implicitevidence$6:org.scalacheck.Cogen[A],implicitevidence$7:org.scalacheck.Arbitrary[B],implicitevidence$8:org.scalacheck.Cogen[B]):DecoderTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cogenD", "tail" : ": Cogen[D]", "member" : "kantan.codecs.laws.discipline.DecoderTests.cogenD", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#cogenD:org.scalacheck.Cogen[D]", "kind" : "implicit abstract val"}, {"label" : "cogenF", "tail" : ": Cogen[F]", "member" : "kantan.codecs.laws.discipline.DecoderTests.cogenF", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#cogenF:org.scalacheck.Cogen[F]", "kind" : "implicit abstract val"}, {"label" : "arbE", "tail" : ": Arbitrary[E]", "member" : "kantan.codecs.laws.discipline.DecoderTests.arbE", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#arbE:org.scalacheck.Arbitrary[E]", "kind" : "implicit abstract val"}, {"label" : "arbD", "tail" : ": Arbitrary[D]", "member" : "kantan.codecs.laws.discipline.DecoderTests.arbD", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#arbD:org.scalacheck.Arbitrary[D]", "kind" : "implicit abstract val"}, {"label" : "arbF", "tail" : "(): Arbitrary[F]", "member" : "kantan.codecs.laws.discipline.DecoderTests.arbF", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#arbF:org.scalacheck.Arbitrary[F]", "kind" : "implicit abstract def"}, {"label" : "arbLegal", "tail" : "(): Arbitrary[LegalValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.DecoderTests.arbLegal", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#arbLegal:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]]", "kind" : "implicit abstract def"}, {"label" : "laws", "tail" : "(): DecoderLaws[E, D, F, T]", "member" : "kantan.codecs.laws.discipline.DecoderTests.laws", "link" : "kantan\/codecs\/laws\/discipline\/DecoderTests.html#laws:kantan.codecs.laws.DecoderLaws[E,D,F,T]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.DisciplinePackage", "trait" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html", "kind" : "trait", "members_trait" : [{"label" : "DisciplineSuite", "tail" : "", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.DisciplineSuite", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#DisciplineSuite=kantan.codecs.laws.discipline.DisciplineSuite", "kind" : "type"}, {"label" : "StringCodecTests", "tail" : ": discipline.StringCodecTests.type", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.StringCodecTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#StringCodecTests:kantan.codecs.laws.discipline.StringCodecTests.type", "kind" : "val"}, {"label" : "StringCodecTests", "tail" : "", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.StringCodecTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#StringCodecTests[A]=DisciplinePackage.this.CodecTests[String,A,kantan.codecs.strings.DecodeError,kantan.codecs.strings.codecs.type]", "kind" : "type"}, {"label" : "StringDecoderTests", "tail" : ": discipline.StringDecoderTests.type", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.StringDecoderTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#StringDecoderTests:kantan.codecs.laws.discipline.StringDecoderTests.type", "kind" : "val"}, {"label" : "StringDecoderTests", "tail" : "", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.StringDecoderTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#StringDecoderTests[A]=DisciplinePackage.this.DecoderTests[String,A,kantan.codecs.strings.DecodeError,kantan.codecs.strings.codecs.type]", "kind" : "type"}, {"label" : "StringEncoderTests", "tail" : ": discipline.StringEncoderTests.type", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.StringEncoderTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#StringEncoderTests:kantan.codecs.laws.discipline.StringEncoderTests.type", "kind" : "val"}, {"label" : "StringEncoderTests", "tail" : "", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.StringEncoderTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#StringEncoderTests[A]=DisciplinePackage.this.EncoderTests[String,A,kantan.codecs.strings.codecs.type]", "kind" : "type"}, {"label" : "EncoderTests", "tail" : ": discipline.EncoderTests.type", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.EncoderTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#EncoderTests:kantan.codecs.laws.discipline.EncoderTests.type", "kind" : "val"}, {"label" : "EncoderTests", "tail" : "", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.EncoderTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#EncoderTests[E,D,T]=kantan.codecs.laws.discipline.EncoderTests[E,D,T]", "kind" : "type"}, {"label" : "DecoderTests", "tail" : ": discipline.DecoderTests.type", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.DecoderTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#DecoderTests:kantan.codecs.laws.discipline.DecoderTests.type", "kind" : "val"}, {"label" : "DecoderTests", "tail" : "", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.DecoderTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#DecoderTests[E,D,F,T]=kantan.codecs.laws.discipline.DecoderTests[E,D,F,T]", "kind" : "type"}, {"label" : "CodecTests", "tail" : ": discipline.CodecTests.type", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.CodecTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#CodecTests:kantan.codecs.laws.discipline.CodecTests.type", "kind" : "val"}, {"label" : "CodecTests", "tail" : "", "member" : "kantan.codecs.laws.discipline.DisciplinePackage.CodecTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#CodecTests[E,D,F,T]=kantan.codecs.laws.discipline.CodecTests[E,D,F,T]", "kind" : "type"}, {"label" : "SerializableTests", "tail" : ": discipline.SerializableTests.type", "member" : "kantan.codecs.laws.discipline.PlatformSpecificDisciplinePackage.SerializableTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#SerializableTests:kantan.codecs.laws.discipline.SerializableTests.type", "kind" : "val"}, {"label" : "SerializableTests", "tail" : "", "member" : "kantan.codecs.laws.discipline.PlatformSpecificDisciplinePackage.SerializableTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#SerializableTests[A]=kantan.codecs.laws.discipline.SerializableTests[A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplinePackage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.DisciplineSuite", "trait" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html", "kind" : "trait", "members_trait" : [{"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWrapper", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.StringShouldWrapper", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnyShouldWrapper", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForCollectedString", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForCollectedString", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForCollectedString", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfCollectedAny", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedArray", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfBeWordForCollectedArray[T]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedAny", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfContainWordForCollectedAny", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfNotWordForCollectedAny", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "Collected", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.Collected", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#CollectedextendsSerializable", "kind" : "sealed class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForExtent", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.TheSameInstanceAsPhrase", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnWord", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AWord", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ValueWord", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.KeyWord", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForString", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForString", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForString", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForString", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWord", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForAny", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.HavePropertyMatcherGenerator", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#DeterminedByEquivalence[T]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#DecidedByEquality[A]extendsEquality[A]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.ShouldVerb.StringShouldWrapperForVerb", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ConfiguredPropertyCheck", "tail" : "", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.ConfiguredPropertyCheck", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ConfiguredPropertyCheckextendsAnyRef", "kind" : "class"}, {"label" : "Workers", "tail" : "", "member" : "org.scalatest.prop.Configuration.Workers", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#WorkersextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "SizeRange", "tail" : "", "member" : "org.scalatest.prop.Configuration.SizeRange", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#SizeRangeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSize", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSize", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#MinSizeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MaxDiscardedFactor", "tail" : "", "member" : "org.scalatest.prop.Configuration.MaxDiscardedFactor", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#MaxDiscardedFactorextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSuccessful", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSuccessful", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#MinSuccessfulextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfigParam", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfigParam", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#PropertyCheckConfigParamextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#PropertyCheckConfigurationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#PropertyCheckConfiguration", "kind" : "object"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.of", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToRegexWrapper", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToStringShouldWrapper", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.matchers.should.Matchers.convertToAnyShouldWrapper", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.the", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atMost[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#between[K,V,JMAP<:<?>](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#between[E,C<:<?>](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exactly[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#every[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#every[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#every[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atLeast[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#all[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.matchers.should.Matchers.message", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#message(expectedMessage:String):org.scalatest.matchers.dsl.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: => Any): ResultOfThrownByApplication", "member" : "org.scalatest.matchers.should.Matchers.thrownBy", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#thrownBy(fun:=>Any):org.scalatest.matchers.dsl.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneElementOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atMostOneElementOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderElementsOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#inOrderElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrder", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allElementsOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#allElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAllOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderOnly", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: Position): ResultOfOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.only", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsInOrderAs", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#theSameElementsInOrderAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsAs", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#theSameElementsAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noElementsOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#noElementsOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfNoneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noneOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneElementOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atLeastOneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneElementOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#oneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.matchers.should.Matchers.definedAt", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#definedAt[T](right:T):org.scalatest.matchers.dsl.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>=", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<=", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.matchers.should.Matchers.regex", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.matchers.should.Matchers.theSameInstanceAs", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.matchers.should.Matchers.value", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.matchers.should.Matchers.key", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.matchers.should.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.matchers.dsl.MatcherWords.equal", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#equal(right:Any):org.scalatest.matchers.dsl.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.matchPattern", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#matchPattern:org.scalatest.matchers.dsl.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.typeCheck", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#typeCheck:org.scalatest.verbs.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.compile", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#compile:org.scalatest.verbs.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.empty", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#empty:org.scalatest.matchers.dsl.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.writable", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#writable:org.scalatest.matchers.dsl.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.readable", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#readable:org.scalatest.matchers.dsl.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.exist", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exist:org.scalatest.matchers.dsl.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: Position): NoExceptionWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.noException", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.defined", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#defined:org.scalatest.matchers.dsl.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.sorted", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#sorted:org.scalatest.matchers.dsl.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.size", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#size:org.scalatest.matchers.dsl.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.length", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#length:org.scalatest.matchers.dsl.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.not", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#not:org.scalatest.matchers.dsl.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.contain", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#contain:org.scalatest.matchers.dsl.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.be", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#be:org.scalatest.matchers.dsl.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.have", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#have:org.scalatest.matchers.dsl.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.include", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#include:org.scalatest.matchers.dsl.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.endWith", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#endWith:org.scalatest.matchers.dsl.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.startWith", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#startWith:org.scalatest.matchers.dsl.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.fullyMatch", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#fullyMatch:org.scalatest.matchers.dsl.FullyMatchWord", "kind" : "val"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.verbs.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "checkAll", "tail" : "(name: String, ruleSet: RuleSet)(config: PropertyCheckConfiguration, prettifier: Prettifier, pos: Position): Unit", "member" : "org.typelevel.discipline.scalatest.FunSuiteDiscipline.checkAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#checkAll(name:String,ruleSet:org.typelevel.discipline.Laws#RuleSet)(implicitconfig:FunSuiteDiscipline.this.PropertyCheckConfiguration,implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "convertConfiguration", "tail" : "(config: PropertyCheckConfiguration): org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "member" : "org.typelevel.discipline.scalatest.Discipline.convertConfiguration", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertConfiguration(config:Discipline.this.PropertyCheckConfiguration):org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "kind" : "final def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), genAndNameF: (Gen[F], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),genAndNameF:(org.scalacheck.Gen[F],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], genF: Gen[F], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],genF:org.scalacheck.Gen[F],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, nameF: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,nameF:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,ASSERTION](fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,ASSERTION](fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,ASSERTION](fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,ASSERTION](nameA:String,nameB:String,nameC:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,ASSERTION](fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,ASSERTION](nameA:String,nameB:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,ASSERTION](fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,ASSERTION](genA:org.scalacheck.Gen[A],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,ASSERTION](nameA:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,ASSERTION](fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(configParams: PropertyCheckConfigParam*): ConfiguredPropertyCheck", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll(configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*):ScalaCheckDrivenPropertyChecks.this.ConfiguredPropertyCheck", "kind" : "def"}, {"label" : "generatorDrivenConfig", "tail" : ": PropertyCheckConfiguration", "member" : "org.scalatest.prop.Configuration.generatorDrivenConfig", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#generatorDrivenConfig:Configuration.this.PropertyCheckConfiguration", "kind" : "implicit val"}, {"label" : "getParameter", "tail" : "(configParams: Seq[PropertyCheckConfigParam], config: PropertyCheckConfiguration): Parameter", "member" : "org.scalatest.prop.Configuration.getParameter", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#getParameter(configParams:Seq[org.scalatest.prop.Configuration#PropertyCheckConfigParam],config:Configuration.this.PropertyCheckConfiguration):org.scalatest.prop.Configuration.Parameter", "kind" : "def"}, {"label" : "workers", "tail" : "(value: PosInt): Workers", "member" : "org.scalatest.prop.Configuration.workers", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#workers(value:org.scalactic.anyvals.PosInt):Configuration.this.Workers", "kind" : "def"}, {"label" : "sizeRange", "tail" : "(value: PosZInt): SizeRange", "member" : "org.scalatest.prop.Configuration.sizeRange", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#sizeRange(value:org.scalactic.anyvals.PosZInt):Configuration.this.SizeRange", "kind" : "def"}, {"label" : "minSize", "tail" : "(value: PosZInt): MinSize", "member" : "org.scalatest.prop.Configuration.minSize", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#minSize(value:org.scalactic.anyvals.PosZInt):Configuration.this.MinSize", "kind" : "def"}, {"label" : "maxDiscardedFactor", "tail" : "(value: PosZDouble): MaxDiscardedFactor", "member" : "org.scalatest.prop.Configuration.maxDiscardedFactor", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#maxDiscardedFactor(value:org.scalactic.anyvals.PosZDouble):Configuration.this.MaxDiscardedFactor", "kind" : "def"}, {"label" : "minSuccessful", "tail" : "(value: PosInt): MinSuccessful", "member" : "org.scalatest.prop.Configuration.minSuccessful", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#minSuccessful(value:org.scalactic.anyvals.PosInt):Configuration.this.MinSuccessful", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,ASSERTION](table:org.scalatest.prop.TableFor22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,ASSERTION](table:org.scalatest.prop.TableFor21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,ASSERTION](table:org.scalatest.prop.TableFor20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,ASSERTION](table:org.scalatest.prop.TableFor19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,ASSERTION](table:org.scalatest.prop.TableFor18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,ASSERTION](table:org.scalatest.prop.TableFor17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,ASSERTION](table:org.scalatest.prop.TableFor16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,ASSERTION](table:org.scalatest.prop.TableFor15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor14[A, B, C, D, E, F, G, H, I, J, K, L, M, N])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,ASSERTION](table:org.scalatest.prop.TableFor14[A,B,C,D,E,F,G,H,I,J,K,L,M,N])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor13[A, B, C, D, E, F, G, H, I, J, K, L, M])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,ASSERTION](table:org.scalatest.prop.TableFor13[A,B,C,D,E,F,G,H,I,J,K,L,M])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor12[A, B, C, D, E, F, G, H, I, J, K, L])(fun: (A, B, C, D, E, F, G, H, I, J, K, L) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,ASSERTION](table:org.scalatest.prop.TableFor12[A,B,C,D,E,F,G,H,I,J,K,L])(fun:(A,B,C,D,E,F,G,H,I,J,K,L)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor11[A, B, C, D, E, F, G, H, I, J, K])(fun: (A, B, C, D, E, F, G, H, I, J, K) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,ASSERTION](table:org.scalatest.prop.TableFor11[A,B,C,D,E,F,G,H,I,J,K])(fun:(A,B,C,D,E,F,G,H,I,J,K)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor10[A, B, C, D, E, F, G, H, I, J])(fun: (A, B, C, D, E, F, G, H, I, J) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,ASSERTION](table:org.scalatest.prop.TableFor10[A,B,C,D,E,F,G,H,I,J])(fun:(A,B,C,D,E,F,G,H,I,J)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor9[A, B, C, D, E, F, G, H, I])(fun: (A, B, C, D, E, F, G, H, I) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,ASSERTION](table:org.scalatest.prop.TableFor9[A,B,C,D,E,F,G,H,I])(fun:(A,B,C,D,E,F,G,H,I)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor8[A, B, C, D, E, F, G, H])(fun: (A, B, C, D, E, F, G, H) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,H,ASSERTION](table:org.scalatest.prop.TableFor8[A,B,C,D,E,F,G,H])(fun:(A,B,C,D,E,F,G,H)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor7[A, B, C, D, E, F, G])(fun: (A, B, C, D, E, F, G) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,G,ASSERTION](table:org.scalatest.prop.TableFor7[A,B,C,D,E,F,G])(fun:(A,B,C,D,E,F,G)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor6[A, B, C, D, E, F])(fun: (A, B, C, D, E, F) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,F,ASSERTION](table:org.scalatest.prop.TableFor6[A,B,C,D,E,F])(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor5[A, B, C, D, E])(fun: (A, B, C, D, E) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,E,ASSERTION](table:org.scalatest.prop.TableFor5[A,B,C,D,E])(fun:(A,B,C,D,E)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor4[A, B, C, D])(fun: (A, B, C, D) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,D,ASSERTION](table:org.scalatest.prop.TableFor4[A,B,C,D])(fun:(A,B,C,D)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor3[A, B, C])(fun: (A, B, C) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,C,ASSERTION](table:org.scalatest.prop.TableFor3[A,B,C])(fun:(A,B,C)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor2[A, B])(fun: (A, B) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,B,ASSERTION](table:org.scalatest.prop.TableFor2[A,B])(fun:(A,B)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor1[A])(fun: (A) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#exists[A,ASSERTION](table:org.scalatest.prop.TableFor1[A])(fun:A=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,ASSERTION](table:org.scalatest.prop.TableFor22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,ASSERTION](table:org.scalatest.prop.TableFor21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,ASSERTION](table:org.scalatest.prop.TableFor20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,ASSERTION](table:org.scalatest.prop.TableFor19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,ASSERTION](table:org.scalatest.prop.TableFor18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,ASSERTION](table:org.scalatest.prop.TableFor17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,ASSERTION](table:org.scalatest.prop.TableFor16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,ASSERTION](table:org.scalatest.prop.TableFor15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor14[A, B, C, D, E, F, G, H, I, J, K, L, M, N])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,ASSERTION](table:org.scalatest.prop.TableFor14[A,B,C,D,E,F,G,H,I,J,K,L,M,N])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor13[A, B, C, D, E, F, G, H, I, J, K, L, M])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,ASSERTION](table:org.scalatest.prop.TableFor13[A,B,C,D,E,F,G,H,I,J,K,L,M])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor12[A, B, C, D, E, F, G, H, I, J, K, L])(fun: (A, B, C, D, E, F, G, H, I, J, K, L) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,ASSERTION](table:org.scalatest.prop.TableFor12[A,B,C,D,E,F,G,H,I,J,K,L])(fun:(A,B,C,D,E,F,G,H,I,J,K,L)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor11[A, B, C, D, E, F, G, H, I, J, K])(fun: (A, B, C, D, E, F, G, H, I, J, K) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,ASSERTION](table:org.scalatest.prop.TableFor11[A,B,C,D,E,F,G,H,I,J,K])(fun:(A,B,C,D,E,F,G,H,I,J,K)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor10[A, B, C, D, E, F, G, H, I, J])(fun: (A, B, C, D, E, F, G, H, I, J) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,ASSERTION](table:org.scalatest.prop.TableFor10[A,B,C,D,E,F,G,H,I,J])(fun:(A,B,C,D,E,F,G,H,I,J)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor9[A, B, C, D, E, F, G, H, I])(fun: (A, B, C, D, E, F, G, H, I) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,ASSERTION](table:org.scalatest.prop.TableFor9[A,B,C,D,E,F,G,H,I])(fun:(A,B,C,D,E,F,G,H,I)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor8[A, B, C, D, E, F, G, H])(fun: (A, B, C, D, E, F, G, H) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,ASSERTION](table:org.scalatest.prop.TableFor8[A,B,C,D,E,F,G,H])(fun:(A,B,C,D,E,F,G,H)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor7[A, B, C, D, E, F, G])(fun: (A, B, C, D, E, F, G) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,G,ASSERTION](table:org.scalatest.prop.TableFor7[A,B,C,D,E,F,G])(fun:(A,B,C,D,E,F,G)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor6[A, B, C, D, E, F])(fun: (A, B, C, D, E, F) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,F,ASSERTION](table:org.scalatest.prop.TableFor6[A,B,C,D,E,F])(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor5[A, B, C, D, E])(fun: (A, B, C, D, E) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,E,ASSERTION](table:org.scalatest.prop.TableFor5[A,B,C,D,E])(fun:(A,B,C,D,E)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor4[A, B, C, D])(fun: (A, B, C, D) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,D,ASSERTION](table:org.scalatest.prop.TableFor4[A,B,C,D])(fun:(A,B,C,D)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor3[A, B, C])(fun: (A, B, C) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,C,ASSERTION](table:org.scalatest.prop.TableFor3[A,B,C])(fun:(A,B,C)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor2[A, B])(fun: (A, B) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,B,ASSERTION](table:org.scalatest.prop.TableFor2[A,B])(fun:(A,B)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor1[A])(fun: (A) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forEvery[A,ASSERTION](table:org.scalatest.prop.TableFor1[A])(fun:A=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,ASSERTION](table:org.scalatest.prop.TableFor22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,ASSERTION](table:org.scalatest.prop.TableFor21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,ASSERTION](table:org.scalatest.prop.TableFor20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,ASSERTION](table:org.scalatest.prop.TableFor19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,ASSERTION](table:org.scalatest.prop.TableFor18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,ASSERTION](table:org.scalatest.prop.TableFor17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,ASSERTION](table:org.scalatest.prop.TableFor16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,ASSERTION](table:org.scalatest.prop.TableFor15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor14[A, B, C, D, E, F, G, H, I, J, K, L, M, N])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,ASSERTION](table:org.scalatest.prop.TableFor14[A,B,C,D,E,F,G,H,I,J,K,L,M,N])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor13[A, B, C, D, E, F, G, H, I, J, K, L, M])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,ASSERTION](table:org.scalatest.prop.TableFor13[A,B,C,D,E,F,G,H,I,J,K,L,M])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor12[A, B, C, D, E, F, G, H, I, J, K, L])(fun: (A, B, C, D, E, F, G, H, I, J, K, L) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,ASSERTION](table:org.scalatest.prop.TableFor12[A,B,C,D,E,F,G,H,I,J,K,L])(fun:(A,B,C,D,E,F,G,H,I,J,K,L)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor11[A, B, C, D, E, F, G, H, I, J, K])(fun: (A, B, C, D, E, F, G, H, I, J, K) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,ASSERTION](table:org.scalatest.prop.TableFor11[A,B,C,D,E,F,G,H,I,J,K])(fun:(A,B,C,D,E,F,G,H,I,J,K)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor10[A, B, C, D, E, F, G, H, I, J])(fun: (A, B, C, D, E, F, G, H, I, J) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,ASSERTION](table:org.scalatest.prop.TableFor10[A,B,C,D,E,F,G,H,I,J])(fun:(A,B,C,D,E,F,G,H,I,J)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor9[A, B, C, D, E, F, G, H, I])(fun: (A, B, C, D, E, F, G, H, I) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,ASSERTION](table:org.scalatest.prop.TableFor9[A,B,C,D,E,F,G,H,I])(fun:(A,B,C,D,E,F,G,H,I)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor8[A, B, C, D, E, F, G, H])(fun: (A, B, C, D, E, F, G, H) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,ASSERTION](table:org.scalatest.prop.TableFor8[A,B,C,D,E,F,G,H])(fun:(A,B,C,D,E,F,G,H)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor7[A, B, C, D, E, F, G])(fun: (A, B, C, D, E, F, G) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,G,ASSERTION](table:org.scalatest.prop.TableFor7[A,B,C,D,E,F,G])(fun:(A,B,C,D,E,F,G)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor6[A, B, C, D, E, F])(fun: (A, B, C, D, E, F) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,F,ASSERTION](table:org.scalatest.prop.TableFor6[A,B,C,D,E,F])(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor5[A, B, C, D, E])(fun: (A, B, C, D, E) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,E,ASSERTION](table:org.scalatest.prop.TableFor5[A,B,C,D,E])(fun:(A,B,C,D,E)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor4[A, B, C, D])(fun: (A, B, C, D) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,D,ASSERTION](table:org.scalatest.prop.TableFor4[A,B,C,D])(fun:(A,B,C,D)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor3[A, B, C])(fun: (A, B, C) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,C,ASSERTION](table:org.scalatest.prop.TableFor3[A,B,C])(fun:(A,B,C)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor2[A, B])(fun: (A, B) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,B,ASSERTION](table:org.scalatest.prop.TableFor2[A,B])(fun:(A,B)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor1[A])(fun: (A) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#forAll[A,ASSERTION](table:org.scalatest.prop.TableFor1[A])(fun:A=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "whenever", "tail" : "(condition: Boolean)(fun: => T)(wa: WheneverAsserting[T]): Result", "member" : "org.scalatest.prop.Whenever.whenever", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#whenever[T](condition:Boolean)(fun:=>T)(implicitwa:org.scalatest.enablers.WheneverAsserting[T]):wa.Result", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.funsuite.AnyFunSuite.toString", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testDataFor", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.styleName", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testsFor", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.run", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTests", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.tags", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTest", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testNames", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.ignore", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.test", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerIgnoredTest", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerTest", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.markup", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.alert", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.note", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.info", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/DisciplineSuite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.EncoderTests", "object" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Arbitrary[D], l: EncoderLaws[E, D, T], al: Arbitrary[LegalValue[E, D, T]], ce: Cogen[E]): EncoderTests[E, D, T]", "member" : "kantan.codecs.laws.discipline.EncoderTests.apply", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#apply[E,D,T](implicitevidence$5:org.scalacheck.Arbitrary[D],implicitl:kantan.codecs.laws.EncoderLaws[E,D,T],implicital:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitce:org.scalacheck.Cogen[E]):kantan.codecs.laws.discipline.EncoderTests[E,D,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "encoder", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A], arg2: Arbitrary[B], arg3: Cogen[B]): RuleSet", "member" : "kantan.codecs.laws.discipline.EncoderTests.encoder", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#encoder[A,B](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Cogen[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:org.scalacheck.Cogen[B]):EncoderTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cogenE", "tail" : ": Cogen[E]", "member" : "kantan.codecs.laws.discipline.EncoderTests.cogenE", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#cogenE:org.scalacheck.Cogen[E]", "kind" : "implicit abstract val"}, {"label" : "arbD", "tail" : ": Arbitrary[D]", "member" : "kantan.codecs.laws.discipline.EncoderTests.arbD", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#arbD:org.scalacheck.Arbitrary[D]", "kind" : "implicit abstract val"}, {"label" : "arbLegal", "tail" : "(): Arbitrary[LegalValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.EncoderTests.arbLegal", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#arbLegal:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]]", "kind" : "implicit abstract def"}, {"label" : "laws", "tail" : "(): EncoderLaws[E, D, T]", "member" : "kantan.codecs.laws.discipline.EncoderTests.laws", "link" : "kantan\/codecs\/laws\/discipline\/EncoderTests.html#laws:kantan.codecs.laws.EncoderLaws[E,D,T]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.equality", "shortDescription" : "", "object" : "kantan\/codecs\/laws\/discipline\/equality$.html", "members_object" : [{"label" : "eq", "tail" : "(a1: (B) => A, a2: (B) => A)(f: (A, A) => Boolean)(arg0: Arbitrary[B]): Boolean", "member" : "kantan.codecs.laws.discipline.equality.eq", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#eq[A,B](a1:B=>A,a2:B=>A)(f:(A,A)=>Boolean)(implicitevidence$1:org.scalacheck.Arbitrary[B]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/equality$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.laws.discipline.OptionalTests", "object" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Arbitrary[A], arg1: OptionalLaws[A]): OptionalTests[A]", "member" : "kantan.codecs.laws.discipline.OptionalTests.apply", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#apply[A](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:kantan.codecs.laws.OptionalLaws[A]):kantan.codecs.laws.discipline.OptionalTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "optional", "tail" : "(): RuleSet", "member" : "kantan.codecs.laws.discipline.OptionalTests.optional", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#optional:OptionalTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "arbA", "tail" : "(): Arbitrary[A]", "member" : "kantan.codecs.laws.discipline.OptionalTests.arbA", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#arbA:org.scalacheck.Arbitrary[A]", "kind" : "implicit abstract def"}, {"label" : "laws", "tail" : "(): OptionalLaws[A]", "member" : "kantan.codecs.laws.discipline.OptionalTests.laws", "link" : "kantan\/codecs\/laws\/discipline\/OptionalTests.html#laws:kantan.codecs.laws.OptionalLaws[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.PlatformSpecificDisciplinePackage", "trait" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html", "kind" : "trait", "members_trait" : [{"label" : "SerializableTests", "tail" : ": discipline.SerializableTests.type", "member" : "kantan.codecs.laws.discipline.PlatformSpecificDisciplinePackage.SerializableTests", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#SerializableTests:kantan.codecs.laws.discipline.SerializableTests.type", "kind" : "val"}, {"label" : "SerializableTests", "tail" : "", "member" : "kantan.codecs.laws.discipline.PlatformSpecificDisciplinePackage.SerializableTests", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#SerializableTests[A]=kantan.codecs.laws.discipline.SerializableTests[A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/PlatformSpecificDisciplinePackage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.SerializableTests", "object" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html", "members_object" : [{"label" : "apply", "tail" : "(l: SerializableLaws[A]): SerializableTests[A]", "member" : "kantan.codecs.laws.discipline.SerializableTests.apply", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#apply[A](implicitl:kantan.codecs.laws.SerializableLaws[A]):kantan.codecs.laws.discipline.SerializableTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "serializable", "tail" : "(): RuleSet", "member" : "kantan.codecs.laws.discipline.SerializableTests.serializable", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#serializable:SerializableTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): SerializableLaws[A]", "member" : "kantan.codecs.laws.discipline.SerializableTests.laws", "link" : "kantan\/codecs\/laws\/discipline\/SerializableTests.html#laws:kantan.codecs.laws.SerializableLaws[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.discipline.StringCodecTests", "shortDescription" : "", "object" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Arbitrary[D], arg1: Cogen[D], l: StringCodecLaws[D], al: Arbitrary[LegalString[D]]): StringCodecTests[D]", "member" : "kantan.codecs.laws.discipline.StringCodecTests.apply", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#apply[D](implicitevidence$1:org.scalacheck.Arbitrary[D],implicitevidence$2:org.scalacheck.Cogen[D],implicitl:kantan.codecs.laws.StringCodecLaws[D],implicital:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[D]]):kantan.codecs.laws.discipline.StringCodecTests[D]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/StringCodecTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.laws.discipline.StringDecoderTests", "shortDescription" : "", "object" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Arbitrary[D], arg1: Cogen[D], l: StringDecoderLaws[D], al: Arbitrary[LegalString[D]]): StringDecoderTests[D]", "member" : "kantan.codecs.laws.discipline.StringDecoderTests.apply", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#apply[D](implicitevidence$1:org.scalacheck.Arbitrary[D],implicitevidence$2:org.scalacheck.Cogen[D],implicitl:kantan.codecs.laws.StringDecoderLaws[D],implicital:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[D]]):kantan.codecs.laws.discipline.StringDecoderTests[D]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/StringDecoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.laws.discipline.StringEncoderTests", "shortDescription" : "", "object" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Arbitrary[D], l: StringEncoderLaws[D], al: Arbitrary[LegalString[D]]): StringEncoderTests[D]", "member" : "kantan.codecs.laws.discipline.StringEncoderTests.apply", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#apply[D](implicitevidence$1:org.scalacheck.Arbitrary[D],implicitl:kantan.codecs.laws.StringEncoderLaws[D],implicital:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[D]]):kantan.codecs.laws.discipline.StringEncoderTests[D]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/discipline\/StringEncoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "kantan.codecs.refined" : [{"name" : "kantan.codecs.refined.DecoderInstances", "trait" : "kantan\/codecs\/refined\/DecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "refinedDecoder", "tail" : "(decoder: Decoder[E, D, F, T], validate: Validate[D, P], refType: RefType[R], t: IsError[F]): Decoder[E, R[D, P], F, T]", "member" : "kantan.codecs.refined.DecoderInstances.refinedDecoder", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#refinedDecoder[E,D,F,T,P,R[_,_]](implicitdecoder:kantan.codecs.Decoder[E,D,F,T],implicitvalidate:eu.timepit.refined.api.Validate[D,P],implicitrefType:eu.timepit.refined.api.RefType[R],implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,R[D,P],F,T]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/refined\/DecoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/refined\/DecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.refined.EncoderInstances", "trait" : "kantan\/codecs\/refined\/EncoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "refinedEncoder", "tail" : "(encoder: Encoder[E, D, T], refType: RefType[R]): Encoder[E, R[D, P], T]", "member" : "kantan.codecs.refined.EncoderInstances.refinedEncoder", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#refinedEncoder[E,D,T,P,R[_,_]](implicitencoder:kantan.codecs.Encoder[E,D,T],implicitrefType:eu.timepit.refined.api.RefType[R]):kantan.codecs.Encoder[E,R[D,P],T]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/refined\/EncoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/refined\/EncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.codecs.strings.java8.laws.discipline" : [{"name" : "kantan.codecs.strings.java8.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "arbIllegalOffsetDateTimeString", "tail" : ": Arbitrary[IllegalString[OffsetDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalOffsetDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbIllegalOffsetDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.OffsetDateTime]]", "kind" : "implicit val"}, {"label" : "arbLegalOffsetDateTimeString", "tail" : ": Arbitrary[LegalString[OffsetDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalOffsetDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLegalOffsetDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.OffsetDateTime]]", "kind" : "implicit val"}, {"label" : "cogenOffsetDateTime", "tail" : ": Cogen[OffsetDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenOffsetDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenOffsetDateTime:org.scalacheck.Cogen[java.time.OffsetDateTime]", "kind" : "implicit val"}, {"label" : "arbOffsetDateTime", "tail" : ": Arbitrary[OffsetDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbOffsetDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbOffsetDateTime:org.scalacheck.Arbitrary[java.time.OffsetDateTime]", "kind" : "implicit val"}, {"label" : "arbIllegalZonedDateTimeString", "tail" : ": Arbitrary[IllegalString[ZonedDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalZonedDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbIllegalZonedDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.ZonedDateTime]]", "kind" : "implicit val"}, {"label" : "arbLegalZonedDateTimeString", "tail" : ": Arbitrary[LegalString[ZonedDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalZonedDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLegalZonedDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.ZonedDateTime]]", "kind" : "implicit val"}, {"label" : "cogenZonedDateTime", "tail" : ": Cogen[ZonedDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenZonedDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenZonedDateTime:org.scalacheck.Cogen[java.time.ZonedDateTime]", "kind" : "implicit val"}, {"label" : "arbZonedDateTime", "tail" : ": Arbitrary[ZonedDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbZonedDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbZonedDateTime:org.scalacheck.Arbitrary[java.time.ZonedDateTime]", "kind" : "implicit val"}, {"label" : "arbIllegalLocalDateTimeString", "tail" : ": Arbitrary[IllegalString[LocalDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalLocalDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbIllegalLocalDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.LocalDateTime]]", "kind" : "implicit val"}, {"label" : "arbLegalLocalDateTimeString", "tail" : ": Arbitrary[LegalString[LocalDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalLocalDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLegalLocalDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.LocalDateTime]]", "kind" : "implicit val"}, {"label" : "cogenLocalDateTime", "tail" : ": Cogen[LocalDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenLocalDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenLocalDateTime:org.scalacheck.Cogen[java.time.LocalDateTime]", "kind" : "implicit val"}, {"label" : "arbLocalDateTime", "tail" : ": Arbitrary[LocalDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLocalDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLocalDateTime:org.scalacheck.Arbitrary[java.time.LocalDateTime]", "kind" : "implicit val"}, {"label" : "arbitraryZoneId", "tail" : ": Arbitrary[ZoneId]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbitraryZoneId", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbitraryZoneId:org.scalacheck.Arbitrary[java.time.ZoneId]", "kind" : "implicit val"}, {"label" : "arbIllegalLocalTimeString", "tail" : ": Arbitrary[IllegalString[LocalTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalLocalTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbIllegalLocalTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.LocalTime]]", "kind" : "implicit val"}, {"label" : "arbLegalLocalTimeString", "tail" : ": Arbitrary[LegalString[LocalTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalLocalTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLegalLocalTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.LocalTime]]", "kind" : "implicit val"}, {"label" : "cogenLocalTime", "tail" : ": Cogen[LocalTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenLocalTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenLocalTime:org.scalacheck.Cogen[java.time.LocalTime]", "kind" : "implicit val"}, {"label" : "arbLocalTime", "tail" : ": Arbitrary[LocalTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLocalTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLocalTime:org.scalacheck.Arbitrary[java.time.LocalTime]", "kind" : "implicit val"}, {"label" : "arbIllegalLocalDateString", "tail" : ": Arbitrary[IllegalString[LocalDate]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalLocalDateString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbIllegalLocalDateString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.LocalDate]]", "kind" : "implicit val"}, {"label" : "arbLegalLocalDateString", "tail" : ": Arbitrary[LegalString[LocalDate]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalLocalDateString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLegalLocalDateString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.LocalDate]]", "kind" : "implicit val"}, {"label" : "cogenLocalDate", "tail" : ": Cogen[LocalDate]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenLocalDate", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenLocalDate:org.scalacheck.Cogen[java.time.LocalDate]", "kind" : "implicit val"}, {"label" : "arbLocalDate", "tail" : ": Arbitrary[LocalDate]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLocalDate", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLocalDate:org.scalacheck.Arbitrary[java.time.LocalDate]", "kind" : "implicit val"}, {"label" : "arbIllegalInstantString", "tail" : ": Arbitrary[IllegalString[Instant]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalInstantString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbIllegalInstantString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.Instant]]", "kind" : "implicit val"}, {"label" : "arbLegalInstantString", "tail" : ": Arbitrary[LegalString[Instant]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalInstantString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbLegalInstantString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.Instant]]", "kind" : "implicit val"}, {"label" : "cogenInstant", "tail" : ": Cogen[Instant]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenInstant", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#cogenInstant:org.scalacheck.Cogen[java.time.Instant]", "kind" : "implicit val"}, {"label" : "arbInstant", "tail" : ": Arbitrary[Instant]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbInstant", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#arbInstant:org.scalacheck.Arbitrary[java.time.Instant]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances", "trait" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "arbIllegalOffsetDateTimeString", "tail" : ": Arbitrary[IllegalString[OffsetDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalOffsetDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbIllegalOffsetDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.OffsetDateTime]]", "kind" : "implicit val"}, {"label" : "arbLegalOffsetDateTimeString", "tail" : ": Arbitrary[LegalString[OffsetDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalOffsetDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbLegalOffsetDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.OffsetDateTime]]", "kind" : "implicit val"}, {"label" : "cogenOffsetDateTime", "tail" : ": Cogen[OffsetDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenOffsetDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#cogenOffsetDateTime:org.scalacheck.Cogen[java.time.OffsetDateTime]", "kind" : "implicit val"}, {"label" : "arbOffsetDateTime", "tail" : ": Arbitrary[OffsetDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbOffsetDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbOffsetDateTime:org.scalacheck.Arbitrary[java.time.OffsetDateTime]", "kind" : "implicit val"}, {"label" : "arbIllegalZonedDateTimeString", "tail" : ": Arbitrary[IllegalString[ZonedDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalZonedDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbIllegalZonedDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.ZonedDateTime]]", "kind" : "implicit val"}, {"label" : "arbLegalZonedDateTimeString", "tail" : ": Arbitrary[LegalString[ZonedDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalZonedDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbLegalZonedDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.ZonedDateTime]]", "kind" : "implicit val"}, {"label" : "cogenZonedDateTime", "tail" : ": Cogen[ZonedDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenZonedDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#cogenZonedDateTime:org.scalacheck.Cogen[java.time.ZonedDateTime]", "kind" : "implicit val"}, {"label" : "arbZonedDateTime", "tail" : ": Arbitrary[ZonedDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbZonedDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbZonedDateTime:org.scalacheck.Arbitrary[java.time.ZonedDateTime]", "kind" : "implicit val"}, {"label" : "arbIllegalLocalDateTimeString", "tail" : ": Arbitrary[IllegalString[LocalDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalLocalDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbIllegalLocalDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.LocalDateTime]]", "kind" : "implicit val"}, {"label" : "arbLegalLocalDateTimeString", "tail" : ": Arbitrary[LegalString[LocalDateTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalLocalDateTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbLegalLocalDateTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.LocalDateTime]]", "kind" : "implicit val"}, {"label" : "cogenLocalDateTime", "tail" : ": Cogen[LocalDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenLocalDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#cogenLocalDateTime:org.scalacheck.Cogen[java.time.LocalDateTime]", "kind" : "implicit val"}, {"label" : "arbLocalDateTime", "tail" : ": Arbitrary[LocalDateTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLocalDateTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbLocalDateTime:org.scalacheck.Arbitrary[java.time.LocalDateTime]", "kind" : "implicit val"}, {"label" : "arbitraryZoneId", "tail" : ": Arbitrary[ZoneId]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbitraryZoneId", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbitraryZoneId:org.scalacheck.Arbitrary[java.time.ZoneId]", "kind" : "implicit val"}, {"label" : "arbIllegalLocalTimeString", "tail" : ": Arbitrary[IllegalString[LocalTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalLocalTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbIllegalLocalTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.LocalTime]]", "kind" : "implicit val"}, {"label" : "arbLegalLocalTimeString", "tail" : ": Arbitrary[LegalString[LocalTime]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalLocalTimeString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbLegalLocalTimeString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.LocalTime]]", "kind" : "implicit val"}, {"label" : "cogenLocalTime", "tail" : ": Cogen[LocalTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenLocalTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#cogenLocalTime:org.scalacheck.Cogen[java.time.LocalTime]", "kind" : "implicit val"}, {"label" : "arbLocalTime", "tail" : ": Arbitrary[LocalTime]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLocalTime", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbLocalTime:org.scalacheck.Arbitrary[java.time.LocalTime]", "kind" : "implicit val"}, {"label" : "arbIllegalLocalDateString", "tail" : ": Arbitrary[IllegalString[LocalDate]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalLocalDateString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbIllegalLocalDateString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.LocalDate]]", "kind" : "implicit val"}, {"label" : "arbLegalLocalDateString", "tail" : ": Arbitrary[LegalString[LocalDate]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalLocalDateString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbLegalLocalDateString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.LocalDate]]", "kind" : "implicit val"}, {"label" : "cogenLocalDate", "tail" : ": Cogen[LocalDate]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenLocalDate", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#cogenLocalDate:org.scalacheck.Cogen[java.time.LocalDate]", "kind" : "implicit val"}, {"label" : "arbLocalDate", "tail" : ": Arbitrary[LocalDate]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLocalDate", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbLocalDate:org.scalacheck.Arbitrary[java.time.LocalDate]", "kind" : "implicit val"}, {"label" : "arbIllegalInstantString", "tail" : ": Arbitrary[IllegalString[Instant]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbIllegalInstantString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbIllegalInstantString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[java.time.Instant]]", "kind" : "implicit val"}, {"label" : "arbLegalInstantString", "tail" : ": Arbitrary[LegalString[Instant]]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbLegalInstantString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbLegalInstantString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[java.time.Instant]]", "kind" : "implicit val"}, {"label" : "cogenInstant", "tail" : ": Cogen[Instant]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.cogenInstant", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#cogenInstant:org.scalacheck.Cogen[java.time.Instant]", "kind" : "implicit val"}, {"label" : "arbInstant", "tail" : ": Arbitrary[Instant]", "member" : "kantan.codecs.strings.java8.laws.discipline.ArbitraryInstances.arbInstant", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#arbInstant:org.scalacheck.Arbitrary[java.time.Instant]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/strings\/java8\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.codecs.scalaz" : [{"name" : "kantan.codecs.scalaz.CommonInstances", "trait" : "kantan\/codecs\/scalaz\/CommonInstances.html", "kind" : "trait", "members_trait" : [{"label" : "stringDecodeErrorEqual", "tail" : ": Equal[DecodeError]", "member" : "kantan.codecs.scalaz.CommonInstances.stringDecodeErrorEqual", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#stringDecodeErrorEqual:scalaz.Equal[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "maybeEncoder", "tail" : "(ea: Encoder[E, Option[D], T]): Encoder[E, Maybe[D], T]", "member" : "kantan.codecs.scalaz.CommonInstances.maybeEncoder", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#maybeEncoder[E,D,T](implicitea:kantan.codecs.Encoder[E,Option[D],T]):kantan.codecs.Encoder[E,scalaz.Maybe[D],T]", "kind" : "implicit def"}, {"label" : "maybeDecoder", "tail" : "(da: Decoder[E, Option[D], F, T]): Decoder[E, Maybe[D], F, T]", "member" : "kantan.codecs.scalaz.CommonInstances.maybeDecoder", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#maybeDecoder[E,D,F,T](implicitda:kantan.codecs.Decoder[E,Option[D],F,T]):kantan.codecs.Decoder[E,scalaz.Maybe[D],F,T]", "kind" : "implicit def"}, {"label" : "disjunctionEncoder", "tail" : "(ea: Encoder[E, DA, T], eb: Encoder[E, DB, T]): Encoder[E, \\\/[DA, DB], T]", "member" : "kantan.codecs.scalaz.CommonInstances.disjunctionEncoder", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#disjunctionEncoder[E,DA,DB,T](implicitea:kantan.codecs.Encoder[E,DA,T],impliciteb:kantan.codecs.Encoder[E,DB,T]):kantan.codecs.Encoder[E,DA\\\/DB,T]", "kind" : "implicit def"}, {"label" : "disjunctionDecoder", "tail" : "(da: Decoder[E, DA, F, T], db: Decoder[E, DB, F, T]): Decoder[E, \\\/[DA, DB], F, T]", "member" : "kantan.codecs.scalaz.CommonInstances.disjunctionDecoder", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#disjunctionDecoder[E,DA,DB,F,T](implicitda:kantan.codecs.Decoder[E,DA,F,T],implicitdb:kantan.codecs.Decoder[E,DB,F,T]):kantan.codecs.Decoder[E,DA\\\/DB,F,T]", "kind" : "implicit def"}, {"label" : "isErrorShow", "tail" : "(): Show[E]", "member" : "kantan.codecs.scalaz.CommonInstances.isErrorShow", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#isErrorShow[E<:kantan.codecs.error.Error]:scalaz.Show[E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/scalaz\/CommonInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.scalaz.DecoderInstances", "trait" : "kantan\/codecs\/scalaz\/DecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "decoderInstances", "tail" : "(): MonadError[[A]Decoder[E, A, F, T], F] with Plus[[A]Decoder[E, A, F, T]]", "member" : "kantan.codecs.scalaz.DecoderInstances.decoderInstances", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#decoderInstances[E,F,T]:scalaz.MonadError[[A]kantan.codecs.Decoder[E,A,F,T],F]withscalaz.Plus[[A]kantan.codecs.Decoder[E,A,F,T]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/scalaz\/DecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.scalaz.EncoderInstances", "trait" : "kantan\/codecs\/scalaz\/EncoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "encoderContravariant", "tail" : "(): Contravariant[[A]Encoder[E, A, T]]", "member" : "kantan.codecs.scalaz.EncoderInstances.encoderContravariant", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#encoderContravariant[E,T]:scalaz.Contravariant[[A]kantan.codecs.Encoder[E,A,T]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/scalaz\/EncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.codecs.laws" : [{"name" : "kantan.codecs.laws.CodecLaws", "object" : "kantan\/codecs\/laws\/CodecLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(de: Decoder[E, D, F, T], ee: Encoder[E, D, T]): CodecLaws[E, D, F, T]", "member" : "kantan.codecs.laws.CodecLaws.apply", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#apply[E,D,F,T](implicitde:kantan.codecs.Decoder[E,D,F,T],implicitee:kantan.codecs.Encoder[E,D,T]):kantan.codecs.laws.CodecLaws[E,D,F,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/CodecLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/CodecLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/laws\/CodecLaws.html", "kind" : "trait", "members_trait" : [{"label" : "roundTripDecoding", "tail" : "(v: LegalValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.CodecLaws.roundTripDecoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#roundTripDecoding(v:kantan.codecs.laws.CodecValue.LegalValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "roundTripEncoding", "tail" : "(d: D): Boolean", "member" : "kantan.codecs.laws.CodecLaws.roundTripEncoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#roundTripEncoding(d:D):Boolean", "kind" : "def"}, {"label" : "imapEncodedCompositionDecoding", "tail" : "(b: B, f1: (E) => A, f2: (A) => E, g1: (A) => B, g2: (B) => A): Boolean", "member" : "kantan.codecs.laws.CodecLaws.imapEncodedCompositionDecoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#imapEncodedCompositionDecoding[A,B](b:B,f1:E=>A,f2:A=>E,g1:A=>B,g2:B=>A):Boolean", "kind" : "def"}, {"label" : "imapEncodedCompositionEncoding", "tail" : "(d: D, f1: (E) => A, f2: (A) => E, g1: (A) => B, g2: (B) => A): Boolean", "member" : "kantan.codecs.laws.CodecLaws.imapEncodedCompositionEncoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#imapEncodedCompositionEncoding[A,B](d:D,f1:E=>A,f2:A=>E,g1:A=>B,g2:B=>A):Boolean", "kind" : "def"}, {"label" : "imapEncodedIdentityDecoding", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.CodecLaws.imapEncodedIdentityDecoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#imapEncodedIdentityDecoding(v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "imapEncodedIdentityEncoding", "tail" : "(d: D): Boolean", "member" : "kantan.codecs.laws.CodecLaws.imapEncodedIdentityEncoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#imapEncodedIdentityEncoding(d:D):Boolean", "kind" : "def"}, {"label" : "imapCompositionDecoding", "tail" : "(v: CodecValue[E, D, T], f1: (D) => A, f2: (A) => D, g1: (A) => B, g2: (B) => A): Boolean", "member" : "kantan.codecs.laws.CodecLaws.imapCompositionDecoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#imapCompositionDecoding[A,B](v:kantan.codecs.laws.CodecValue[E,D,T],f1:D=>A,f2:A=>D,g1:A=>B,g2:B=>A):Boolean", "kind" : "def"}, {"label" : "imapCompositionEncoding", "tail" : "(b: B, f1: (D) => A, f2: (A) => D, g1: (A) => B, g2: (B) => A): Boolean", "member" : "kantan.codecs.laws.CodecLaws.imapCompositionEncoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#imapCompositionEncoding[A,B](b:B,f1:D=>A,f2:A=>D,g1:A=>B,g2:B=>A):Boolean", "kind" : "def"}, {"label" : "imapIdentityDecoding", "tail" : "(d: D): Boolean", "member" : "kantan.codecs.laws.CodecLaws.imapIdentityDecoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#imapIdentityDecoding(d:D):Boolean", "kind" : "def"}, {"label" : "imapIdentityEncoding", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.CodecLaws.imapIdentityEncoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#imapIdentityEncoding(v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "leftMapCompositionEncoding", "tail" : "(d: D, f: (F) => A, g: (A) => B): Boolean", "member" : "kantan.codecs.laws.CodecLaws.leftMapCompositionEncoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#leftMapCompositionEncoding[A,B](d:D,f:F=>A,g:A=>B):Boolean", "kind" : "def"}, {"label" : "leftMapIdentityEncoding", "tail" : "(d: D): Boolean", "member" : "kantan.codecs.laws.CodecLaws.leftMapIdentityEncoding", "link" : "kantan\/codecs\/laws\/CodecLaws.html#leftMapIdentityEncoding[A](d:D):Boolean", "kind" : "def"}, {"label" : "codec", "tail" : ": Codec[E, D, F, T]", "member" : "kantan.codecs.laws.CodecLaws.codec", "link" : "kantan\/codecs\/laws\/CodecLaws.html#codec:kantan.codecs.Codec[E,D,F,T]", "kind" : "implicit lazy val"}, {"label" : "contramapComposition", "tail" : "(b: B, f: (A) => D, g: (B) => A): Boolean", "member" : "kantan.codecs.laws.EncoderLaws.contramapComposition", "link" : "kantan\/codecs\/laws\/CodecLaws.html#contramapComposition[A,B](b:B,f:A=>D,g:B=>A):Boolean", "kind" : "def"}, {"label" : "contramapIdentity", "tail" : "(d: D): Boolean", "member" : "kantan.codecs.laws.EncoderLaws.contramapIdentity", "link" : "kantan\/codecs\/laws\/CodecLaws.html#contramapIdentity(d:D):Boolean", "kind" : "def"}, {"label" : "mapEncodedComposition", "tail" : "(d: D, f: (E) => A, g: (A) => B): Boolean", "member" : "kantan.codecs.laws.EncoderLaws.mapEncodedComposition", "link" : "kantan\/codecs\/laws\/CodecLaws.html#mapEncodedComposition[A,B](d:D,f:E=>A,g:A=>B):Boolean", "kind" : "def"}, {"label" : "mapEncodedIdentity", "tail" : "(d: D): Boolean", "member" : "kantan.codecs.laws.EncoderLaws.mapEncodedIdentity", "link" : "kantan\/codecs\/laws\/CodecLaws.html#mapEncodedIdentity(d:D):Boolean", "kind" : "def"}, {"label" : "encode", "tail" : "(v: LegalValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.EncoderLaws.encode", "link" : "kantan\/codecs\/laws\/CodecLaws.html#encode(v:kantan.codecs.laws.CodecValue.LegalValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "emapComposition", "tail" : "(v: CodecValue[E, D, T], f: (D) => Either[F, A], g: (A) => Either[F, B]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.emapComposition", "link" : "kantan\/codecs\/laws\/CodecLaws.html#emapComposition[A,B](v:kantan.codecs.laws.CodecValue[E,D,T],f:D=>Either[F,A],g:A=>Either[F,B]):Boolean", "kind" : "def"}, {"label" : "emapIdentity", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.emapIdentity", "link" : "kantan\/codecs\/laws\/CodecLaws.html#emapIdentity(v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "contramapEncodedComposition", "tail" : "(b: B, f: (A) => E, g: (B) => A): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.contramapEncodedComposition", "link" : "kantan\/codecs\/laws\/CodecLaws.html#contramapEncodedComposition[A,B](b:B,f:A=>E,g:B=>A):Boolean", "kind" : "def"}, {"label" : "contramapEncodedIdentity", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.contramapEncodedIdentity", "link" : "kantan\/codecs\/laws\/CodecLaws.html#contramapEncodedIdentity(v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "leftMapComposition", "tail" : "(v: CodecValue[E, D, T], f: (F) => A, g: (A) => B): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.leftMapComposition", "link" : "kantan\/codecs\/laws\/CodecLaws.html#leftMapComposition[A,B](v:kantan.codecs.laws.CodecValue[E,D,T],f:F=>A,g:A=>B):Boolean", "kind" : "def"}, {"label" : "leftMapIdentity", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.leftMapIdentity", "link" : "kantan\/codecs\/laws\/CodecLaws.html#leftMapIdentity[A](v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "mapComposition", "tail" : "(v: CodecValue[E, D, T], f: (D) => A, g: (A) => B): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.mapComposition", "link" : "kantan\/codecs\/laws\/CodecLaws.html#mapComposition[A,B](v:kantan.codecs.laws.CodecValue[E,D,T],f:D=>A,g:A=>B):Boolean", "kind" : "def"}, {"label" : "mapIdentity", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.mapIdentity", "link" : "kantan\/codecs\/laws\/CodecLaws.html#mapIdentity(v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "decodeFailure", "tail" : "(v: IllegalValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.decodeFailure", "link" : "kantan\/codecs\/laws\/CodecLaws.html#decodeFailure(v:kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "decode", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.decode", "link" : "kantan\/codecs\/laws\/CodecLaws.html#decode(v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/CodecLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/CodecLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/CodecLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/CodecLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/CodecLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/CodecLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/CodecLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/CodecLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/CodecLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/CodecLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/CodecLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/CodecLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/CodecLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/CodecLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/CodecLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/CodecLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encoder", "tail" : "(): Encoder[E, D, T]", "member" : "kantan.codecs.laws.EncoderLaws.encoder", "link" : "kantan\/codecs\/laws\/CodecLaws.html#encoder:kantan.codecs.Encoder[E,D,T]", "kind" : "abstract def"}, {"label" : "decoder", "tail" : "(): Decoder[E, D, F, T]", "member" : "kantan.codecs.laws.DecoderLaws.decoder", "link" : "kantan\/codecs\/laws\/CodecLaws.html#decoder:kantan.codecs.Decoder[E,D,F,T]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.CodecValue", "shortDescription" : "", "object" : "kantan\/codecs\/laws\/CodecValue$.html", "members_class" : [{"label" : "isIllegal", "tail" : "(): Boolean", "member" : "kantan.codecs.laws.CodecValue.isIllegal", "link" : "kantan\/codecs\/laws\/CodecValue.html#isIllegal:Boolean", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/codecs\/laws\/CodecValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/codecs\/laws\/CodecValue.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/codecs\/laws\/CodecValue.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/codecs\/laws\/CodecValue.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/CodecValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/CodecValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/CodecValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/CodecValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/CodecValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/CodecValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/CodecValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/CodecValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/CodecValue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/CodecValue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/CodecValue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/CodecValue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/CodecValue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/CodecValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/CodecValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/CodecValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isLegal", "tail" : "(): Boolean", "member" : "kantan.codecs.laws.CodecValue.isLegal", "link" : "kantan\/codecs\/laws\/CodecValue.html#isLegal:Boolean", "kind" : "abstract def"}, {"label" : "tag", "tail" : "(): CodecValue[E, D, TT]", "member" : "kantan.codecs.laws.CodecValue.tag", "link" : "kantan\/codecs\/laws\/CodecValue.html#tag[TT]:kantan.codecs.laws.CodecValue[E,D,TT]", "kind" : "abstract def"}, {"label" : "mapDecoded", "tail" : "(f: (D) => DD): CodecValue[E, DD, T]", "member" : "kantan.codecs.laws.CodecValue.mapDecoded", "link" : "kantan\/codecs\/laws\/CodecValue.html#mapDecoded[DD](f:D=>DD):kantan.codecs.laws.CodecValue[E,DD,T]", "kind" : "abstract def"}, {"label" : "mapEncoded", "tail" : "(f: (E) => EE): CodecValue[EE, D, T]", "member" : "kantan.codecs.laws.CodecValue.mapEncoded", "link" : "kantan\/codecs\/laws\/CodecValue.html#mapEncoded[EE](f:E=>EE):kantan.codecs.laws.CodecValue[EE,D,T]", "kind" : "abstract def"}, {"label" : "encoded", "tail" : "(): E", "member" : "kantan.codecs.laws.CodecValue.encoded", "link" : "kantan\/codecs\/laws\/CodecValue.html#encoded:E", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/codecs\/laws\/CodecValue.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/codecs\/laws\/CodecValue.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/codecs\/laws\/CodecValue.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "IllegalValue", "tail" : "", "member" : "kantan.codecs.laws.CodecValue.IllegalValue", "link" : "kantan\/codecs\/laws\/CodecValue$.html#IllegalValue[E,D,T]extendsCodecValue[E,D,T]withProductwithSerializable", "kind" : "final case class"}, {"label" : "LegalValue", "tail" : "", "member" : "kantan.codecs.laws.CodecValue.LegalValue", "link" : "kantan\/codecs\/laws\/CodecValue$.html#LegalValue[E,D,T]extendsCodecValue[E,D,T]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/CodecValue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/CodecValue$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/CodecValue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/CodecValue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/CodecValue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/CodecValue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/CodecValue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecValue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecValue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/CodecValue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/CodecValue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/CodecValue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/CodecValue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/CodecValue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/CodecValue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/CodecValue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/CodecValue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/CodecValue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/CodecValue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/laws\/CodecValue.html", "kind" : "class"}, {"name" : "kantan.codecs.laws.DecoderLaws", "object" : "kantan\/codecs\/laws\/DecoderLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(de: Decoder[E, D, F, T]): DecoderLaws[E, D, F, T]", "member" : "kantan.codecs.laws.DecoderLaws.apply", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#apply[E,D,F,T](implicitde:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.laws.DecoderLaws[E,D,F,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/DecoderLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/laws\/DecoderLaws.html", "kind" : "trait", "members_trait" : [{"label" : "emapComposition", "tail" : "(v: CodecValue[E, D, T], f: (D) => Either[F, A], g: (A) => Either[F, B]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.emapComposition", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#emapComposition[A,B](v:kantan.codecs.laws.CodecValue[E,D,T],f:D=>Either[F,A],g:A=>Either[F,B]):Boolean", "kind" : "def"}, {"label" : "emapIdentity", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.emapIdentity", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#emapIdentity(v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "contramapEncodedComposition", "tail" : "(b: B, f: (A) => E, g: (B) => A): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.contramapEncodedComposition", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#contramapEncodedComposition[A,B](b:B,f:A=>E,g:B=>A):Boolean", "kind" : "def"}, {"label" : "contramapEncodedIdentity", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.contramapEncodedIdentity", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#contramapEncodedIdentity(v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "leftMapComposition", "tail" : "(v: CodecValue[E, D, T], f: (F) => A, g: (A) => B): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.leftMapComposition", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#leftMapComposition[A,B](v:kantan.codecs.laws.CodecValue[E,D,T],f:F=>A,g:A=>B):Boolean", "kind" : "def"}, {"label" : "leftMapIdentity", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.leftMapIdentity", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#leftMapIdentity[A](v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "mapComposition", "tail" : "(v: CodecValue[E, D, T], f: (D) => A, g: (A) => B): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.mapComposition", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#mapComposition[A,B](v:kantan.codecs.laws.CodecValue[E,D,T],f:D=>A,g:A=>B):Boolean", "kind" : "def"}, {"label" : "mapIdentity", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.mapIdentity", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#mapIdentity(v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "decodeFailure", "tail" : "(v: IllegalValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.decodeFailure", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#decodeFailure(v:kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "decode", "tail" : "(v: CodecValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.DecoderLaws.decode", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#decode(v:kantan.codecs.laws.CodecValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/DecoderLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decoder", "tail" : "(): Decoder[E, D, F, T]", "member" : "kantan.codecs.laws.DecoderLaws.decoder", "link" : "kantan\/codecs\/laws\/DecoderLaws.html#decoder:kantan.codecs.Decoder[E,D,F,T]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.EncoderLaws", "object" : "kantan\/codecs\/laws\/EncoderLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(ee: Encoder[E, D, T]): EncoderLaws[E, D, T]", "member" : "kantan.codecs.laws.EncoderLaws.apply", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#apply[E,D,T](implicitee:kantan.codecs.Encoder[E,D,T]):kantan.codecs.laws.EncoderLaws[E,D,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/EncoderLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/laws\/EncoderLaws.html", "kind" : "trait", "members_trait" : [{"label" : "contramapComposition", "tail" : "(b: B, f: (A) => D, g: (B) => A): Boolean", "member" : "kantan.codecs.laws.EncoderLaws.contramapComposition", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#contramapComposition[A,B](b:B,f:A=>D,g:B=>A):Boolean", "kind" : "def"}, {"label" : "contramapIdentity", "tail" : "(d: D): Boolean", "member" : "kantan.codecs.laws.EncoderLaws.contramapIdentity", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#contramapIdentity(d:D):Boolean", "kind" : "def"}, {"label" : "mapEncodedComposition", "tail" : "(d: D, f: (E) => A, g: (A) => B): Boolean", "member" : "kantan.codecs.laws.EncoderLaws.mapEncodedComposition", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#mapEncodedComposition[A,B](d:D,f:E=>A,g:A=>B):Boolean", "kind" : "def"}, {"label" : "mapEncodedIdentity", "tail" : "(d: D): Boolean", "member" : "kantan.codecs.laws.EncoderLaws.mapEncodedIdentity", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#mapEncodedIdentity(d:D):Boolean", "kind" : "def"}, {"label" : "encode", "tail" : "(v: LegalValue[E, D, T]): Boolean", "member" : "kantan.codecs.laws.EncoderLaws.encode", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#encode(v:kantan.codecs.laws.CodecValue.LegalValue[E,D,T]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/EncoderLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encoder", "tail" : "(): Encoder[E, D, T]", "member" : "kantan.codecs.laws.EncoderLaws.encoder", "link" : "kantan\/codecs\/laws\/EncoderLaws.html#encoder:kantan.codecs.Encoder[E,D,T]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.OptionalLaws", "object" : "kantan\/codecs\/laws\/OptionalLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Optional[A]): OptionalLaws[A]", "member" : "kantan.codecs.laws.OptionalLaws.apply", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#apply[A](implicitevidence$1:kantan.codecs.Optional[A]):kantan.codecs.laws.OptionalLaws[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/OptionalLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/laws\/OptionalLaws.html", "kind" : "trait", "members_trait" : [{"label" : "emptyUniqueness", "tail" : "(a: A): Boolean", "member" : "kantan.codecs.laws.OptionalLaws.emptyUniqueness", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#emptyUniqueness(a:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/OptionalLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "optional", "tail" : "(): Optional[A]", "member" : "kantan.codecs.laws.OptionalLaws.optional", "link" : "kantan\/codecs\/laws\/OptionalLaws.html#optional:kantan.codecs.Optional[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.laws.SerializableLaws", "object" : "kantan\/codecs\/laws\/SerializableLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(a: A): SerializableLaws[A]", "member" : "kantan.codecs.laws.SerializableLaws.apply", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#apply[A](implicita:A):kantan.codecs.laws.SerializableLaws[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/SerializableLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/laws\/SerializableLaws.html", "kind" : "trait", "members_trait" : [{"label" : "serializable", "tail" : "(): Boolean", "member" : "kantan.codecs.laws.SerializableLaws.serializable", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#serializable():Boolean", "kind" : "def"}, {"label" : "deserialize", "tail" : "(data: Array[Byte]): Any", "member" : "kantan.codecs.laws.SerializableLaws.deserialize", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#deserialize(data:Array[Byte]):Any", "kind" : "def"}, {"label" : "serialize", "tail" : "(o: Any): Array[Byte]", "member" : "kantan.codecs.laws.SerializableLaws.serialize", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#serialize(o:Any):Array[Byte]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/laws\/SerializableLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): A", "member" : "kantan.codecs.laws.SerializableLaws.value", "link" : "kantan\/codecs\/laws\/SerializableLaws.html#value:A", "kind" : "abstract def"}], "shortDescription" : "Laws for serializable type class instances."}], "kantan.codecs.cats.laws" : [], "kantan.codecs.libra" : [{"name" : "kantan.codecs.libra.DecoderInstances", "trait" : "kantan\/codecs\/libra\/DecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "libraQuantityDecoder", "tail" : "(decoder: Decoder[E, D, F, T]): Decoder[E, Quantity[D, X], F, T]", "member" : "kantan.codecs.libra.DecoderInstances.libraQuantityDecoder", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#libraQuantityDecoder[E,D,F,T,X<:shapeless.HList](implicitdecoder:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,libra.Quantity[D,X],F,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/libra\/DecoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/libra\/DecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.libra.EncoderInstances", "trait" : "kantan\/codecs\/libra\/EncoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "libraQuantyEncoder", "tail" : "(encoder: Encoder[E, D, T]): Encoder[E, Quantity[D, X], T]", "member" : "kantan.codecs.libra.EncoderInstances.libraQuantyEncoder", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#libraQuantyEncoder[E,D,T,X<:shapeless.HList](implicitencoder:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,libra.Quantity[D,X],T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/libra\/EncoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/libra\/EncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.codecs.resource" : [{"name" : "kantan.codecs.resource.Closeable", "object" : "kantan\/codecs\/resource\/Closeable$.html", "members_object" : [{"label" : "autoCloseable", "tail" : "(): Closeable[A]", "member" : "kantan.codecs.resource.Closeable.autoCloseable", "link" : "kantan\/codecs\/resource\/Closeable$.html#autoCloseable[A<:AutoCloseable]:kantan.codecs.resource.Closeable[A]", "kind" : "implicit def"}, {"label" : "from", "tail" : "(f: (A) => CloseResult): Closeable[A]", "member" : "kantan.codecs.resource.Closeable.from", "link" : "kantan\/codecs\/resource\/Closeable$.html#from[A](f:A=>kantan.codecs.resource.CloseResult):kantan.codecs.resource.Closeable[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Closeable[A]): Closeable[A]", "member" : "kantan.codecs.resource.Closeable.apply", "link" : "kantan\/codecs\/resource\/Closeable$.html#apply[A](implicitev:kantan.codecs.resource.Closeable[A]):kantan.codecs.resource.Closeable[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/Closeable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/Closeable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/Closeable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/Closeable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/Closeable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/Closeable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/Closeable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Closeable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Closeable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Closeable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/Closeable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/Closeable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/Closeable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/Closeable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/Closeable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/Closeable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/Closeable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/Closeable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/Closeable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/resource\/Closeable.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/Closeable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/Closeable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/Closeable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/Closeable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/Closeable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/Closeable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/Closeable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Closeable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Closeable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Closeable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/Closeable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/Closeable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/Closeable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/Closeable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/Closeable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/Closeable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/Closeable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/Closeable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/Closeable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "close", "tail" : "(a: A): CloseResult", "member" : "kantan.codecs.resource.Closeable.close", "link" : "kantan\/codecs\/resource\/Closeable.html#close(a:A):kantan.codecs.resource.CloseResult", "kind" : "abstract def"}], "shortDescription" : "Type class for all types that can be closed."}, {"name" : "kantan.codecs.resource.CloseResult", "shortDescription" : "", "object" : "kantan\/codecs\/resource\/CloseResult$.html", "members_object" : [{"label" : "apply", "tail" : "(c: => U): CloseResult", "member" : "kantan.codecs.resource.CloseResult.apply", "link" : "kantan\/codecs\/resource\/CloseResult$.html#apply[U](c:=>U):kantan.codecs.resource.CloseResult", "kind" : "def"}, {"label" : "failure", "tail" : "(error: CloseError): CloseResult", "member" : "kantan.codecs.resource.CloseResult.failure", "link" : "kantan\/codecs\/resource\/CloseResult$.html#failure(error:kantan.codecs.resource.ResourceError.CloseError):kantan.codecs.resource.CloseResult", "kind" : "def"}, {"label" : "success", "tail" : ": CloseResult", "member" : "kantan.codecs.resource.CloseResult.success", "link" : "kantan\/codecs\/resource\/CloseResult$.html#success:kantan.codecs.resource.CloseResult", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/CloseResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/CloseResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/CloseResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/CloseResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/CloseResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/CloseResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/CloseResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/CloseResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/CloseResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/CloseResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/CloseResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/CloseResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/CloseResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/CloseResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/CloseResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/CloseResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/CloseResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/CloseResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/CloseResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.resource.InputResource", "shortDescription" : "Provides instance summoning methods for InputResource.", "object" : "kantan\/codecs\/resource\/InputResource$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: InputResource[A]): InputResource[A]", "member" : "kantan.codecs.resource.InputResource.apply", "link" : "kantan\/codecs\/resource\/InputResource$.html#apply[A](implicitev:kantan.codecs.resource.InputResource[A]):kantan.codecs.resource.InputResource[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/InputResource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/InputResource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/InputResource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/InputResource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/InputResource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/InputResource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/InputResource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/InputResource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/InputResource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/InputResource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/InputResource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/InputResource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/InputResource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/InputResource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/InputResource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/InputResource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/InputResource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/InputResource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/InputResource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.resource.OpenResult", "shortDescription" : "", "object" : "kantan\/codecs\/resource\/OpenResult$.html", "members_object" : [{"label" : "fromThrowable", "tail" : "(t: Throwable): OpenError", "member" : "kantan.codecs.ResultCompanion.WithError.fromThrowable", "link" : "kantan\/codecs\/resource\/OpenResult$.html#fromThrowable(t:Throwable):F", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Either[OpenError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/codecs\/resource\/OpenResult$.html#fromTry[S](t:scala.util.Try[S]):Either[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: => S): Either[OpenError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/codecs\/resource\/OpenResult$.html#apply[S](s:=>S):Either[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: OpenError): Either[OpenError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/codecs\/resource\/OpenResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[OpenError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/codecs\/resource\/OpenResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[OpenError, S]])(bf: BuildFrom[M[Either[OpenError, S]], S, M[S]]): Either[OpenError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/codecs\/resource\/OpenResult$.html#sequence[S,M[X]<:IterableOnce[X]](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/OpenResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/OpenResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/OpenResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/OpenResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/OpenResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/OpenResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/OpenResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/OpenResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/OpenResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/OpenResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/OpenResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/OpenResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/OpenResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/OpenResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/OpenResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/OpenResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/OpenResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/OpenResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/OpenResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.resource.OutputResource", "shortDescription" : "Provides instance summoning methods for OutputResource.", "object" : "kantan\/codecs\/resource\/OutputResource$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: OutputResource[A]): OutputResource[A]", "member" : "kantan.codecs.resource.OutputResource.apply", "link" : "kantan\/codecs\/resource\/OutputResource$.html#apply[A](implicitev:kantan.codecs.resource.OutputResource[A]):kantan.codecs.resource.OutputResource[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/OutputResource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/OutputResource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/OutputResource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/OutputResource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/OutputResource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/OutputResource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/OutputResource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/OutputResource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/OutputResource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/OutputResource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/OutputResource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/OutputResource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/OutputResource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/OutputResource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/OutputResource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/OutputResource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/OutputResource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/OutputResource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/OutputResource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.resource.PlatformSpecificInstances", "trait" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html", "kind" : "trait", "members_trait" : [{"label" : "uriInputResource", "tail" : ": InputResource[URI]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.uriInputResource", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#uriInputResource:kantan.codecs.resource.InputResource[java.net.URI]", "kind" : "implicit val"}, {"label" : "urlInputResource", "tail" : ": InputResource[URL]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.urlInputResource", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#urlInputResource:kantan.codecs.resource.InputResource[java.net.URL]", "kind" : "implicit val"}, {"label" : "charsReaderResource", "tail" : ": ReaderResource[Array[Char]]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.charsReaderResource", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#charsReaderResource:kantan.codecs.resource.ReaderResource[Array[Char]]", "kind" : "implicit val"}, {"label" : "fileOutputResource", "tail" : ": OutputResource[File]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.fileOutputResource", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#fileOutputResource:kantan.codecs.resource.OutputResource[java.io.File]", "kind" : "implicit val"}, {"label" : "fileInputResource", "tail" : ": InputResource[File]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.fileInputResource", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#fileInputResource:kantan.codecs.resource.InputResource[java.io.File]", "kind" : "implicit val"}, {"label" : "pathOutputResource", "tail" : ": OutputResource[Path]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.pathOutputResource", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#pathOutputResource:kantan.codecs.resource.OutputResource[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "pathInputResource", "tail" : ": InputResource[Path]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.pathInputResource", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#pathInputResource:kantan.codecs.resource.InputResource[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/PlatformSpecificInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "JVM specific instances of Resource."}, {"name" : "kantan.codecs.resource.ProcessResult", "shortDescription" : "", "object" : "kantan\/codecs\/resource\/ProcessResult$.html", "members_object" : [{"label" : "fromThrowable", "tail" : "(t: Throwable): ProcessError", "member" : "kantan.codecs.ResultCompanion.WithError.fromThrowable", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#fromThrowable(t:Throwable):F", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Either[ProcessError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#fromTry[S](t:scala.util.Try[S]):Either[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: => S): Either[ProcessError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#apply[S](s:=>S):Either[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: ProcessError): Either[ProcessError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[ProcessError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[ProcessError, S]])(bf: BuildFrom[M[Either[ProcessError, S]], S, M[S]]): Either[ProcessError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#sequence[S,M[X]<:IterableOnce[X]](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/ProcessResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/ProcessResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.resource.ReaderResource", "shortDescription" : "Provides instance summoning methods for ReaderResource.", "object" : "kantan\/codecs\/resource\/ReaderResource$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: ReaderResource[A]): ReaderResource[A]", "member" : "kantan.codecs.resource.ReaderResource.apply", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#apply[A](implicitev:kantan.codecs.resource.ReaderResource[A]):kantan.codecs.resource.ReaderResource[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/ReaderResource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/ReaderResource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.resource.Resource", "object" : "kantan\/codecs\/resource\/Resource$.html", "members_object" : [{"label" : "stringReaderResource", "tail" : ": ReaderResource[String]", "member" : "kantan.codecs.resource.Resource.stringReaderResource", "link" : "kantan\/codecs\/resource\/Resource$.html#stringReaderResource:kantan.codecs.resource.ReaderResource[String]", "kind" : "implicit val"}, {"label" : "bytesInputResource", "tail" : ": InputResource[Array[Byte]]", "member" : "kantan.codecs.resource.Resource.bytesInputResource", "link" : "kantan\/codecs\/resource\/Resource$.html#bytesInputResource:kantan.codecs.resource.InputResource[Array[Byte]]", "kind" : "implicit val"}, {"label" : "writerFromStream", "tail" : "(arg0: OutputResource[A], codec: scala.io.Codec): WriterResource[A]", "member" : "kantan.codecs.resource.Resource.writerFromStream", "link" : "kantan\/codecs\/resource\/Resource$.html#writerFromStream[A](implicitevidence$2:kantan.codecs.resource.OutputResource[A],implicitcodec:scala.io.Codec):kantan.codecs.resource.WriterResource[A]", "kind" : "implicit def"}, {"label" : "readerFromStream", "tail" : "(arg0: InputResource[A], codec: scala.io.Codec): ReaderResource[A]", "member" : "kantan.codecs.resource.Resource.readerFromStream", "link" : "kantan\/codecs\/resource\/Resource$.html#readerFromStream[A](implicitevidence$1:kantan.codecs.resource.InputResource[A],implicitcodec:scala.io.Codec):kantan.codecs.resource.ReaderResource[A]", "kind" : "implicit def"}, {"label" : "writerWriterResource", "tail" : "(): WriterResource[W]", "member" : "kantan.codecs.resource.Resource.writerWriterResource", "link" : "kantan\/codecs\/resource\/Resource$.html#writerWriterResource[W<:java.io.Writer]:kantan.codecs.resource.WriterResource[W]", "kind" : "implicit def"}, {"label" : "streamOutputResource", "tail" : "(): OutputResource[O]", "member" : "kantan.codecs.resource.Resource.streamOutputResource", "link" : "kantan\/codecs\/resource\/Resource$.html#streamOutputResource[O<:java.io.OutputStream]:kantan.codecs.resource.OutputResource[O]", "kind" : "implicit def"}, {"label" : "readerReaderResource", "tail" : "(): ReaderResource[R]", "member" : "kantan.codecs.resource.Resource.readerReaderResource", "link" : "kantan\/codecs\/resource\/Resource$.html#readerReaderResource[R<:java.io.Reader]:kantan.codecs.resource.ReaderResource[R]", "kind" : "implicit def"}, {"label" : "streamInputResource", "tail" : "(): InputResource[I]", "member" : "kantan.codecs.resource.Resource.streamInputResource", "link" : "kantan\/codecs\/resource\/Resource$.html#streamInputResource[I<:java.io.InputStream]:kantan.codecs.resource.InputResource[I]", "kind" : "implicit def"}, {"label" : "from", "tail" : "(f: (I) => OpenResult[R]): Resource[I, R]", "member" : "kantan.codecs.resource.Resource.from", "link" : "kantan\/codecs\/resource\/Resource$.html#from[I,R](f:I=>kantan.codecs.resource.OpenResult[R]):kantan.codecs.resource.Resource[I,R]", "kind" : "def"}, {"label" : "uriInputResource", "tail" : ": InputResource[URI]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.uriInputResource", "link" : "kantan\/codecs\/resource\/Resource$.html#uriInputResource:kantan.codecs.resource.InputResource[java.net.URI]", "kind" : "implicit val"}, {"label" : "urlInputResource", "tail" : ": InputResource[URL]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.urlInputResource", "link" : "kantan\/codecs\/resource\/Resource$.html#urlInputResource:kantan.codecs.resource.InputResource[java.net.URL]", "kind" : "implicit val"}, {"label" : "charsReaderResource", "tail" : ": ReaderResource[Array[Char]]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.charsReaderResource", "link" : "kantan\/codecs\/resource\/Resource$.html#charsReaderResource:kantan.codecs.resource.ReaderResource[Array[Char]]", "kind" : "implicit val"}, {"label" : "fileOutputResource", "tail" : ": OutputResource[File]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.fileOutputResource", "link" : "kantan\/codecs\/resource\/Resource$.html#fileOutputResource:kantan.codecs.resource.OutputResource[java.io.File]", "kind" : "implicit val"}, {"label" : "fileInputResource", "tail" : ": InputResource[File]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.fileInputResource", "link" : "kantan\/codecs\/resource\/Resource$.html#fileInputResource:kantan.codecs.resource.InputResource[java.io.File]", "kind" : "implicit val"}, {"label" : "pathOutputResource", "tail" : ": OutputResource[Path]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.pathOutputResource", "link" : "kantan\/codecs\/resource\/Resource$.html#pathOutputResource:kantan.codecs.resource.OutputResource[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "pathInputResource", "tail" : ": InputResource[Path]", "member" : "kantan.codecs.resource.PlatformSpecificInstances.pathInputResource", "link" : "kantan\/codecs\/resource\/Resource$.html#pathInputResource:kantan.codecs.resource.InputResource[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/Resource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/Resource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/Resource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/Resource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/Resource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/Resource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/Resource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Resource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Resource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Resource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/Resource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/Resource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/Resource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/Resource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/Resource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/Resource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/Resource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/Resource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/Resource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/resource\/Resource.html", "kind" : "trait", "members_trait" : [{"label" : "emap", "tail" : "(f: (R) => OpenResult[RR]): Resource[I, RR]", "member" : "kantan.codecs.resource.Resource.emap", "link" : "kantan\/codecs\/resource\/Resource.html#emap[RR](f:R=>kantan.codecs.resource.OpenResult[RR]):kantan.codecs.resource.Resource[I,RR]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (R) => OpenResult[RR]): Resource[I, RR]", "member" : "kantan.codecs.resource.Resource.mapResult", "link" : "kantan\/codecs\/resource\/Resource.html#mapResult[RR](f:R=>kantan.codecs.resource.OpenResult[RR]):kantan.codecs.resource.Resource[I,RR]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) => RR): Resource[I, RR]", "member" : "kantan.codecs.resource.Resource.map", "link" : "kantan\/codecs\/resource\/Resource.html#map[RR](f:R=>RR):kantan.codecs.resource.Resource[I,RR]", "kind" : "def"}, {"label" : "econtramap", "tail" : "(f: (II) => OpenResult[I]): Resource[II, R]", "member" : "kantan.codecs.resource.Resource.econtramap", "link" : "kantan\/codecs\/resource\/Resource.html#econtramap[II](f:II=>kantan.codecs.resource.OpenResult[I]):kantan.codecs.resource.Resource[II,R]", "kind" : "def"}, {"label" : "contramapResult", "tail" : "(f: (II) => OpenResult[I]): Resource[II, R]", "member" : "kantan.codecs.resource.Resource.contramapResult", "link" : "kantan\/codecs\/resource\/Resource.html#contramapResult[II](f:II=>kantan.codecs.resource.OpenResult[I]):kantan.codecs.resource.Resource[II,R]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (II) => I): Resource[II, R]", "member" : "kantan.codecs.resource.Resource.contramap", "link" : "kantan\/codecs\/resource\/Resource.html#contramap[II](f:II=>I):kantan.codecs.resource.Resource[II,R]", "kind" : "def"}, {"label" : "withResource", "tail" : "(input: I)(f: (R) => ProcessResult[O])(c: Closeable[R]): ResourceResult[O]", "member" : "kantan.codecs.resource.Resource.withResource", "link" : "kantan\/codecs\/resource\/Resource.html#withResource[O](input:I)(f:R=>kantan.codecs.resource.ProcessResult[O])(implicitc:kantan.codecs.resource.Closeable[R]):kantan.codecs.resource.ResourceResult[O]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/Resource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/Resource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/Resource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/Resource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/Resource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/Resource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/Resource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Resource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Resource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/Resource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/Resource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/Resource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/Resource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/Resource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/Resource.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/Resource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/Resource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/Resource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/Resource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "open", "tail" : "(input: I): OpenResult[R]", "member" : "kantan.codecs.resource.Resource.open", "link" : "kantan\/codecs\/resource\/Resource.html#open(input:I):kantan.codecs.resource.OpenResult[R]", "kind" : "abstract def"}], "shortDescription" : "Represents a resource that can be opened and worked on."}, {"name" : "kantan.codecs.resource.ResourceError", "shortDescription" : "Errors that can occur while working with a Resource.", "object" : "kantan\/codecs\/resource\/ResourceError$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/codecs\/resource\/ResourceError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/codecs\/resource\/ResourceError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/codecs\/resource\/ResourceError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/codecs\/resource\/ResourceError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/codecs\/resource\/ResourceError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/codecs\/resource\/ResourceError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/codecs\/resource\/ResourceError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/codecs\/resource\/ResourceError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/codecs\/resource\/ResourceError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/codecs\/resource\/ResourceError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/codecs\/resource\/ResourceError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/codecs\/resource\/ResourceError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/codecs\/resource\/ResourceError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/codecs\/resource\/ResourceError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/codecs\/resource\/ResourceError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/codecs\/resource\/ResourceError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/codecs\/resource\/ResourceError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/ResourceError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/ResourceError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/ResourceError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/ResourceError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/ResourceError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/ResourceError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/ResourceError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/ResourceError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/ResourceError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/ResourceError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/ResourceError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/ResourceError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/ResourceError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/ResourceError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/ResourceError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/codecs\/resource\/ResourceError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/codecs\/resource\/ResourceError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/codecs\/resource\/ResourceError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "CloseError", "tail" : "", "member" : "kantan.codecs.resource.ResourceError.CloseError", "link" : "kantan\/codecs\/resource\/ResourceError$.html#CloseError", "kind" : "object"}, {"label" : "CloseError", "tail" : "", "member" : "kantan.codecs.resource.ResourceError.CloseError", "link" : "kantan\/codecs\/resource\/ResourceError$.html#CloseErrorextendsResourceErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "ProcessError", "tail" : "", "member" : "kantan.codecs.resource.ResourceError.ProcessError", "link" : "kantan\/codecs\/resource\/ResourceError$.html#ProcessError", "kind" : "object"}, {"label" : "ProcessError", "tail" : "", "member" : "kantan.codecs.resource.ResourceError.ProcessError", "link" : "kantan\/codecs\/resource\/ResourceError$.html#ProcessErrorextendsResourceErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "OpenError", "tail" : "", "member" : "kantan.codecs.resource.ResourceError.OpenError", "link" : "kantan\/codecs\/resource\/ResourceError$.html#OpenError", "kind" : "object"}, {"label" : "OpenError", "tail" : "", "member" : "kantan.codecs.resource.ResourceError.OpenError", "link" : "kantan\/codecs\/resource\/ResourceError$.html#OpenErrorextendsResourceErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/ResourceError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/ResourceError$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/ResourceError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/ResourceError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/ResourceError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/ResourceError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/ResourceError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/ResourceError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/ResourceError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/ResourceError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/ResourceError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/ResourceError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/ResourceError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/ResourceError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/ResourceError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/ResourceError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/resource\/ResourceError.html", "kind" : "class"}, {"name" : "kantan.codecs.resource.ResourceIterator", "object" : "kantan\/codecs\/resource\/ResourceIterator$.html", "members_object" : [{"label" : "fromIterator", "tail" : "(as: Iterator[A]): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.fromIterator", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#fromIterator[A](as:Iterator[A]):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(as: A*): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.apply", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#apply[A](as:A*):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "empty", "tail" : ": ResourceIterator[Nothing]", "member" : "kantan.codecs.resource.ResourceIterator.empty", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#empty:kantan.codecs.resource.ResourceIterator[Nothing]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/ResourceIterator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/resource\/ResourceIterator.html", "kind" : "trait", "members_trait" : [{"label" : "safe", "tail" : "(empty: => F)(f: (Throwable) => F): ResourceIterator[Either[F, A]]", "member" : "kantan.codecs.resource.ResourceIterator.safe", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#safe[F](empty:=>F)(f:Throwable=>F):kantan.codecs.resource.ResourceIterator[Either[F,A]]", "kind" : "def"}, {"label" : "withClose", "tail" : "(f: () => Unit): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.withClose", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#withClose(f:()=>Unit):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[A, B]): ResourceIterator[B]", "member" : "kantan.codecs.resource.ResourceIterator.collect", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#collect[B](f:PartialFunction[A,B]):kantan.codecs.resource.ResourceIterator[B]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.takeWhile", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#takeWhile(p:A=>Boolean):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.take", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#take(n:Int):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.isTraversableAgain", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.exists", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "kantan.codecs.resource.ResourceIterator.find", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.isEmpty", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(f: (B, A) => B): ResourceIterator[B]", "member" : "kantan.codecs.resource.ResourceIterator.scanLeft", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#scanLeft[B](z:B)(f:(B,A)=>B):kantan.codecs.resource.ResourceIterator[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.slice", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#slice(from:Int,until:Int):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): ResourceIterator[(A, Int)]", "member" : "kantan.codecs.resource.ResourceIterator.zipWithIndex", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#zipWithIndex:kantan.codecs.resource.ResourceIterator[(A,Int)]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(empty: B)(f: (B, A) => B): B", "member" : "kantan.codecs.resource.ResourceIterator.foldLeft", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#foldLeft[B](empty:B)(f:(B,A)=>B):B", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.forall", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.hasDefiniteSize", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U): Unit", "member" : "kantan.codecs.resource.ResourceIterator.foreach", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "filterResult", "tail" : "(p: (S) => Boolean)(ev: <:<[A, Either[E, S]]): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.filterResult", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#filterResult[E,S](p:S=>Boolean)(implicitev:A<:<Either[E,S]):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.withFilter", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#withFilter(p:A=>Boolean):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (A) => Boolean): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.filterNot", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#filterNot(pred:A=>Boolean):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.filter", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#filter(p:A=>Boolean):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (S) => Either[E, B])(ev: <:<[A, Either[E, S]]): ResourceIterator[Either[E, B]]", "member" : "kantan.codecs.resource.ResourceIterator.emap", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#emap[E,S,B](f:S=>Either[E,B])(implicitev:A<:<Either[E,S]):kantan.codecs.resource.ResourceIterator[Either[E,B]]", "kind" : "def"}, {"label" : "flatMapResult", "tail" : "(f: (S) => Either[E, B])(ev: <:<[A, Either[E, S]]): ResourceIterator[Either[E, B]]", "member" : "kantan.codecs.resource.ResourceIterator.flatMapResult", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#flatMapResult[E,S,B](f:S=>Either[E,B])(implicitev:A<:<Either[E,S]):kantan.codecs.resource.ResourceIterator[Either[E,B]]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => ResourceIterator[B]): ResourceIterator[B]", "member" : "kantan.codecs.resource.ResourceIterator.flatMap", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#flatMap[B](f:A=>kantan.codecs.resource.ResourceIterator[B]):kantan.codecs.resource.ResourceIterator[B]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (S) => B)(ev: <:<[A, Either[E, S]]): ResourceIterator[Either[E, B]]", "member" : "kantan.codecs.resource.ResourceIterator.mapResult", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#mapResult[E,S,B](f:S=>B)(implicitev:A<:<Either[E,S]):kantan.codecs.resource.ResourceIterator[Either[E,B]]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): ResourceIterator[B]", "member" : "kantan.codecs.resource.ResourceIterator.map", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#map[B](f:A=>B):kantan.codecs.resource.ResourceIterator[B]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.dropWhile", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#dropWhile(p:A=>Boolean):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.drop", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#drop(n:Int):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "next", "tail" : "(): A", "member" : "kantan.codecs.resource.ResourceIterator.next", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#next():A", "kind" : "final def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.hasNext", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#hasNext:Boolean", "kind" : "final def"}, {"label" : "close", "tail" : "(): Unit", "member" : "kantan.codecs.resource.ResourceIterator.close", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#close():Unit", "kind" : "final def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.iterator", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toVector", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[AA]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toSet", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#toSet[AA>:A]:Set[AA]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toSeq", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toIterable", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toIndexedSeq", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[AA]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toBuffer", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#toBuffer[AA>:A]:scala.collection.mutable.Buffer[AA]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toList", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "to", "tail" : "(factory: Factory[A, F]): F", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.to", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#to[F](factory:scala.collection.Factory[A,F]):F", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/ResourceIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "release", "tail" : "(): Unit", "member" : "kantan.codecs.resource.ResourceIterator.release", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#release():Unit", "kind" : "abstract def"}, {"label" : "checkNext", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.checkNext", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#checkNext:Boolean", "kind" : "abstract def"}, {"label" : "readNext", "tail" : "(): A", "member" : "kantan.codecs.resource.ResourceIterator.readNext", "link" : "kantan\/codecs\/resource\/ResourceIterator.html#readNext():A", "kind" : "abstract def"}], "shortDescription" : "Offers iterator-like access to IO resources."}, {"name" : "kantan.codecs.resource.ResourceResult", "shortDescription" : "Provides convenience methods for ResourceResult.", "object" : "kantan\/codecs\/resource\/ResourceResult$.html", "members_object" : [{"label" : "close", "tail" : "(u: => U): ResourceResult[Unit]", "member" : "kantan.codecs.resource.ResourceResult.close", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#close[U](u:=>U):kantan.codecs.resource.ResourceResult[Unit]", "kind" : "def"}, {"label" : "process", "tail" : "(a: => A): ResourceResult[A]", "member" : "kantan.codecs.resource.ResourceResult.process", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#process[A](a:=>A):kantan.codecs.resource.ResourceResult[A]", "kind" : "def"}, {"label" : "open", "tail" : "(a: => A): ResourceResult[A]", "member" : "kantan.codecs.resource.ResourceResult.open", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#open[A](a:=>A):kantan.codecs.resource.ResourceResult[A]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: ResourceError): Either[ResourceError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[ResourceError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[ResourceError, S]])(bf: BuildFrom[M[Either[ResourceError, S]], S, M[S]]): Either[ResourceError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#sequence[S,M[X]<:IterableOnce[X]](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/ResourceResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/ResourceResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.resource.VersionSpecificResourceIterator", "trait" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html", "kind" : "trait", "members_trait" : [{"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.iterator", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toVector", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[AA]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toSet", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#toSet[AA>:A]:Set[AA]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toSeq", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toIterable", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toIndexedSeq", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[AA]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toBuffer", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#toBuffer[AA>:A]:scala.collection.mutable.Buffer[AA]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toList", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "to", "tail" : "(factory: Factory[A, F]): F", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.to", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#to[F](factory:scala.collection.Factory[A,F]):F", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/VersionSpecificResourceIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.resource.WriterResource", "shortDescription" : "Provides instance summoning methods for WriterResource.", "object" : "kantan\/codecs\/resource\/WriterResource$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: WriterResource[A]): WriterResource[A]", "member" : "kantan.codecs.resource.WriterResource.apply", "link" : "kantan\/codecs\/resource\/WriterResource$.html#apply[A](implicitev:kantan.codecs.resource.WriterResource[A]):kantan.codecs.resource.WriterResource[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/resource\/WriterResource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/resource\/WriterResource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/resource\/WriterResource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/resource\/WriterResource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/resource\/WriterResource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/resource\/WriterResource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/resource\/WriterResource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/WriterResource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/WriterResource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/resource\/WriterResource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/resource\/WriterResource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/resource\/WriterResource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/resource\/WriterResource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/resource\/WriterResource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/resource\/WriterResource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/resource\/WriterResource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/resource\/WriterResource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/resource\/WriterResource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/resource\/WriterResource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "kantan.codecs.libra.laws" : [], "kantan.codecs" : [{"name" : "kantan.codecs.Codec", "object" : "kantan\/codecs\/Codec$.html", "members_object" : [{"label" : "from", "tail" : "(d: Decoder[E, D, F, T], e: Encoder[E, D, T]): Codec[E, D, F, T]", "member" : "kantan.codecs.Codec.from", "link" : "kantan\/codecs\/Codec$.html#from[E,D,F,T](d:kantan.codecs.Decoder[E,D,F,T],e:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (E) => Either[F, D])(g: (D) => E): Codec[E, D, F, T]", "member" : "kantan.codecs.Codec.from", "link" : "kantan\/codecs\/Codec$.html#from[E,D,F,T](f:E=>Either[F,D])(g:D=>E):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/Codec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/Codec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/Codec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/Codec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/Codec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/Codec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/Codec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Codec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Codec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Codec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/Codec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/Codec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/Codec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/Codec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/Codec$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/Codec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/Codec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/Codec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/Codec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/Codec.html", "kind" : "trait", "members_trait" : [{"label" : "imapEncoded", "tail" : "(f: (E) => EE)(g: (EE) => E): Codec[EE, D, F, T]", "member" : "kantan.codecs.Codec.imapEncoded", "link" : "kantan\/codecs\/Codec.html#imapEncoded[EE](f:E=>EE)(g:EE=>E):kantan.codecs.Codec[EE,D,F,T]", "kind" : "def"}, {"label" : "imap", "tail" : "(f: (D) => DD)(g: (DD) => D): Codec[E, DD, F, T]", "member" : "kantan.codecs.Codec.imap", "link" : "kantan\/codecs\/Codec.html#imap[DD](f:D=>DD)(g:DD=>D):kantan.codecs.Codec[E,DD,F,T]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (F) => FF): Codec[E, D, FF, T]", "member" : "kantan.codecs.Codec.mapError", "link" : "kantan\/codecs\/Codec.html#mapError[FF](f:F=>FF):kantan.codecs.Codec[E,D,FF,T]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (F) => FF): Codec[E, D, FF, T]", "member" : "kantan.codecs.Codec.leftMap", "link" : "kantan\/codecs\/Codec.html#leftMap[FF](f:F=>FF):kantan.codecs.Codec[E,D,FF,T]", "kind" : "def"}, {"label" : "tag", "tail" : "(): Codec[E, D, F, TT]", "member" : "kantan.codecs.Codec.tag", "link" : "kantan\/codecs\/Codec.html#tag[TT]:kantan.codecs.Codec[E,D,F,TT]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (DD) => D): Encoder[E, DD, T]", "member" : "kantan.codecs.Encoder.contramap", "link" : "kantan\/codecs\/Codec.html#contramap[DD](f:DD=>D):kantan.codecs.Encoder[E,DD,T]", "kind" : "def"}, {"label" : "mapEncoded", "tail" : "(f: (E) => EE): Encoder[EE, D, T]", "member" : "kantan.codecs.Encoder.mapEncoded", "link" : "kantan\/codecs\/Codec.html#mapEncoded[EE](f:E=>EE):kantan.codecs.Encoder[EE,D,T]", "kind" : "def"}, {"label" : "product", "tail" : "(decoder: Decoder[E, DD, F, T]): Decoder[E, (D, DD), F, T]", "member" : "kantan.codecs.Decoder.product", "link" : "kantan\/codecs\/Codec.html#product[DD](decoder:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,(D,DD),F,T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (D) => Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.flatMap", "link" : "kantan\/codecs\/Codec.html#flatMap[DD](f:D=>kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "contramapEncoded", "tail" : "(f: (EE) => E): Decoder[EE, D, F, T]", "member" : "kantan.codecs.Decoder.contramapEncoded", "link" : "kantan\/codecs\/Codec.html#contramapEncoded[EE](f:EE=>E):kantan.codecs.Decoder[EE,D,F,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (D) => Boolean)(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.filter", "link" : "kantan\/codecs\/Codec.html#filter(f:D=>Boolean)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[D, DD])(t: IsError[F]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.collect", "link" : "kantan\/codecs\/Codec.html#collect[DD](f:PartialFunction[D,DD])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.emap", "link" : "kantan\/codecs\/Codec.html#emap[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.mapResult", "link" : "kantan\/codecs\/Codec.html#mapResult[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (D) => DD): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.map", "link" : "kantan\/codecs\/Codec.html#map[DD](f:D=>DD):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (F) => Decoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.handleErrorWith", "link" : "kantan\/codecs\/Codec.html#handleErrorWith(f:F=>kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[F, Either[FF, DD]]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.recoverWith", "link" : "kantan\/codecs\/Codec.html#recoverWith[DD>:D,FF>:F](pf:PartialFunction[F,Either[FF,DD]]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.recover", "link" : "kantan\/codecs\/Codec.html#recover[DD>:D](pf:PartialFunction[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: (Either[F, D]) => Either[FF, DD]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.andThen", "link" : "kantan\/codecs\/Codec.html#andThen[FF,DD](f:Either[F,D]=>Either[FF,DD]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(d: Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.orElse", "link" : "kantan\/codecs\/Codec.html#orElse[DD>:D](d:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "unsafeDecode", "tail" : "(e: E): D", "member" : "kantan.codecs.Decoder.unsafeDecode", "link" : "kantan\/codecs\/Codec.html#unsafeDecode(e:E):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/Codec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/Codec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/Codec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/Codec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/Codec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/Codec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/Codec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Codec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Codec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Codec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/Codec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/Codec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/Codec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/Codec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/Codec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/Codec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/Codec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/Codec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/Codec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encode", "tail" : "(d: D): E", "member" : "kantan.codecs.Encoder.encode", "link" : "kantan\/codecs\/Codec.html#encode(d:D):E", "kind" : "abstract def"}, {"label" : "decode", "tail" : "(e: E): Either[F, D]", "member" : "kantan.codecs.Decoder.decode", "link" : "kantan\/codecs\/Codec.html#decode(e:E):Either[F,D]", "kind" : "abstract def"}], "shortDescription" : "Combines a Decoder and an Encoder."}, {"name" : "kantan.codecs.CodecCompanion", "trait" : "kantan\/codecs\/CodecCompanion.html", "kind" : "trait", "members_trait" : [{"label" : "from", "tail" : "(d: Decoder[E, D, F, T], e: Encoder[E, D, T]): Codec[E, D, F, T]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/codecs\/CodecCompanion.html#from[D](d:kantan.codecs.Decoder[E,D,F,T],e:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (E) => Either[F, D])(g: (D) => E): Codec[E, D, F, T]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/codecs\/CodecCompanion.html#from[D](f:E=>Either[F,D])(g:D=>E):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/CodecCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/CodecCompanion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/CodecCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/CodecCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/CodecCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/CodecCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/CodecCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/CodecCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/CodecCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/CodecCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/CodecCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/CodecCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/CodecCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/CodecCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/CodecCompanion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/CodecCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/CodecCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/CodecCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/CodecCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.Decoder", "object" : "kantan\/codecs\/Decoder$.html", "members_object" : [{"label" : "oneOf", "tail" : "(ds: Decoder[E, D, F, T]*)(arg0: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.oneOf", "link" : "kantan\/codecs\/Decoder$.html#oneOf[E,D,F,T](ds:kantan.codecs.Decoder[E,D,F,T]*)(implicitevidence$3:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "eitherDecoder", "tail" : "(d1: Decoder[E, D1, F, T], d2: Decoder[E, D2, F, T]): Decoder[E, Either[D1, D2], F, T]", "member" : "kantan.codecs.Decoder.eitherDecoder", "link" : "kantan\/codecs\/Decoder$.html#eitherDecoder[E,D1,D2,F,T](implicitd1:kantan.codecs.Decoder[E,D1,F,T],implicitd2:kantan.codecs.Decoder[E,D2,F,T]):kantan.codecs.Decoder[E,Either[D1,D2],F,T]", "kind" : "implicit def"}, {"label" : "optionalDecoder", "tail" : "(arg0: Optional[E], da: Decoder[E, D, F, T]): Decoder[E, Option[D], F, T]", "member" : "kantan.codecs.Decoder.optionalDecoder", "link" : "kantan\/codecs\/Decoder$.html#optionalDecoder[E,D,F,T](implicitevidence$2:kantan.codecs.Optional[E],implicitda:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,Option[D],F,T]", "kind" : "implicit def"}, {"label" : "decoderFromExported", "tail" : "(da: DerivedDecoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.decoderFromExported", "link" : "kantan\/codecs\/Decoder$.html#decoderFromExported[E,D,F,T](implicitda:kantan.codecs.export.DerivedDecoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "fromUnsafe", "tail" : "(f: (E) => D)(arg0: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.fromUnsafe", "link" : "kantan\/codecs\/Decoder$.html#fromUnsafe[E,D,F,T](f:E=>D)(implicitevidence$1:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (E) => Either[F, D]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.from", "link" : "kantan\/codecs\/Decoder$.html#from[E,D,F,T](f:E=>Either[F,D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/Decoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/Decoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/Decoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/Decoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/Decoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/Decoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/Decoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Decoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Decoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Decoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/Decoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/Decoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/Decoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/Decoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/Decoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/Decoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/Decoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/Decoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/Decoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/Decoder.html", "kind" : "trait", "members_trait" : [{"label" : "product", "tail" : "(decoder: Decoder[E, DD, F, T]): Decoder[E, (D, DD), F, T]", "member" : "kantan.codecs.Decoder.product", "link" : "kantan\/codecs\/Decoder.html#product[DD](decoder:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,(D,DD),F,T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (D) => Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.flatMap", "link" : "kantan\/codecs\/Decoder.html#flatMap[DD](f:D=>kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "tag", "tail" : "(): Decoder[E, D, F, TT]", "member" : "kantan.codecs.Decoder.tag", "link" : "kantan\/codecs\/Decoder.html#tag[TT]:kantan.codecs.Decoder[E,D,F,TT]", "kind" : "def"}, {"label" : "contramapEncoded", "tail" : "(f: (EE) => E): Decoder[EE, D, F, T]", "member" : "kantan.codecs.Decoder.contramapEncoded", "link" : "kantan\/codecs\/Decoder.html#contramapEncoded[EE](f:EE=>E):kantan.codecs.Decoder[EE,D,F,T]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.leftMap", "link" : "kantan\/codecs\/Decoder.html#leftMap[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.mapError", "link" : "kantan\/codecs\/Decoder.html#mapError[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (D) => Boolean)(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.filter", "link" : "kantan\/codecs\/Decoder.html#filter(f:D=>Boolean)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[D, DD])(t: IsError[F]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.collect", "link" : "kantan\/codecs\/Decoder.html#collect[DD](f:PartialFunction[D,DD])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.emap", "link" : "kantan\/codecs\/Decoder.html#emap[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.mapResult", "link" : "kantan\/codecs\/Decoder.html#mapResult[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (D) => DD): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.map", "link" : "kantan\/codecs\/Decoder.html#map[DD](f:D=>DD):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (F) => Decoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.handleErrorWith", "link" : "kantan\/codecs\/Decoder.html#handleErrorWith(f:F=>kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[F, Either[FF, DD]]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.recoverWith", "link" : "kantan\/codecs\/Decoder.html#recoverWith[DD>:D,FF>:F](pf:PartialFunction[F,Either[FF,DD]]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.recover", "link" : "kantan\/codecs\/Decoder.html#recover[DD>:D](pf:PartialFunction[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: (Either[F, D]) => Either[FF, DD]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.andThen", "link" : "kantan\/codecs\/Decoder.html#andThen[FF,DD](f:Either[F,D]=>Either[FF,DD]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(d: Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.orElse", "link" : "kantan\/codecs\/Decoder.html#orElse[DD>:D](d:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "unsafeDecode", "tail" : "(e: E): D", "member" : "kantan.codecs.Decoder.unsafeDecode", "link" : "kantan\/codecs\/Decoder.html#unsafeDecode(e:E):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/Decoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/Decoder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/Decoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/Decoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/Decoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/Decoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/Decoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Decoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Decoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Decoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/Decoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/Decoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/Decoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/Decoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/Decoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/Decoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/Decoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/Decoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/Decoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(e: E): Either[F, D]", "member" : "kantan.codecs.Decoder.decode", "link" : "kantan\/codecs\/Decoder.html#decode(e:E):Either[F,D]", "kind" : "abstract def"}], "shortDescription" : "Type class for types that can be decoded from other types."}, {"name" : "kantan.codecs.DecoderCompanion", "trait" : "kantan\/codecs\/DecoderCompanion.html", "kind" : "trait", "members_trait" : [{"label" : "oneOf", "tail" : "(ds: Decoder[E, D, F, T]*)(i: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.DecoderCompanion.oneOf", "link" : "kantan\/codecs\/DecoderCompanion.html#oneOf[D](ds:kantan.codecs.Decoder[E,D,F,T]*)(impliciti:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromPartial", "tail" : "(f: PartialFunction[E, Either[F, D]])(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.DecoderCompanion.fromPartial", "link" : "kantan\/codecs\/DecoderCompanion.html#fromPartial[D](f:PartialFunction[E,Either[F,D]])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromUnsafe", "tail" : "(f: (E) => D)(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.DecoderCompanion.fromUnsafe", "link" : "kantan\/codecs\/DecoderCompanion.html#fromUnsafe[D](f:E=>D)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (E) => Either[F, D]): Decoder[E, D, F, T]", "member" : "kantan.codecs.DecoderCompanion.from", "link" : "kantan\/codecs\/DecoderCompanion.html#from[D](f:E=>Either[F,D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Decoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.DecoderCompanion.apply", "link" : "kantan\/codecs\/DecoderCompanion.html#apply[D](implicitev:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/DecoderCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/DecoderCompanion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/DecoderCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/DecoderCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/DecoderCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/DecoderCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/DecoderCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/DecoderCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/DecoderCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/DecoderCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/DecoderCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/DecoderCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/DecoderCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/DecoderCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/DecoderCompanion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/DecoderCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/DecoderCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/DecoderCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/DecoderCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides methods commonly declared by companion objects for specialised decoder types."}, {"name" : "kantan.codecs.Encoder", "object" : "kantan\/codecs\/Encoder$.html", "members_object" : [{"label" : "eitherEncoder", "tail" : "(ea: Encoder[E, D1, T], eb: Encoder[E, D2, T]): Encoder[E, Either[D1, D2], T]", "member" : "kantan.codecs.Encoder.eitherEncoder", "link" : "kantan\/codecs\/Encoder$.html#eitherEncoder[E,D1,D2,T](implicitea:kantan.codecs.Encoder[E,D1,T],impliciteb:kantan.codecs.Encoder[E,D2,T]):kantan.codecs.Encoder[E,Either[D1,D2],T]", "kind" : "implicit def"}, {"label" : "optionalEncoder", "tail" : "(arg0: Optional[E], ea: Encoder[E, D, T]): Encoder[E, Option[D], T]", "member" : "kantan.codecs.Encoder.optionalEncoder", "link" : "kantan\/codecs\/Encoder$.html#optionalEncoder[E,D,T](implicitevidence$1:kantan.codecs.Optional[E],implicitea:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,Option[D],T]", "kind" : "implicit def"}, {"label" : "encoderFromExported", "tail" : "(ea: DerivedEncoder[E, D, T]): Encoder[E, D, T]", "member" : "kantan.codecs.Encoder.encoderFromExported", "link" : "kantan\/codecs\/Encoder$.html#encoderFromExported[E,D,T](implicitea:kantan.codecs.export.DerivedEncoder[E,D,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "implicit def"}, {"label" : "from", "tail" : "(f: (D) => E): Encoder[E, D, T]", "member" : "kantan.codecs.Encoder.from", "link" : "kantan\/codecs\/Encoder$.html#from[E,D,T](f:D=>E):kantan.codecs.Encoder[E,D,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/Encoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/Encoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/Encoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/Encoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/Encoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/Encoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/Encoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Encoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Encoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Encoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/Encoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/Encoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/Encoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/Encoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/Encoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/Encoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/Encoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/Encoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/Encoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/Encoder.html", "kind" : "trait", "members_trait" : [{"label" : "tag", "tail" : "(): Encoder[E, D, TT]", "member" : "kantan.codecs.Encoder.tag", "link" : "kantan\/codecs\/Encoder.html#tag[TT]:kantan.codecs.Encoder[E,D,TT]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (DD) => D): Encoder[E, DD, T]", "member" : "kantan.codecs.Encoder.contramap", "link" : "kantan\/codecs\/Encoder.html#contramap[DD](f:DD=>D):kantan.codecs.Encoder[E,DD,T]", "kind" : "def"}, {"label" : "mapEncoded", "tail" : "(f: (E) => EE): Encoder[EE, D, T]", "member" : "kantan.codecs.Encoder.mapEncoded", "link" : "kantan\/codecs\/Encoder.html#mapEncoded[EE](f:E=>EE):kantan.codecs.Encoder[EE,D,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/Encoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/Encoder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/Encoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/Encoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/Encoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/Encoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/Encoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Encoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Encoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Encoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/Encoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/Encoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/Encoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/Encoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/Encoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/Encoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/Encoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/Encoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/Encoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encode", "tail" : "(d: D): E", "member" : "kantan.codecs.Encoder.encode", "link" : "kantan\/codecs\/Encoder.html#encode(d:D):E", "kind" : "abstract def"}], "shortDescription" : "Type class for types that can be encoded into others."}, {"name" : "kantan.codecs.EncoderCompanion", "trait" : "kantan\/codecs\/EncoderCompanion.html", "kind" : "trait", "members_trait" : [{"label" : "from", "tail" : "(f: (D) => E): Encoder[E, D, T]", "member" : "kantan.codecs.EncoderCompanion.from", "link" : "kantan\/codecs\/EncoderCompanion.html#from[D](f:D=>E):kantan.codecs.Encoder[E,D,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Encoder[E, D, T]): Encoder[E, D, T]", "member" : "kantan.codecs.EncoderCompanion.apply", "link" : "kantan\/codecs\/EncoderCompanion.html#apply[D](implicitev:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/EncoderCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/EncoderCompanion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/EncoderCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/EncoderCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/EncoderCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/EncoderCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/EncoderCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/EncoderCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/EncoderCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/EncoderCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/EncoderCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/EncoderCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/EncoderCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/EncoderCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/EncoderCompanion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/EncoderCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/EncoderCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/EncoderCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/EncoderCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.Optional", "object" : "kantan\/codecs\/Optional$.html", "members_object" : [{"label" : "optOption", "tail" : "(): Optional[Option[A]]", "member" : "kantan.codecs.Optional.optOption", "link" : "kantan\/codecs\/Optional$.html#optOption[A]:kantan.codecs.Optional[Option[A]]", "kind" : "implicit def"}, {"label" : "optSeq", "tail" : "(): Optional[Seq[A]]", "member" : "kantan.codecs.Optional.optSeq", "link" : "kantan\/codecs\/Optional$.html#optSeq[A]:kantan.codecs.Optional[Seq[A]]", "kind" : "implicit def"}, {"label" : "optString", "tail" : ": Optional[String]", "member" : "kantan.codecs.Optional.optString", "link" : "kantan\/codecs\/Optional$.html#optString:kantan.codecs.Optional[String]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(a: A): Optional[A]", "member" : "kantan.codecs.Optional.apply", "link" : "kantan\/codecs\/Optional$.html#apply[A](a:A):kantan.codecs.Optional[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Optional[A]): Optional[A]", "member" : "kantan.codecs.Optional.apply", "link" : "kantan\/codecs\/Optional$.html#apply[A](implicitev:kantan.codecs.Optional[A]):kantan.codecs.Optional[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/Optional$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/Optional$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/Optional$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/Optional$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/Optional$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/Optional$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/Optional$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Optional$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Optional$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Optional$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/Optional$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/Optional$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/Optional$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/Optional$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/Optional$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/Optional$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/Optional$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/Optional$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/Optional$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/codecs\/Optional.html", "kind" : "trait", "members_trait" : [{"label" : "isEmpty", "tail" : "(a: A): Boolean", "member" : "kantan.codecs.Optional.isEmpty", "link" : "kantan\/codecs\/Optional.html#isEmpty(a:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/Optional.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/Optional.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/Optional.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/Optional.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/Optional.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/Optional.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/Optional.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Optional.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Optional.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/Optional.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/Optional.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/Optional.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/Optional.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/Optional.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/Optional.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/Optional.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/Optional.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/Optional.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/Optional.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "empty", "tail" : "(): A", "member" : "kantan.codecs.Optional.empty", "link" : "kantan\/codecs\/Optional.html#empty:A", "kind" : "abstract def"}], "shortDescription" : "Type class that represents data types that have an \"empty\" value."}, {"name" : "kantan.codecs.ResultCompanion", "shortDescription" : "Provides trait that result companion object can extend.", "object" : "kantan\/codecs\/ResultCompanion$.html", "members_object" : [{"label" : "WithError", "tail" : "", "member" : "kantan.codecs.ResultCompanion.WithError", "link" : "kantan\/codecs\/ResultCompanion$.html#WithError[F]extendsResultCompanion.WithDefault[F]", "kind" : "abstract class"}, {"label" : "WithDefault", "tail" : "", "member" : "kantan.codecs.ResultCompanion.WithDefault", "link" : "kantan\/codecs\/ResultCompanion$.html#WithDefault[F]extendsResultCompanion.Simple[F]", "kind" : "trait"}, {"label" : "Simple", "tail" : "", "member" : "kantan.codecs.ResultCompanion.Simple", "link" : "kantan\/codecs\/ResultCompanion$.html#Simple[F]extendsVersionSpecificResultCompanion.Simple[F]", "kind" : "trait"}, {"label" : "nonFatal", "tail" : "(f: (Throwable) => E)(s: => S): Either[E, S]", "member" : "kantan.codecs.ResultCompanion.nonFatal", "link" : "kantan\/codecs\/ResultCompanion$.html#nonFatal[E,S](f:Throwable=>E)(s:=>S):Either[E,S]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/ResultCompanion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/ResultCompanion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/ResultCompanion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/ResultCompanion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/ResultCompanion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/ResultCompanion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/ResultCompanion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/ResultCompanion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/ResultCompanion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/ResultCompanion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/ResultCompanion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/ResultCompanion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/ResultCompanion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/ResultCompanion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/ResultCompanion$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/ResultCompanion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/ResultCompanion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/ResultCompanion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/ResultCompanion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.VersionSpecificResultCompanion", "shortDescription" : "", "object" : "kantan\/codecs\/VersionSpecificResultCompanion$.html", "members_object" : [{"label" : "Simple", "tail" : "", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#Simple[F]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/VersionSpecificResultCompanion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "kantan.codecs.scalaz.laws.discipline" : [{"name" : "kantan.codecs.scalaz.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "arbIllegalDisjunction", "tail" : "(a: Arbitrary[IllegalValue[E, Either[DL, DR], T]]): Arbitrary[IllegalValue[E, \\\/[DL, DR], T]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbIllegalDisjunction", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbIllegalDisjunction[E,DL,DR,T](implicita:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,Either[DL,DR],T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,DL\\\/DR,T]]", "kind" : "implicit def"}, {"label" : "arbLegalDisjunction", "tail" : "(a: Arbitrary[LegalValue[E, Either[DL, DR], T]]): Arbitrary[LegalValue[E, \\\/[DL, DR], T]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbLegalDisjunction", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbLegalDisjunction[E,DL,DR,T](implicita:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,Either[DL,DR],T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,DL\\\/DR,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalMaybe", "tail" : "(al: Arbitrary[IllegalValue[E, Option[D], T]]): Arbitrary[IllegalValue[E, Maybe[D], T]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbIllegalMaybe", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbIllegalMaybe[E,D,T](implicital:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,Option[D],T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,scalaz.Maybe[D],T]]", "kind" : "implicit def"}, {"label" : "arbLegalMaybe", "tail" : "(al: Arbitrary[LegalValue[E, Option[D], T]]): Arbitrary[LegalValue[E, Maybe[D], T]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbLegalMaybe", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbLegalMaybe[E,D,T](implicital:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,Option[D],T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,scalaz.Maybe[D],T]]", "kind" : "implicit def"}, {"label" : "cogenMaybe", "tail" : "(arg0: Cogen[A]): Cogen[Maybe[A]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.cogenMaybe", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenMaybe[A](implicitevidence$6:org.scalacheck.Cogen[A]):org.scalacheck.Cogen[scalaz.Maybe[A]]", "kind" : "implicit def"}, {"label" : "arbMaybe", "tail" : "(arg0: Arbitrary[A]): Arbitrary[Maybe[A]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbMaybe", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbMaybe[A](implicitevidence$5:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scalaz.Maybe[A]]", "kind" : "implicit def"}, {"label" : "cogenDisjunction", "tail" : "(arg0: Cogen[A], arg1: Cogen[B]): Cogen[\\\/[A, B]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.cogenDisjunction", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenDisjunction[A,B](implicitevidence$3:org.scalacheck.Cogen[A],implicitevidence$4:org.scalacheck.Cogen[B]):org.scalacheck.Cogen[A\\\/B]", "kind" : "implicit def"}, {"label" : "arbDisjunction", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B]): Arbitrary[\\\/[A, B]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbDisjunction", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbDisjunction[A,B](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B]):org.scalacheck.Arbitrary[A\\\/B]", "kind" : "implicit def"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances", "trait" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "arbIllegalDisjunction", "tail" : "(a: Arbitrary[IllegalValue[E, Either[DL, DR], T]]): Arbitrary[IllegalValue[E, \\\/[DL, DR], T]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbIllegalDisjunction", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbIllegalDisjunction[E,DL,DR,T](implicita:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,Either[DL,DR],T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,DL\\\/DR,T]]", "kind" : "implicit def"}, {"label" : "arbLegalDisjunction", "tail" : "(a: Arbitrary[LegalValue[E, Either[DL, DR], T]]): Arbitrary[LegalValue[E, \\\/[DL, DR], T]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbLegalDisjunction", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbLegalDisjunction[E,DL,DR,T](implicita:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,Either[DL,DR],T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,DL\\\/DR,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalMaybe", "tail" : "(al: Arbitrary[IllegalValue[E, Option[D], T]]): Arbitrary[IllegalValue[E, Maybe[D], T]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbIllegalMaybe", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbIllegalMaybe[E,D,T](implicital:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,Option[D],T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,scalaz.Maybe[D],T]]", "kind" : "implicit def"}, {"label" : "arbLegalMaybe", "tail" : "(al: Arbitrary[LegalValue[E, Option[D], T]]): Arbitrary[LegalValue[E, Maybe[D], T]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbLegalMaybe", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbLegalMaybe[E,D,T](implicital:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,Option[D],T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,scalaz.Maybe[D],T]]", "kind" : "implicit def"}, {"label" : "cogenMaybe", "tail" : "(arg0: Cogen[A]): Cogen[Maybe[A]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.cogenMaybe", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenMaybe[A](implicitevidence$6:org.scalacheck.Cogen[A]):org.scalacheck.Cogen[scalaz.Maybe[A]]", "kind" : "implicit def"}, {"label" : "arbMaybe", "tail" : "(arg0: Arbitrary[A]): Arbitrary[Maybe[A]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbMaybe", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbMaybe[A](implicitevidence$5:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scalaz.Maybe[A]]", "kind" : "implicit def"}, {"label" : "cogenDisjunction", "tail" : "(arg0: Cogen[A], arg1: Cogen[B]): Cogen[\\\/[A, B]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.cogenDisjunction", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenDisjunction[A,B](implicitevidence$3:org.scalacheck.Cogen[A],implicitevidence$4:org.scalacheck.Cogen[B]):org.scalacheck.Cogen[A\\\/B]", "kind" : "implicit def"}, {"label" : "arbDisjunction", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B]): Arbitrary[\\\/[A, B]]", "member" : "kantan.codecs.scalaz.laws.discipline.ArbitraryInstances.arbDisjunction", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbDisjunction[A,B](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B]):org.scalacheck.Arbitrary[A\\\/B]", "kind" : "implicit def"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.scalaz.laws.discipline.EqualInstances", "trait" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html", "kind" : "trait", "members_trait" : [{"label" : "encoderEqual", "tail" : "(arg0: Equal[E], arg1: Arbitrary[D]): Equal[Encoder[E, D, T]]", "member" : "kantan.codecs.scalaz.laws.discipline.EqualInstances.encoderEqual", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#encoderEqual[E,D,T](implicitevidence$4:scalaz.Equal[E],implicitevidence$5:org.scalacheck.Arbitrary[D]):scalaz.Equal[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "decoderEqual", "tail" : "(arg0: Arbitrary[E], arg1: Equal[D], arg2: Equal[F]): Equal[Decoder[E, D, F, T]]", "member" : "kantan.codecs.scalaz.laws.discipline.EqualInstances.decoderEqual", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#decoderEqual[E,D,F,T](implicitevidence$1:org.scalacheck.Arbitrary[E],implicitevidence$2:scalaz.Equal[D],implicitevidence$3:scalaz.Equal[F]):scalaz.Equal[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/EqualInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.scalaz.laws.discipline.equality", "shortDescription" : "", "object" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html", "members_object" : [{"label" : "encoderEqual", "tail" : "(arg0: Equal[E], arg1: Arbitrary[D]): Equal[Encoder[E, D, T]]", "member" : "kantan.codecs.scalaz.laws.discipline.EqualInstances.encoderEqual", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#encoderEqual[E,D,T](implicitevidence$4:scalaz.Equal[E],implicitevidence$5:org.scalacheck.Arbitrary[D]):scalaz.Equal[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "decoderEqual", "tail" : "(arg0: Arbitrary[E], arg1: Equal[D], arg2: Equal[F]): Equal[Decoder[E, D, F, T]]", "member" : "kantan.codecs.scalaz.laws.discipline.EqualInstances.decoderEqual", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#decoderEqual[E,D,F,T](implicitevidence$1:org.scalacheck.Arbitrary[E],implicitevidence$2:scalaz.Equal[D],implicitevidence$3:scalaz.Equal[F]):scalaz.Equal[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/equality$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.scalaz.laws.discipline.ScalazDisciplineSuite", "shortDescription" : "", "members_class" : [{"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWrapper", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.StringShouldWrapper", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnyShouldWrapper", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForCollectedString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForCollectedString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForCollectedString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfCollectedAny", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedArray", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfBeWordForCollectedArray[T<:<?>]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedAny", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfContainWordForCollectedAny", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfNotWordForCollectedAny", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "Collected", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.Collected", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#CollectedextendsSerializable", "kind" : "sealed class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForExtent", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.TheSameInstanceAsPhrase", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnWord", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AWord", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ValueWord", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.KeyWord", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWord", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForAny", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.HavePropertyMatcherGenerator", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#DeterminedByEquivalence[T<:<?>]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#DecidedByEquality[A<:<?>]extendsEquality[A]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.ShouldVerb.StringShouldWrapperForVerb", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ConfiguredPropertyCheck", "tail" : "", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.ConfiguredPropertyCheck", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ConfiguredPropertyCheckextendsAnyRef", "kind" : "class"}, {"label" : "Workers", "tail" : "", "member" : "org.scalatest.prop.Configuration.Workers", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#WorkersextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "SizeRange", "tail" : "", "member" : "org.scalatest.prop.Configuration.SizeRange", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#SizeRangeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSize", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSize", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#MinSizeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MaxDiscardedFactor", "tail" : "", "member" : "org.scalatest.prop.Configuration.MaxDiscardedFactor", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#MaxDiscardedFactorextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSuccessful", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSuccessful", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#MinSuccessfulextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfigParam", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfigParam", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#PropertyCheckConfigParamextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#PropertyCheckConfigurationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#PropertyCheckConfiguration", "kind" : "object"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "checkAll", "tail" : "(name: String, props: Properties): Unit", "member" : "kantan.codecs.scalaz.laws.discipline.ScalazDisciplineSuite.checkAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#checkAll(name:String,props:org.scalacheck.Properties):Unit", "kind" : "def"}, {"member" : "kantan.codecs.scalaz.laws.discipline.ScalazDisciplineSuite#<init>", "error" : "unsupported entity"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.of", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToRegexWrapper", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToStringShouldWrapper", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.matchers.should.Matchers.convertToAnyShouldWrapper", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.the", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atMost[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#between[K,V,JMAP<:<?>](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#between[E,C<:<?>](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exactly[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#every[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#every[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#every[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atLeast[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#all[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.matchers.should.Matchers.message", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#message(expectedMessage:String):org.scalatest.matchers.dsl.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: => Any): ResultOfThrownByApplication", "member" : "org.scalatest.matchers.should.Matchers.thrownBy", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#thrownBy(fun:=>Any):org.scalatest.matchers.dsl.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneElementOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atMostOneElementOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderElementsOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#inOrderElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrder", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allElementsOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#allElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAllOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderOnly", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: Position): ResultOfOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.only", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsInOrderAs", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#theSameElementsInOrderAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsAs", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#theSameElementsAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noElementsOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#noElementsOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfNoneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noneOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneElementOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atLeastOneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneElementOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#oneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.matchers.should.Matchers.definedAt", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#definedAt[T](right:T):org.scalatest.matchers.dsl.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>=", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<=", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.matchers.should.Matchers.regex", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.matchers.should.Matchers.theSameInstanceAs", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.matchers.should.Matchers.value", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.matchers.should.Matchers.key", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.matchers.should.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.matchers.dsl.MatcherWords.equal", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#equal(right:Any):org.scalatest.matchers.dsl.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.matchPattern", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#matchPattern:org.scalatest.matchers.dsl.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.typeCheck", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#typeCheck:org.scalatest.verbs.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.compile", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#compile:org.scalatest.verbs.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.empty", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#empty:org.scalatest.matchers.dsl.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.writable", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#writable:org.scalatest.matchers.dsl.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.readable", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#readable:org.scalatest.matchers.dsl.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.exist", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exist:org.scalatest.matchers.dsl.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: Position): NoExceptionWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.noException", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.defined", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#defined:org.scalatest.matchers.dsl.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.sorted", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#sorted:org.scalatest.matchers.dsl.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.size", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#size:org.scalatest.matchers.dsl.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.length", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#length:org.scalatest.matchers.dsl.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.not", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#not:org.scalatest.matchers.dsl.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.contain", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#contain:org.scalatest.matchers.dsl.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.be", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#be:org.scalatest.matchers.dsl.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.have", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#have:org.scalatest.matchers.dsl.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.include", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#include:org.scalatest.matchers.dsl.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.endWith", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#endWith:org.scalatest.matchers.dsl.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.startWith", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#startWith:org.scalatest.matchers.dsl.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.fullyMatch", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#fullyMatch:org.scalatest.matchers.dsl.FullyMatchWord", "kind" : "val"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.verbs.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "checkAll", "tail" : "(name: String, ruleSet: RuleSet)(config: PropertyCheckConfiguration, prettifier: Prettifier, pos: Position): Unit", "member" : "org.typelevel.discipline.scalatest.FunSuiteDiscipline.checkAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#checkAll(name:String,ruleSet:org.typelevel.discipline.Laws#RuleSet)(implicitconfig:FunSuiteDiscipline.this.PropertyCheckConfiguration,implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "convertConfiguration", "tail" : "(config: PropertyCheckConfiguration): org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "member" : "org.typelevel.discipline.scalatest.Discipline.convertConfiguration", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertConfiguration(config:Discipline.this.PropertyCheckConfiguration):org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "kind" : "final def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), genAndNameF: (Gen[F], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),genAndNameF:(org.scalacheck.Gen[F],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], genF: Gen[F], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],genF:org.scalacheck.Gen[F],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, nameF: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,nameF:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,ASSERTION](fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,ASSERTION](fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,ASSERTION](fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,ASSERTION](nameA:String,nameB:String,nameC:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,ASSERTION](fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,ASSERTION](nameA:String,nameB:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,ASSERTION](fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,ASSERTION](genA:org.scalacheck.Gen[A],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,ASSERTION](nameA:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,ASSERTION](fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(configParams: PropertyCheckConfigParam*): ConfiguredPropertyCheck", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll(configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*):ScalaCheckDrivenPropertyChecks.this.ConfiguredPropertyCheck", "kind" : "def"}, {"label" : "generatorDrivenConfig", "tail" : ": PropertyCheckConfiguration", "member" : "org.scalatest.prop.Configuration.generatorDrivenConfig", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#generatorDrivenConfig:Configuration.this.PropertyCheckConfiguration", "kind" : "implicit val"}, {"label" : "getParameter", "tail" : "(configParams: Seq[PropertyCheckConfigParam], config: PropertyCheckConfiguration): Parameter", "member" : "org.scalatest.prop.Configuration.getParameter", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#getParameter(configParams:Seq[org.scalatest.prop.Configuration#PropertyCheckConfigParam],config:Configuration.this.PropertyCheckConfiguration):org.scalatest.prop.Configuration.Parameter", "kind" : "def"}, {"label" : "workers", "tail" : "(value: PosInt): Workers", "member" : "org.scalatest.prop.Configuration.workers", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#workers(value:org.scalactic.anyvals.PosInt):Configuration.this.Workers", "kind" : "def"}, {"label" : "sizeRange", "tail" : "(value: PosZInt): SizeRange", "member" : "org.scalatest.prop.Configuration.sizeRange", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#sizeRange(value:org.scalactic.anyvals.PosZInt):Configuration.this.SizeRange", "kind" : "def"}, {"label" : "minSize", "tail" : "(value: PosZInt): MinSize", "member" : "org.scalatest.prop.Configuration.minSize", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#minSize(value:org.scalactic.anyvals.PosZInt):Configuration.this.MinSize", "kind" : "def"}, {"label" : "maxDiscardedFactor", "tail" : "(value: PosZDouble): MaxDiscardedFactor", "member" : "org.scalatest.prop.Configuration.maxDiscardedFactor", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#maxDiscardedFactor(value:org.scalactic.anyvals.PosZDouble):Configuration.this.MaxDiscardedFactor", "kind" : "def"}, {"label" : "minSuccessful", "tail" : "(value: PosInt): MinSuccessful", "member" : "org.scalatest.prop.Configuration.minSuccessful", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#minSuccessful(value:org.scalactic.anyvals.PosInt):Configuration.this.MinSuccessful", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,ASSERTION](table:org.scalatest.prop.TableFor22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,ASSERTION](table:org.scalatest.prop.TableFor21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,ASSERTION](table:org.scalatest.prop.TableFor20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,ASSERTION](table:org.scalatest.prop.TableFor19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,ASSERTION](table:org.scalatest.prop.TableFor18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,ASSERTION](table:org.scalatest.prop.TableFor17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,ASSERTION](table:org.scalatest.prop.TableFor16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,ASSERTION](table:org.scalatest.prop.TableFor15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor14[A, B, C, D, E, F, G, H, I, J, K, L, M, N])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,N,ASSERTION](table:org.scalatest.prop.TableFor14[A,B,C,D,E,F,G,H,I,J,K,L,M,N])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor13[A, B, C, D, E, F, G, H, I, J, K, L, M])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,M,ASSERTION](table:org.scalatest.prop.TableFor13[A,B,C,D,E,F,G,H,I,J,K,L,M])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor12[A, B, C, D, E, F, G, H, I, J, K, L])(fun: (A, B, C, D, E, F, G, H, I, J, K, L) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,L,ASSERTION](table:org.scalatest.prop.TableFor12[A,B,C,D,E,F,G,H,I,J,K,L])(fun:(A,B,C,D,E,F,G,H,I,J,K,L)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor11[A, B, C, D, E, F, G, H, I, J, K])(fun: (A, B, C, D, E, F, G, H, I, J, K) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,K,ASSERTION](table:org.scalatest.prop.TableFor11[A,B,C,D,E,F,G,H,I,J,K])(fun:(A,B,C,D,E,F,G,H,I,J,K)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor10[A, B, C, D, E, F, G, H, I, J])(fun: (A, B, C, D, E, F, G, H, I, J) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,J,ASSERTION](table:org.scalatest.prop.TableFor10[A,B,C,D,E,F,G,H,I,J])(fun:(A,B,C,D,E,F,G,H,I,J)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor9[A, B, C, D, E, F, G, H, I])(fun: (A, B, C, D, E, F, G, H, I) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,I,ASSERTION](table:org.scalatest.prop.TableFor9[A,B,C,D,E,F,G,H,I])(fun:(A,B,C,D,E,F,G,H,I)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor8[A, B, C, D, E, F, G, H])(fun: (A, B, C, D, E, F, G, H) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,H,ASSERTION](table:org.scalatest.prop.TableFor8[A,B,C,D,E,F,G,H])(fun:(A,B,C,D,E,F,G,H)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor7[A, B, C, D, E, F, G])(fun: (A, B, C, D, E, F, G) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,G,ASSERTION](table:org.scalatest.prop.TableFor7[A,B,C,D,E,F,G])(fun:(A,B,C,D,E,F,G)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor6[A, B, C, D, E, F])(fun: (A, B, C, D, E, F) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,F,ASSERTION](table:org.scalatest.prop.TableFor6[A,B,C,D,E,F])(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor5[A, B, C, D, E])(fun: (A, B, C, D, E) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,E,ASSERTION](table:org.scalatest.prop.TableFor5[A,B,C,D,E])(fun:(A,B,C,D,E)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor4[A, B, C, D])(fun: (A, B, C, D) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,D,ASSERTION](table:org.scalatest.prop.TableFor4[A,B,C,D])(fun:(A,B,C,D)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor3[A, B, C])(fun: (A, B, C) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,C,ASSERTION](table:org.scalatest.prop.TableFor3[A,B,C])(fun:(A,B,C)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor2[A, B])(fun: (A, B) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,B,ASSERTION](table:org.scalatest.prop.TableFor2[A,B])(fun:(A,B)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "exists", "tail" : "(table: TableFor1[A])(fun: (A) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.exists", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#exists[A,ASSERTION](table:org.scalatest.prop.TableFor1[A])(fun:A=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,ASSERTION](table:org.scalatest.prop.TableFor22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,ASSERTION](table:org.scalatest.prop.TableFor21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,ASSERTION](table:org.scalatest.prop.TableFor20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,ASSERTION](table:org.scalatest.prop.TableFor19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,ASSERTION](table:org.scalatest.prop.TableFor18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,ASSERTION](table:org.scalatest.prop.TableFor17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,ASSERTION](table:org.scalatest.prop.TableFor16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,ASSERTION](table:org.scalatest.prop.TableFor15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor14[A, B, C, D, E, F, G, H, I, J, K, L, M, N])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,N,ASSERTION](table:org.scalatest.prop.TableFor14[A,B,C,D,E,F,G,H,I,J,K,L,M,N])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor13[A, B, C, D, E, F, G, H, I, J, K, L, M])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,M,ASSERTION](table:org.scalatest.prop.TableFor13[A,B,C,D,E,F,G,H,I,J,K,L,M])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor12[A, B, C, D, E, F, G, H, I, J, K, L])(fun: (A, B, C, D, E, F, G, H, I, J, K, L) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,L,ASSERTION](table:org.scalatest.prop.TableFor12[A,B,C,D,E,F,G,H,I,J,K,L])(fun:(A,B,C,D,E,F,G,H,I,J,K,L)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor11[A, B, C, D, E, F, G, H, I, J, K])(fun: (A, B, C, D, E, F, G, H, I, J, K) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,K,ASSERTION](table:org.scalatest.prop.TableFor11[A,B,C,D,E,F,G,H,I,J,K])(fun:(A,B,C,D,E,F,G,H,I,J,K)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor10[A, B, C, D, E, F, G, H, I, J])(fun: (A, B, C, D, E, F, G, H, I, J) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,J,ASSERTION](table:org.scalatest.prop.TableFor10[A,B,C,D,E,F,G,H,I,J])(fun:(A,B,C,D,E,F,G,H,I,J)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor9[A, B, C, D, E, F, G, H, I])(fun: (A, B, C, D, E, F, G, H, I) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,I,ASSERTION](table:org.scalatest.prop.TableFor9[A,B,C,D,E,F,G,H,I])(fun:(A,B,C,D,E,F,G,H,I)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor8[A, B, C, D, E, F, G, H])(fun: (A, B, C, D, E, F, G, H) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,H,ASSERTION](table:org.scalatest.prop.TableFor8[A,B,C,D,E,F,G,H])(fun:(A,B,C,D,E,F,G,H)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor7[A, B, C, D, E, F, G])(fun: (A, B, C, D, E, F, G) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,G,ASSERTION](table:org.scalatest.prop.TableFor7[A,B,C,D,E,F,G])(fun:(A,B,C,D,E,F,G)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor6[A, B, C, D, E, F])(fun: (A, B, C, D, E, F) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,F,ASSERTION](table:org.scalatest.prop.TableFor6[A,B,C,D,E,F])(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor5[A, B, C, D, E])(fun: (A, B, C, D, E) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,E,ASSERTION](table:org.scalatest.prop.TableFor5[A,B,C,D,E])(fun:(A,B,C,D,E)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor4[A, B, C, D])(fun: (A, B, C, D) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,D,ASSERTION](table:org.scalatest.prop.TableFor4[A,B,C,D])(fun:(A,B,C,D)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor3[A, B, C])(fun: (A, B, C) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,C,ASSERTION](table:org.scalatest.prop.TableFor3[A,B,C])(fun:(A,B,C)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor2[A, B])(fun: (A, B) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,B,ASSERTION](table:org.scalatest.prop.TableFor2[A,B])(fun:(A,B)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forEvery", "tail" : "(table: TableFor1[A])(fun: (A) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forEvery", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forEvery[A,ASSERTION](table:org.scalatest.prop.TableFor1[A])(fun:A=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,ASSERTION](table:org.scalatest.prop.TableFor22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,ASSERTION](table:org.scalatest.prop.TableFor21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,ASSERTION](table:org.scalatest.prop.TableFor20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,ASSERTION](table:org.scalatest.prop.TableFor19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,ASSERTION](table:org.scalatest.prop.TableFor18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,ASSERTION](table:org.scalatest.prop.TableFor17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,ASSERTION](table:org.scalatest.prop.TableFor16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,ASSERTION](table:org.scalatest.prop.TableFor15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor14[A, B, C, D, E, F, G, H, I, J, K, L, M, N])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M, N) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,N,ASSERTION](table:org.scalatest.prop.TableFor14[A,B,C,D,E,F,G,H,I,J,K,L,M,N])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M,N)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor13[A, B, C, D, E, F, G, H, I, J, K, L, M])(fun: (A, B, C, D, E, F, G, H, I, J, K, L, M) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,M,ASSERTION](table:org.scalatest.prop.TableFor13[A,B,C,D,E,F,G,H,I,J,K,L,M])(fun:(A,B,C,D,E,F,G,H,I,J,K,L,M)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor12[A, B, C, D, E, F, G, H, I, J, K, L])(fun: (A, B, C, D, E, F, G, H, I, J, K, L) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,L,ASSERTION](table:org.scalatest.prop.TableFor12[A,B,C,D,E,F,G,H,I,J,K,L])(fun:(A,B,C,D,E,F,G,H,I,J,K,L)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor11[A, B, C, D, E, F, G, H, I, J, K])(fun: (A, B, C, D, E, F, G, H, I, J, K) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,K,ASSERTION](table:org.scalatest.prop.TableFor11[A,B,C,D,E,F,G,H,I,J,K])(fun:(A,B,C,D,E,F,G,H,I,J,K)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor10[A, B, C, D, E, F, G, H, I, J])(fun: (A, B, C, D, E, F, G, H, I, J) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,J,ASSERTION](table:org.scalatest.prop.TableFor10[A,B,C,D,E,F,G,H,I,J])(fun:(A,B,C,D,E,F,G,H,I,J)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor9[A, B, C, D, E, F, G, H, I])(fun: (A, B, C, D, E, F, G, H, I) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,I,ASSERTION](table:org.scalatest.prop.TableFor9[A,B,C,D,E,F,G,H,I])(fun:(A,B,C,D,E,F,G,H,I)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor8[A, B, C, D, E, F, G, H])(fun: (A, B, C, D, E, F, G, H) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,H,ASSERTION](table:org.scalatest.prop.TableFor8[A,B,C,D,E,F,G,H])(fun:(A,B,C,D,E,F,G,H)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor7[A, B, C, D, E, F, G])(fun: (A, B, C, D, E, F, G) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,G,ASSERTION](table:org.scalatest.prop.TableFor7[A,B,C,D,E,F,G])(fun:(A,B,C,D,E,F,G)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor6[A, B, C, D, E, F])(fun: (A, B, C, D, E, F) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,F,ASSERTION](table:org.scalatest.prop.TableFor6[A,B,C,D,E,F])(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor5[A, B, C, D, E])(fun: (A, B, C, D, E) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,E,ASSERTION](table:org.scalatest.prop.TableFor5[A,B,C,D,E])(fun:(A,B,C,D,E)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor4[A, B, C, D])(fun: (A, B, C, D) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,D,ASSERTION](table:org.scalatest.prop.TableFor4[A,B,C,D])(fun:(A,B,C,D)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor3[A, B, C])(fun: (A, B, C) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,C,ASSERTION](table:org.scalatest.prop.TableFor3[A,B,C])(fun:(A,B,C)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor2[A, B])(fun: (A, B) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,B,ASSERTION](table:org.scalatest.prop.TableFor2[A,B])(fun:(A,B)=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(table: TableFor1[A])(fun: (A) => ASSERTION)(asserting: TableAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatest.prop.TableDrivenPropertyChecks.forAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#forAll[A,ASSERTION](table:org.scalatest.prop.TableFor1[A])(fun:A=>ASSERTION)(implicitasserting:org.scalatest.enablers.TableAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "whenever", "tail" : "(condition: Boolean)(fun: => T)(wa: WheneverAsserting[T]): Result", "member" : "org.scalatest.prop.Whenever.whenever", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#whenever[T](condition:Boolean)(fun:=>T)(implicitwa:org.scalatest.enablers.WheneverAsserting[T]):wa.Result", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.funsuite.AnyFunSuite.toString", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testDataFor", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.styleName", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testsFor", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.run", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTests", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.tags", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTest", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testNames", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.ignore", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.test", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerIgnoredTest", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerTest", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.markup", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.alert", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.note", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.info", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/codecs\/scalaz\/laws\/discipline\/ScalazDisciplineSuite.html", "kind" : "class"}], "kantan.codecs.enumeratum" : [{"name" : "kantan.codecs.enumeratum.DecoderInstances", "trait" : "kantan\/codecs\/enumeratum\/DecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "enumeratumDecoder", "tail" : "(enum: Enum[D], decoder: Decoder[E, String, F, T], error: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.enumeratum.DecoderInstances.enumeratumDecoder", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#enumeratumDecoder[E,D<:enumeratum.EnumEntry,F,T](implicitenum:enumeratum.Enum[D],implicitdecoder:kantan.codecs.Decoder[E,String,F,T],impliciterror:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/DecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Defines implicit Decoder instances for any enumeratum Enum type."}, {"name" : "kantan.codecs.enumeratum.EncoderInstances", "trait" : "kantan\/codecs\/enumeratum\/EncoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "enumeratumEncoder", "tail" : "(arg0: Enum[D], encoder: Encoder[E, String, T]): Encoder[E, D, T]", "member" : "kantan.codecs.enumeratum.EncoderInstances.enumeratumEncoder", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#enumeratumEncoder[E,D<:enumeratum.EnumEntry,T](implicitevidence$1:enumeratum.Enum[D],implicitencoder:kantan.codecs.Encoder[E,String,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/enumeratum\/EncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Defines implicit Encoder instances for any enumeratum Enum type."}], "kantan.codecs.shapeless.laws" : [{"name" : "kantan.codecs.shapeless.laws.Left", "shortDescription" : "", "members_case class" : [{"member" : "kantan.codecs.shapeless.laws.Left#<init>", "error" : "unsupported entity"}, {"label" : "a", "tail" : ": A", "member" : "kantan.codecs.shapeless.laws.Left.a", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#a:A", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/shapeless\/laws\/Left.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/codecs\/shapeless\/laws\/Left.html", "kind" : "case class"}, {"name" : "kantan.codecs.shapeless.laws.Or", "trait" : "kantan\/codecs\/shapeless\/laws\/Or.html", "kind" : "trait", "members_trait" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/codecs\/shapeless\/laws\/Or.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.shapeless.laws.Right", "shortDescription" : "", "members_case class" : [{"member" : "kantan.codecs.shapeless.laws.Right#<init>", "error" : "unsupported entity"}, {"label" : "b", "tail" : ": B", "member" : "kantan.codecs.shapeless.laws.Right.b", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#b:B", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/shapeless\/laws\/Right.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/codecs\/shapeless\/laws\/Right.html", "kind" : "case class"}], "kantan.codecs.refined.laws.discipline" : [{"name" : "kantan.codecs.refined.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "arbIllegalPositiveIntString", "tail" : ": Arbitrary[IllegalString[Refined[Int, Positive]]]", "member" : "kantan.codecs.refined.laws.discipline.ArbitraryInstances.arbIllegalPositiveIntString", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbIllegalPositiveIntString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Positive]]]", "kind" : "implicit val"}, {"label" : "arbLegalPositiveIntString", "tail" : ": Arbitrary[LegalString[Refined[Int, Positive]]]", "member" : "kantan.codecs.refined.laws.discipline.ArbitraryInstances.arbLegalPositiveIntString", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbLegalPositiveIntString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Positive]]]", "kind" : "implicit val"}, {"label" : "stringSizeArbitrary", "tail" : "(arg0: RefType[F], arbChar: Arbitrary[Char], arbSize: Arbitrary[Refined[Int, P]]): Arbitrary[F[String, Size[P]]]", "member" : "eu.timepit.refined.scalacheck.StringInstances.stringSizeArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#stringSizeArbitrary[F[_,_],P](implicitevidence$1:eu.timepit.refined.api.RefType[F],implicitarbChar:org.scalacheck.Arbitrary[Char],implicitarbSize:org.scalacheck.Arbitrary[eu.timepit.refined.api.Refined[Int,P]]):org.scalacheck.Arbitrary[F[String,eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "nonEmptyStringArbitrary", "tail" : "(rt: RefType[F]): Arbitrary[F[String, NonEmpty]]", "member" : "eu.timepit.refined.scalacheck.StringInstances.nonEmptyStringArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#nonEmptyStringArbitrary[F[_,_]](implicitrt:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[String,eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "startsWithArbitrary", "tail" : "(rt: RefType[F], ws: Aux[S]): Arbitrary[F[String, StartsWith[S]]]", "member" : "eu.timepit.refined.scalacheck.StringInstances.startsWithArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#startsWithArbitrary[F[_,_],S<:String](implicitrt:eu.timepit.refined.api.RefType[F],implicitws:shapeless.Witness.Aux[S]):org.scalacheck.Arbitrary[F[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithArbitrary", "tail" : "(rt: RefType[F], ws: Aux[S]): Arbitrary[F[String, EndsWith[S]]]", "member" : "eu.timepit.refined.scalacheck.StringInstances.endsWithArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#endsWithArbitrary[F[_,_],S<:String](implicitrt:eu.timepit.refined.api.RefType[F],implicitws:shapeless.Witness.Aux[S]):org.scalacheck.Arbitrary[F[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "refTypeCogen", "tail" : "(arg0: Cogen[T], rt: RefType[F]): Cogen[F[T, P]]", "member" : "eu.timepit.refined.scalacheck.RefTypeInstances.refTypeCogen", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#refTypeCogen[F[_,_],T,P](implicitevidence$1:org.scalacheck.Cogen[T],implicitrt:eu.timepit.refined.api.RefType[F]):org.scalacheck.Cogen[F[T,P]]", "kind" : "implicit def"}, {"label" : "checkArbitraryRefinedType", "tail" : "(arb: Arbitrary[FTP], rt: RefinedType[FTP]): Prop", "member" : "eu.timepit.refined.scalacheck.RefTypeInstances.checkArbitraryRefinedType", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#checkArbitraryRefinedType[FTP](implicitarb:org.scalacheck.Arbitrary[FTP],implicitrt:eu.timepit.refined.api.RefinedType[FTP]):org.scalacheck.Prop", "kind" : "def"}, {"label" : "checkArbitraryRefType", "tail" : "(arb: Arbitrary[F[T, P]], rt: RefType[F], v: Validate[T, P]): Prop", "member" : "eu.timepit.refined.scalacheck.RefTypeInstances.checkArbitraryRefType", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#checkArbitraryRefType[F[_<:<?>,_<:<?>],T,P](implicitarb:org.scalacheck.Arbitrary[F[T,P]],implicitrt:eu.timepit.refined.api.RefType[F],implicitv:eu.timepit.refined.api.Validate[T,P]):org.scalacheck.Prop", "kind" : "def"}, {"label" : "arbitraryRefType", "tail" : "(gen: Gen[T])(rt: RefType[F]): Arbitrary[F[T, P]]", "member" : "eu.timepit.refined.scalacheck.RefTypeInstances.arbitraryRefType", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#arbitraryRefType[F[_<:<?>,_<:<?>],T,P](gen:org.scalacheck.Gen[T])(implicitrt:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[T,P]]", "kind" : "def"}, {"label" : "intervalClosedArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], wl: WitnessAs[L, T], wh: WitnessAs[H, T]): Arbitrary[F[T, Closed[L, H]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.intervalClosedArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#intervalClosedArbitrary[F[_,_],T,L,H](implicitevidence$29:eu.timepit.refined.api.RefType[F],implicitevidence$30:Numeric[T],implicitevidence$31:org.scalacheck.Gen.Choose[T],implicitwl:eu.timepit.refined.internal.WitnessAs[L,T],implicitwh:eu.timepit.refined.internal.WitnessAs[H,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Interval.Closed[L,H]]]", "kind" : "implicit def"}, {"label" : "intervalClosedOpenArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], arg3: Adjacent[T], wl: WitnessAs[L, T], wh: WitnessAs[H, T]): Arbitrary[F[T, ClosedOpen[L, H]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.intervalClosedOpenArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#intervalClosedOpenArbitrary[F[_,_],T,L,H](implicitevidence$25:eu.timepit.refined.api.RefType[F],implicitevidence$26:Numeric[T],implicitevidence$27:org.scalacheck.Gen.Choose[T],implicitevidence$28:eu.timepit.refined.internal.Adjacent[T],implicitwl:eu.timepit.refined.internal.WitnessAs[L,T],implicitwh:eu.timepit.refined.internal.WitnessAs[H,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Interval.ClosedOpen[L,H]]]", "kind" : "implicit def"}, {"label" : "intervalOpenClosedArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], arg3: Adjacent[T], wl: WitnessAs[L, T], wh: WitnessAs[H, T]): Arbitrary[F[T, OpenClosed[L, H]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.intervalOpenClosedArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#intervalOpenClosedArbitrary[F[_,_],T,L,H](implicitevidence$21:eu.timepit.refined.api.RefType[F],implicitevidence$22:Numeric[T],implicitevidence$23:org.scalacheck.Gen.Choose[T],implicitevidence$24:eu.timepit.refined.internal.Adjacent[T],implicitwl:eu.timepit.refined.internal.WitnessAs[L,T],implicitwh:eu.timepit.refined.internal.WitnessAs[H,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Interval.OpenClosed[L,H]]]", "kind" : "implicit def"}, {"label" : "intervalOpenArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], arg3: Adjacent[T], wl: WitnessAs[L, T], wh: WitnessAs[H, T]): Arbitrary[F[T, Open[L, H]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.intervalOpenArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#intervalOpenArbitrary[F[_,_],T,L,H](implicitevidence$17:eu.timepit.refined.api.RefType[F],implicitevidence$18:Numeric[T],implicitevidence$19:org.scalacheck.Gen.Choose[T],implicitevidence$20:eu.timepit.refined.internal.Adjacent[T],implicitwl:eu.timepit.refined.internal.WitnessAs[L,T],implicitwh:eu.timepit.refined.internal.WitnessAs[H,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Interval.Open[L,H]]]", "kind" : "implicit def"}, {"label" : "greaterEqualArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], max: Max[T], wn: WitnessAs[N, T]): Arbitrary[F[T, GreaterEqual[N]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.greaterEqualArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#greaterEqualArbitrary[F[_,_],T,N](implicitevidence$14:eu.timepit.refined.api.RefType[F],implicitevidence$15:Numeric[T],implicitevidence$16:org.scalacheck.Gen.Choose[T],implicitmax:eu.timepit.refined.api.Max[T],implicitwn:eu.timepit.refined.internal.WitnessAs[N,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.GreaterEqual[N]]]", "kind" : "implicit def"}, {"label" : "greaterArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], arg3: Adjacent[T], max: Max[T], wn: WitnessAs[N, T]): Arbitrary[F[T, Greater[N]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.greaterArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#greaterArbitrary[F[_,_],T,N](implicitevidence$10:eu.timepit.refined.api.RefType[F],implicitevidence$11:Numeric[T],implicitevidence$12:org.scalacheck.Gen.Choose[T],implicitevidence$13:eu.timepit.refined.internal.Adjacent[T],implicitmax:eu.timepit.refined.api.Max[T],implicitwn:eu.timepit.refined.internal.WitnessAs[N,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "lessEqualArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], min: Min[T], wn: WitnessAs[N, T]): Arbitrary[F[T, LessEqual[N]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.lessEqualArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#lessEqualArbitrary[F[_,_],T,N](implicitevidence$7:eu.timepit.refined.api.RefType[F],implicitevidence$8:Numeric[T],implicitevidence$9:org.scalacheck.Gen.Choose[T],implicitmin:eu.timepit.refined.api.Min[T],implicitwn:eu.timepit.refined.internal.WitnessAs[N,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.LessEqual[N]]]", "kind" : "implicit def"}, {"label" : "lessArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], arg3: Adjacent[T], min: Min[T], wn: WitnessAs[N, T]): Arbitrary[F[T, Less[N]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.lessArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#lessArbitrary[F[_,_],T,N](implicitevidence$3:eu.timepit.refined.api.RefType[F],implicitevidence$4:Numeric[T],implicitevidence$5:org.scalacheck.Gen.Choose[T],implicitevidence$6:eu.timepit.refined.internal.Adjacent[T],implicitmin:eu.timepit.refined.api.Min[T],implicitwn:eu.timepit.refined.internal.WitnessAs[N,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "chooseRefinedNum", "tail" : "(min: F[T, P], max: F[T, P])(arg0: Numeric[T], arg1: Choose[T], rt: RefType[F], v: Validate[T, P]): Gen[F[T, P]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.chooseRefinedNum", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#chooseRefinedNum[F[_<:<?>,_<:<?>],T,P](min:F[T,P],max:F[T,P])(implicitevidence$1:Numeric[T],implicitevidence$2:org.scalacheck.Gen.Choose[T],implicitrt:eu.timepit.refined.api.RefType[F],implicitv:eu.timepit.refined.api.Validate[T,P]):org.scalacheck.Gen[F[T,P]]", "kind" : "def"}, {"label" : "equalArbitrary", "tail" : "(arg0: RefType[F], wu: Aux[U]): Arbitrary[F[T, Equal[U]]]", "member" : "eu.timepit.refined.scalacheck.GenericInstances.equalArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#equalArbitrary[F[_,_],T,U<:T](implicitevidence$1:eu.timepit.refined.api.RefType[F],implicitwu:shapeless.Witness.Aux[U]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.generic.Equal[U]]]", "kind" : "implicit def"}, {"label" : "whitespaceArbitrary", "tail" : "(arg0: RefType[F]): Arbitrary[F[Char, Whitespace]]", "member" : "eu.timepit.refined.scalacheck.CharInstances.whitespaceArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#whitespaceArbitrary[F[_,_]](implicitevidence$5:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[Char,eu.timepit.refined.char.Whitespace]]", "kind" : "implicit def"}, {"label" : "upperCaseArbitrary", "tail" : "(arg0: RefType[F]): Arbitrary[F[Char, UpperCase]]", "member" : "eu.timepit.refined.scalacheck.CharInstances.upperCaseArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#upperCaseArbitrary[F[_,_]](implicitevidence$4:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[Char,eu.timepit.refined.char.UpperCase]]", "kind" : "implicit def"}, {"label" : "lowerCaseArbitrary", "tail" : "(arg0: RefType[F]): Arbitrary[F[Char, LowerCase]]", "member" : "eu.timepit.refined.scalacheck.CharInstances.lowerCaseArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#lowerCaseArbitrary[F[_,_]](implicitevidence$3:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[Char,eu.timepit.refined.char.LowerCase]]", "kind" : "implicit def"}, {"label" : "letterArbitrary", "tail" : "(arg0: RefType[F]): Arbitrary[F[Char, Letter]]", "member" : "eu.timepit.refined.scalacheck.CharInstances.letterArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#letterArbitrary[F[_,_]](implicitevidence$2:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[Char,eu.timepit.refined.char.Letter]]", "kind" : "implicit def"}, {"label" : "digitArbitrary", "tail" : "(arg0: RefType[F]): Arbitrary[F[Char, Digit]]", "member" : "eu.timepit.refined.scalacheck.CharInstances.digitArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#digitArbitrary[F[_,_]](implicitevidence$1:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[Char,eu.timepit.refined.char.Digit]]", "kind" : "implicit def"}, {"label" : "orArbitrary", "tail" : "(rt: RefType[F], arbA: Arbitrary[F[T, A]], arbB: Arbitrary[F[T, B]]): Arbitrary[F[T, Or[A, B]]]", "member" : "eu.timepit.refined.scalacheck.BooleanInstances.orArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#orArbitrary[F[_,_],T,A,B](implicitrt:eu.timepit.refined.api.RefType[F],implicitarbA:org.scalacheck.Arbitrary[F[T,A]],implicitarbB:org.scalacheck.Arbitrary[F[T,B]]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.boolean.Or[A,B]]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/refined\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.refined.laws.discipline.ArbitraryInstances", "trait" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "arbIllegalPositiveIntString", "tail" : ": Arbitrary[IllegalString[Refined[Int, Positive]]]", "member" : "kantan.codecs.refined.laws.discipline.ArbitraryInstances.arbIllegalPositiveIntString", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#arbIllegalPositiveIntString:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Positive]]]", "kind" : "implicit val"}, {"label" : "arbLegalPositiveIntString", "tail" : ": Arbitrary[LegalString[Refined[Int, Positive]]]", "member" : "kantan.codecs.refined.laws.discipline.ArbitraryInstances.arbLegalPositiveIntString", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#arbLegalPositiveIntString:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Positive]]]", "kind" : "implicit val"}, {"label" : "stringSizeArbitrary", "tail" : "(arg0: RefType[F], arbChar: Arbitrary[Char], arbSize: Arbitrary[Refined[Int, P]]): Arbitrary[F[String, Size[P]]]", "member" : "eu.timepit.refined.scalacheck.StringInstances.stringSizeArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#stringSizeArbitrary[F[_,_],P](implicitevidence$1:eu.timepit.refined.api.RefType[F],implicitarbChar:org.scalacheck.Arbitrary[Char],implicitarbSize:org.scalacheck.Arbitrary[eu.timepit.refined.api.Refined[Int,P]]):org.scalacheck.Arbitrary[F[String,eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "nonEmptyStringArbitrary", "tail" : "(rt: RefType[F]): Arbitrary[F[String, NonEmpty]]", "member" : "eu.timepit.refined.scalacheck.StringInstances.nonEmptyStringArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#nonEmptyStringArbitrary[F[_,_]](implicitrt:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[String,eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "startsWithArbitrary", "tail" : "(rt: RefType[F], ws: Aux[S]): Arbitrary[F[String, StartsWith[S]]]", "member" : "eu.timepit.refined.scalacheck.StringInstances.startsWithArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#startsWithArbitrary[F[_,_],S<:String](implicitrt:eu.timepit.refined.api.RefType[F],implicitws:shapeless.Witness.Aux[S]):org.scalacheck.Arbitrary[F[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithArbitrary", "tail" : "(rt: RefType[F], ws: Aux[S]): Arbitrary[F[String, EndsWith[S]]]", "member" : "eu.timepit.refined.scalacheck.StringInstances.endsWithArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#endsWithArbitrary[F[_,_],S<:String](implicitrt:eu.timepit.refined.api.RefType[F],implicitws:shapeless.Witness.Aux[S]):org.scalacheck.Arbitrary[F[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "refTypeCogen", "tail" : "(arg0: Cogen[T], rt: RefType[F]): Cogen[F[T, P]]", "member" : "eu.timepit.refined.scalacheck.RefTypeInstances.refTypeCogen", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#refTypeCogen[F[_,_],T,P](implicitevidence$1:org.scalacheck.Cogen[T],implicitrt:eu.timepit.refined.api.RefType[F]):org.scalacheck.Cogen[F[T,P]]", "kind" : "implicit def"}, {"label" : "checkArbitraryRefinedType", "tail" : "(arb: Arbitrary[FTP], rt: RefinedType[FTP]): Prop", "member" : "eu.timepit.refined.scalacheck.RefTypeInstances.checkArbitraryRefinedType", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#checkArbitraryRefinedType[FTP](implicitarb:org.scalacheck.Arbitrary[FTP],implicitrt:eu.timepit.refined.api.RefinedType[FTP]):org.scalacheck.Prop", "kind" : "def"}, {"label" : "checkArbitraryRefType", "tail" : "(arb: Arbitrary[F[T, P]], rt: RefType[F], v: Validate[T, P]): Prop", "member" : "eu.timepit.refined.scalacheck.RefTypeInstances.checkArbitraryRefType", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#checkArbitraryRefType[F[_<:<?>,_<:<?>],T,P](implicitarb:org.scalacheck.Arbitrary[F[T,P]],implicitrt:eu.timepit.refined.api.RefType[F],implicitv:eu.timepit.refined.api.Validate[T,P]):org.scalacheck.Prop", "kind" : "def"}, {"label" : "arbitraryRefType", "tail" : "(gen: Gen[T])(rt: RefType[F]): Arbitrary[F[T, P]]", "member" : "eu.timepit.refined.scalacheck.RefTypeInstances.arbitraryRefType", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#arbitraryRefType[F[_<:<?>,_<:<?>],T,P](gen:org.scalacheck.Gen[T])(implicitrt:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[T,P]]", "kind" : "def"}, {"label" : "intervalClosedArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], wl: WitnessAs[L, T], wh: WitnessAs[H, T]): Arbitrary[F[T, Closed[L, H]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.intervalClosedArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#intervalClosedArbitrary[F[_,_],T,L,H](implicitevidence$29:eu.timepit.refined.api.RefType[F],implicitevidence$30:Numeric[T],implicitevidence$31:org.scalacheck.Gen.Choose[T],implicitwl:eu.timepit.refined.internal.WitnessAs[L,T],implicitwh:eu.timepit.refined.internal.WitnessAs[H,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Interval.Closed[L,H]]]", "kind" : "implicit def"}, {"label" : "intervalClosedOpenArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], arg3: Adjacent[T], wl: WitnessAs[L, T], wh: WitnessAs[H, T]): Arbitrary[F[T, ClosedOpen[L, H]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.intervalClosedOpenArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#intervalClosedOpenArbitrary[F[_,_],T,L,H](implicitevidence$25:eu.timepit.refined.api.RefType[F],implicitevidence$26:Numeric[T],implicitevidence$27:org.scalacheck.Gen.Choose[T],implicitevidence$28:eu.timepit.refined.internal.Adjacent[T],implicitwl:eu.timepit.refined.internal.WitnessAs[L,T],implicitwh:eu.timepit.refined.internal.WitnessAs[H,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Interval.ClosedOpen[L,H]]]", "kind" : "implicit def"}, {"label" : "intervalOpenClosedArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], arg3: Adjacent[T], wl: WitnessAs[L, T], wh: WitnessAs[H, T]): Arbitrary[F[T, OpenClosed[L, H]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.intervalOpenClosedArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#intervalOpenClosedArbitrary[F[_,_],T,L,H](implicitevidence$21:eu.timepit.refined.api.RefType[F],implicitevidence$22:Numeric[T],implicitevidence$23:org.scalacheck.Gen.Choose[T],implicitevidence$24:eu.timepit.refined.internal.Adjacent[T],implicitwl:eu.timepit.refined.internal.WitnessAs[L,T],implicitwh:eu.timepit.refined.internal.WitnessAs[H,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Interval.OpenClosed[L,H]]]", "kind" : "implicit def"}, {"label" : "intervalOpenArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], arg3: Adjacent[T], wl: WitnessAs[L, T], wh: WitnessAs[H, T]): Arbitrary[F[T, Open[L, H]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.intervalOpenArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#intervalOpenArbitrary[F[_,_],T,L,H](implicitevidence$17:eu.timepit.refined.api.RefType[F],implicitevidence$18:Numeric[T],implicitevidence$19:org.scalacheck.Gen.Choose[T],implicitevidence$20:eu.timepit.refined.internal.Adjacent[T],implicitwl:eu.timepit.refined.internal.WitnessAs[L,T],implicitwh:eu.timepit.refined.internal.WitnessAs[H,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Interval.Open[L,H]]]", "kind" : "implicit def"}, {"label" : "greaterEqualArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], max: Max[T], wn: WitnessAs[N, T]): Arbitrary[F[T, GreaterEqual[N]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.greaterEqualArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#greaterEqualArbitrary[F[_,_],T,N](implicitevidence$14:eu.timepit.refined.api.RefType[F],implicitevidence$15:Numeric[T],implicitevidence$16:org.scalacheck.Gen.Choose[T],implicitmax:eu.timepit.refined.api.Max[T],implicitwn:eu.timepit.refined.internal.WitnessAs[N,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.GreaterEqual[N]]]", "kind" : "implicit def"}, {"label" : "greaterArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], arg3: Adjacent[T], max: Max[T], wn: WitnessAs[N, T]): Arbitrary[F[T, Greater[N]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.greaterArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#greaterArbitrary[F[_,_],T,N](implicitevidence$10:eu.timepit.refined.api.RefType[F],implicitevidence$11:Numeric[T],implicitevidence$12:org.scalacheck.Gen.Choose[T],implicitevidence$13:eu.timepit.refined.internal.Adjacent[T],implicitmax:eu.timepit.refined.api.Max[T],implicitwn:eu.timepit.refined.internal.WitnessAs[N,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "lessEqualArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], min: Min[T], wn: WitnessAs[N, T]): Arbitrary[F[T, LessEqual[N]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.lessEqualArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#lessEqualArbitrary[F[_,_],T,N](implicitevidence$7:eu.timepit.refined.api.RefType[F],implicitevidence$8:Numeric[T],implicitevidence$9:org.scalacheck.Gen.Choose[T],implicitmin:eu.timepit.refined.api.Min[T],implicitwn:eu.timepit.refined.internal.WitnessAs[N,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.LessEqual[N]]]", "kind" : "implicit def"}, {"label" : "lessArbitrary", "tail" : "(arg0: RefType[F], arg1: Numeric[T], arg2: Choose[T], arg3: Adjacent[T], min: Min[T], wn: WitnessAs[N, T]): Arbitrary[F[T, Less[N]]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.lessArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#lessArbitrary[F[_,_],T,N](implicitevidence$3:eu.timepit.refined.api.RefType[F],implicitevidence$4:Numeric[T],implicitevidence$5:org.scalacheck.Gen.Choose[T],implicitevidence$6:eu.timepit.refined.internal.Adjacent[T],implicitmin:eu.timepit.refined.api.Min[T],implicitwn:eu.timepit.refined.internal.WitnessAs[N,T]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "chooseRefinedNum", "tail" : "(min: F[T, P], max: F[T, P])(arg0: Numeric[T], arg1: Choose[T], rt: RefType[F], v: Validate[T, P]): Gen[F[T, P]]", "member" : "eu.timepit.refined.scalacheck.NumericInstances.chooseRefinedNum", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#chooseRefinedNum[F[_<:<?>,_<:<?>],T,P](min:F[T,P],max:F[T,P])(implicitevidence$1:Numeric[T],implicitevidence$2:org.scalacheck.Gen.Choose[T],implicitrt:eu.timepit.refined.api.RefType[F],implicitv:eu.timepit.refined.api.Validate[T,P]):org.scalacheck.Gen[F[T,P]]", "kind" : "def"}, {"label" : "equalArbitrary", "tail" : "(arg0: RefType[F], wu: Aux[U]): Arbitrary[F[T, Equal[U]]]", "member" : "eu.timepit.refined.scalacheck.GenericInstances.equalArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#equalArbitrary[F[_,_],T,U<:T](implicitevidence$1:eu.timepit.refined.api.RefType[F],implicitwu:shapeless.Witness.Aux[U]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.generic.Equal[U]]]", "kind" : "implicit def"}, {"label" : "whitespaceArbitrary", "tail" : "(arg0: RefType[F]): Arbitrary[F[Char, Whitespace]]", "member" : "eu.timepit.refined.scalacheck.CharInstances.whitespaceArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#whitespaceArbitrary[F[_,_]](implicitevidence$5:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[Char,eu.timepit.refined.char.Whitespace]]", "kind" : "implicit def"}, {"label" : "upperCaseArbitrary", "tail" : "(arg0: RefType[F]): Arbitrary[F[Char, UpperCase]]", "member" : "eu.timepit.refined.scalacheck.CharInstances.upperCaseArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#upperCaseArbitrary[F[_,_]](implicitevidence$4:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[Char,eu.timepit.refined.char.UpperCase]]", "kind" : "implicit def"}, {"label" : "lowerCaseArbitrary", "tail" : "(arg0: RefType[F]): Arbitrary[F[Char, LowerCase]]", "member" : "eu.timepit.refined.scalacheck.CharInstances.lowerCaseArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#lowerCaseArbitrary[F[_,_]](implicitevidence$3:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[Char,eu.timepit.refined.char.LowerCase]]", "kind" : "implicit def"}, {"label" : "letterArbitrary", "tail" : "(arg0: RefType[F]): Arbitrary[F[Char, Letter]]", "member" : "eu.timepit.refined.scalacheck.CharInstances.letterArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#letterArbitrary[F[_,_]](implicitevidence$2:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[Char,eu.timepit.refined.char.Letter]]", "kind" : "implicit def"}, {"label" : "digitArbitrary", "tail" : "(arg0: RefType[F]): Arbitrary[F[Char, Digit]]", "member" : "eu.timepit.refined.scalacheck.CharInstances.digitArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#digitArbitrary[F[_,_]](implicitevidence$1:eu.timepit.refined.api.RefType[F]):org.scalacheck.Arbitrary[F[Char,eu.timepit.refined.char.Digit]]", "kind" : "implicit def"}, {"label" : "orArbitrary", "tail" : "(rt: RefType[F], arbA: Arbitrary[F[T, A]], arbB: Arbitrary[F[T, B]]): Arbitrary[F[T, Or[A, B]]]", "member" : "eu.timepit.refined.scalacheck.BooleanInstances.orArbitrary", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#orArbitrary[F[_,_],T,A,B](implicitrt:eu.timepit.refined.api.RefType[F],implicitarbA:org.scalacheck.Arbitrary[F[T,A]],implicitarbB:org.scalacheck.Arbitrary[F[T,B]]):org.scalacheck.Arbitrary[F[T,eu.timepit.refined.boolean.Or[A,B]]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/refined\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.codecs.export" : [{"name" : "kantan.codecs.export.DerivedDecoder", "shortDescription" : "Provides construction methods for kantan.codecs.export.DerivedDecoder.", "object" : "kantan\/codecs\/export\/DerivedDecoder$.html", "members_object" : [{"label" : "from", "tail" : "(f: (E) => Either[F, D]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.export.DerivedDecoder.from", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#from[E,D,F,T](f:E=>Either[F,D]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/export\/DerivedDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.export.DerivedEncoder", "shortDescription" : "Provides construction methods for kantan.codecs.export.DerivedEncoder.", "object" : "kantan\/codecs\/export\/DerivedEncoder$.html", "members_object" : [{"label" : "from", "tail" : "(f: (D) => E): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.export.DerivedEncoder.from", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#from[E,D,T](f:D=>E):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/export\/DerivedEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.export.Exported", "shortDescription" : "Wraps derived type class instances.", "members_case class" : [{"member" : "kantan.codecs.export.Exported#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": A", "member" : "kantan.codecs.export.Exported.value", "link" : "kantan\/codecs\/export\/Exported.html#value:A", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/codecs\/export\/Exported.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "kantan\/codecs\/export\/Exported.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "kantan\/codecs\/export\/Exported.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/export\/Exported.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/export\/Exported.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "kantan\/codecs\/export\/Exported.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "kantan\/codecs\/export\/Exported.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "kantan\/codecs\/export\/Exported.html", "kind" : "case class"}], "kantan.codecs.cats" : [{"name" : "kantan.codecs.cats.CommonInstances", "trait" : "kantan\/codecs\/cats\/CommonInstances.html", "kind" : "trait", "members_trait" : [{"label" : "stringDecodeErrorEq", "tail" : ": Eq[DecodeError]", "member" : "kantan.codecs.cats.CommonInstances.stringDecodeErrorEq", "link" : "kantan\/codecs\/cats\/CommonInstances.html#stringDecodeErrorEq:cats.Eq[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "isErrorShow", "tail" : "(): Show[E]", "member" : "kantan.codecs.cats.CommonInstances.isErrorShow", "link" : "kantan\/codecs\/cats\/CommonInstances.html#isErrorShow[E<:kantan.codecs.error.Error]:cats.Show[E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/cats\/CommonInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/cats\/CommonInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/cats\/CommonInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/cats\/CommonInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/cats\/CommonInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/cats\/CommonInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/cats\/CommonInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/CommonInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/CommonInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/CommonInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/cats\/CommonInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/cats\/CommonInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/cats\/CommonInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/cats\/CommonInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/cats\/CommonInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/cats\/CommonInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/cats\/CommonInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/cats\/CommonInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/cats\/CommonInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.cats.DecoderInstances", "trait" : "kantan\/codecs\/cats\/DecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "decoderInstances", "tail" : "(): SemigroupK[[A]Decoder[E, A, F, T]] with MonadError[[A]Decoder[E, A, F, T], F]", "member" : "kantan.codecs.cats.DecoderInstances.decoderInstances", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#decoderInstances[E,F,T]:cats.SemigroupK[[A]kantan.codecs.Decoder[E,A,F,T]]withcats.MonadError[[A]kantan.codecs.Decoder[E,A,F,T],F]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/cats\/DecoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/cats\/DecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.codecs.cats.EncoderInstances", "trait" : "kantan\/codecs\/cats\/EncoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "encoderContravariant", "tail" : "(): Contravariant[[A]Encoder[E, A, T]]", "member" : "kantan.codecs.cats.EncoderInstances.encoderContravariant", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#encoderContravariant[E,T]:cats.Contravariant[[A]kantan.codecs.Encoder[E,A,T]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/cats\/EncoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/cats\/EncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.codecs.shapeless" : [{"name" : "kantan.codecs.shapeless.ShapelessInstances", "trait" : "kantan\/codecs\/shapeless\/ShapelessInstances.html", "kind" : "trait", "members_trait" : [{"label" : "coproductEncoder", "tail" : "(eh: Encoder[E, H, T], ed: Encoder[E, D, T]): Encoder[E, :+:[H, D], T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.coproductEncoder", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#coproductEncoder[E,H,D<:shapeless.Coproduct,T](impliciteh:kantan.codecs.Encoder[E,H,T],implicited:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,H:+:D,T]", "kind" : "implicit def"}, {"label" : "cnilEncoder", "tail" : "(): Encoder[E, CNil, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.cnilEncoder", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#cnilEncoder[E,D,T]:kantan.codecs.Encoder[E,shapeless.CNil,T]", "kind" : "implicit def"}, {"label" : "coproductDecoder", "tail" : "(dh: Decoder[E, H, F, T], dt: Decoder[E, D, F, T]): Decoder[E, :+:[H, D], F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.coproductDecoder", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#coproductDecoder[E,H,D<:shapeless.Coproduct,F,T](implicitdh:kantan.codecs.Decoder[E,H,F,T],implicitdt:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,H:+:D,F,T]", "kind" : "implicit def"}, {"label" : "cnilDecoder", "tail" : "(arg0: IsError[F]): Decoder[E, CNil, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.cnilDecoder", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#cnilDecoder[E,F,T](implicitevidence$1:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,shapeless.CNil,F,T]", "kind" : "implicit def"}, {"label" : "sumTypeDecoder", "tail" : "(gen: Aux[D, C], dr: Lazy[Decoder[E, C, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.sumTypeDecoder", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#sumTypeDecoder[E,D,F,T,C<:shapeless.Coproduct](implicitgen:shapeless.Generic.Aux[D,C],implicitdr:shapeless.Lazy[kantan.codecs.Decoder[E,C,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "sumTypeEncoder", "tail" : "(gen: Aux[D, C], er: Lazy[Encoder[E, C, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.sumTypeEncoder", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#sumTypeEncoder[E,D,T,C<:shapeless.Coproduct](implicitgen:shapeless.Generic.Aux[D,C],impliciter:shapeless.Lazy[kantan.codecs.Encoder[E,C,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "caseClassDecoderFromLabelled", "tail" : "(generic: Aux[D, H], hDecoder: Lazy[Decoder[E, H, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassDecoderFromLabelled", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#caseClassDecoderFromLabelled[E,D,F,T,H<:shapeless.HList](implicitgeneric:shapeless.LabelledGeneric.Aux[D,H],implicithDecoder:shapeless.Lazy[kantan.codecs.Decoder[E,H,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "caseClassDecoder", "tail" : "(gen: Aux[D, H], dr: Lazy[Decoder[E, H, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassDecoder", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#caseClassDecoder[E,D,F,T,H<:shapeless.HList](implicitgen:shapeless.Generic.Aux[D,H],implicitdr:shapeless.Lazy[kantan.codecs.Decoder[E,H,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "caseClassEncoderFromLabelled", "tail" : "(generic: Aux[D, H], hEncoder: Lazy[Encoder[E, H, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassEncoderFromLabelled", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#caseClassEncoderFromLabelled[E,D,T,H<:shapeless.HList](implicitgeneric:shapeless.LabelledGeneric.Aux[D,H],implicithEncoder:shapeless.Lazy[kantan.codecs.Encoder[E,H,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "caseClassEncoder", "tail" : "(gen: Aux[D, H], er: Lazy[Encoder[E, H, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassEncoder", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#caseClassEncoder[E,D,T,H<:shapeless.HList](implicitgen:shapeless.Generic.Aux[D,H],impliciter:shapeless.Lazy[kantan.codecs.Encoder[E,H,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/shapeless\/ShapelessInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides Codec instances for case classes and sum types."}], "kantan.codecs.libra.laws.discipline" : [{"name" : "kantan.codecs.libra.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Arbitrary[D], arg2: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Arbitrary[D],implicitevidence$10:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[D], arg3: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Arbitrary[E],implicitevidence$5:org.scalacheck.Cogen[E],implicitevidence$6:org.scalacheck.Arbitrary[D],implicitevidence$7:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "arbIllegalQuantity", "tail" : "(ai: Arbitrary[IllegalString[A]]): Arbitrary[IllegalString[Quantity[A, D]]]", "member" : "kantan.codecs.libra.laws.discipline.ArbitraryInstances.arbIllegalQuantity", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbIllegalQuantity[A,D<:shapeless.HList](implicitai:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[libra.Quantity[A,D]]]", "kind" : "implicit def"}, {"label" : "arbLegalQuantity", "tail" : "(arg0: Arbitrary[A], arg1: StringEncoder[A]): Arbitrary[LegalString[Quantity[A, D]]]", "member" : "kantan.codecs.libra.laws.discipline.ArbitraryInstances.arbLegalQuantity", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbLegalQuantity[A,D<:shapeless.HList](implicitevidence$3:org.scalacheck.Arbitrary[A],implicitevidence$4:kantan.codecs.strings.StringEncoder[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[libra.Quantity[A,D]]]", "kind" : "implicit def"}, {"label" : "cogenQuantity", "tail" : "(arg0: Cogen[A]): Cogen[Quantity[A, D]]", "member" : "kantan.codecs.libra.laws.discipline.ArbitraryInstances.cogenQuantity", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#cogenQuantity[A,D<:shapeless.HList](implicitevidence$2:org.scalacheck.Cogen[A]):org.scalacheck.Cogen[libra.Quantity[A,D]]", "kind" : "implicit def"}, {"label" : "arbQuantity", "tail" : "(arg0: Arbitrary[A]): Arbitrary[Quantity[A, D]]", "member" : "kantan.codecs.libra.laws.discipline.ArbitraryInstances.arbQuantity", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#arbQuantity[A,D<:shapeless.HList](implicitevidence$1:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[libra.Quantity[A,D]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/libra\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.codecs.libra.laws.discipline.ArbitraryInstances", "trait" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "arbIllegalQuantity", "tail" : "(ai: Arbitrary[IllegalString[A]]): Arbitrary[IllegalString[Quantity[A, D]]]", "member" : "kantan.codecs.libra.laws.discipline.ArbitraryInstances.arbIllegalQuantity", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#arbIllegalQuantity[A,D<:shapeless.HList](implicitai:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[libra.Quantity[A,D]]]", "kind" : "implicit def"}, {"label" : "arbLegalQuantity", "tail" : "(arg0: Arbitrary[A], arg1: StringEncoder[A]): Arbitrary[LegalString[Quantity[A, D]]]", "member" : "kantan.codecs.libra.laws.discipline.ArbitraryInstances.arbLegalQuantity", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#arbLegalQuantity[A,D<:shapeless.HList](implicitevidence$3:org.scalacheck.Arbitrary[A],implicitevidence$4:kantan.codecs.strings.StringEncoder[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[libra.Quantity[A,D]]]", "kind" : "implicit def"}, {"label" : "cogenQuantity", "tail" : "(arg0: Cogen[A]): Cogen[Quantity[A, D]]", "member" : "kantan.codecs.libra.laws.discipline.ArbitraryInstances.cogenQuantity", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#cogenQuantity[A,D<:shapeless.HList](implicitevidence$2:org.scalacheck.Cogen[A]):org.scalacheck.Cogen[libra.Quantity[A,D]]", "kind" : "implicit def"}, {"label" : "arbQuantity", "tail" : "(arg0: Arbitrary[A]): Arbitrary[Quantity[A, D]]", "member" : "kantan.codecs.libra.laws.discipline.ArbitraryInstances.arbQuantity", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#arbQuantity[A,D<:shapeless.HList](implicitevidence$1:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[libra.Quantity[A,D]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/codecs\/libra\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}]};