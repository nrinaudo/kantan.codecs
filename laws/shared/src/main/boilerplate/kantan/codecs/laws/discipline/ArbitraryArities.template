/*
 * Copyright 2016 Nicolas Rinaudo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kantan.codecs.laws.discipline

import kantan.codecs.laws.CodecValue.{IllegalValue, LegalValue}
import org.scalacheck.{Arbitrary, Gen}

trait ArbitraryArities {
  [#def genLegalWith1[[#E1#], [#D1#], EE, DD, T](decoded: ([#D1#]) => DD)(encoded: ([#E1#]) => EE)(implicit [#arb1: Arbitrary[LegalValue[E1, D1, T]]#]): Gen[LegalValue[EE, DD, T]] =
    for {
      [#l1 <- arb1.arbitrary#
      ]
    } yield LegalValue(encoded([#l1.encoded#]), decoded([#l1.decoded#]))

  def genIllegalWith1[[#E1#], [#D1#], EE, DD, T](encoded: ([#E1#]) => EE)(implicit [#arb1: Arbitrary[IllegalValue[E1, D1, T]]#]): Gen[IllegalValue[EE, DD, T]] =
    for {
      [#l1 <- arb1.arbitrary#
      ]
    } yield IllegalValue(encoded([#l1.encoded#]))#

  ]


  [#def genLegalTuple1[[#E1#], [#D1#], T](implicit [#arbD1: Arbitrary[LegalValue[E1, D1, T]]#]): Gen[LegalValue[Tuple1[[#E1#]], Tuple1[[#D1#]], T]] =
    genLegalWith1(([#d1: D1#]) => Tuple1([#d1#]))(([#e1: E1#]) => Tuple1([#e1#]))

  def genIllegalTuple1[[#E1#], [#D1#], T](implicit [#arbD1: Arbitrary[IllegalValue[E1, D1, T]]#]): Gen[IllegalValue[Tuple1[[#E1#]], Tuple1[[#D1#]], T]] =
    genIllegalWith1(([#e1: E1#]) => Tuple1([#e1#]))([#arbD1#])#

  ]
}
